{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.extractExpoPathFromURL = exports.parsePathFromExpoGoLink = exports.parsePathAndParamsFromExpoGoLink = void 0;\nfunction parsePathAndParamsFromExpoGoLink(url) {\n  var _results$, _results$2;\n  var href = parsePathFromExpoGoLink(url);\n  var results = href.match(/([^?]*)(\\?.*)?/);\n  return {\n    pathname: (_results$ = results == null ? void 0 : results[1]) != null ? _results$ : '',\n    queryString: (_results$2 = results == null ? void 0 : results[2]) != null ? _results$2 : ''\n  };\n}\nexports.parsePathAndParamsFromExpoGoLink = parsePathAndParamsFromExpoGoLink;\nfunction parsePathFromExpoGoLink(url) {\n  var _url$match$, _url$match;\n  return (_url$match$ = (_url$match = url.match(/exps?:\\/\\/.*?\\/--\\/(.*)/)) == null ? void 0 : _url$match[1]) != null ? _url$match$ : '';\n}\nexports.parsePathFromExpoGoLink = parsePathFromExpoGoLink;\nfunction extractExactPathFromURL(url) {\n  var _globalThis$expo, _globalThis$expo$modu;\n  if (url.match(/^https?:\\/\\//)) {\n    var _URL = new URL(url),\n      origin = _URL.origin,\n      href = _URL.href,\n      hostname = _URL.hostname;\n    if (hostname === 'exp.host' || hostname === 'u.expo.dev') {\n      return '';\n    }\n    return href.replace(origin, '');\n  }\n  var isExpoGo = typeof expo !== 'undefined' && ((_globalThis$expo = globalThis.expo) == null ? void 0 : (_globalThis$expo$modu = _globalThis$expo.modules) == null ? void 0 : _globalThis$expo$modu.ExpoGo);\n  if (isExpoGo && url.match(/^exp(s)?:\\/\\//)) {\n    var _url$match2;\n    var pathname = parsePathFromExpoGoLink(url);\n    if (pathname) {\n      return fromDeepLink('a://' + pathname);\n    }\n    var queryParams = (_url$match2 = url.match(/exps?:\\/\\/.*\\?(.*)/)) == null ? void 0 : _url$match2[1];\n    if (queryParams) {\n      return fromDeepLink('a://?' + queryParams);\n    }\n    return '';\n  }\n  return fromDeepLink(url);\n}\nfunction isExpoDevelopmentClient(url) {\n  return url.hostname === 'expo-development-client';\n}\nfunction fromDeepLink(url) {\n  var res;\n  try {\n    res = new URL(url);\n  } catch (_unused) {\n    return url.replace(/^[^:]+:\\/\\//, '');\n  }\n  if (isExpoDevelopmentClient(res)) {\n    if (!res.searchParams.get('url')) {\n      return '';\n    }\n    var incomingUrl = res.searchParams.get('url');\n    return extractExactPathFromURL(decodeURI(incomingUrl));\n  }\n  var results = '';\n  if (res.host) {\n    results += res.host;\n  }\n  if (res.pathname) {\n    results += res.pathname;\n  }\n  var qs = !res.search ? '' : _toConsumableArray(res.searchParams.entries()).map(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n      k = _ref2[0],\n      v = _ref2[1];\n    return `${k}=${decodeURIComponent(v)}`;\n  }).join('&');\n  if (qs) {\n    results += '?' + qs;\n  }\n  return results;\n}\nfunction extractExpoPathFromURL(_prefixes) {\n  var url = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  return extractExactPathFromURL(url).replace(/^\\//, '');\n}\nexports.extractExpoPathFromURL = extractExpoPathFromURL;","map":{"version":3,"names":["parsePathAndParamsFromExpoGoLink","url","_results$","_results$2","href","parsePathFromExpoGoLink","results","match","pathname","queryString","exports","_url$match$","_url$match","extractExactPathFromURL","_globalThis$expo","_globalThis$expo$modu","_URL","URL","origin","hostname","replace","isExpoGo","expo","globalThis","modules","ExpoGo","_url$match2","fromDeepLink","queryParams","isExpoDevelopmentClient","res","_unused","searchParams","get","incomingUrl","decodeURI","host","qs","search","_toConsumableArray","entries","map","_ref","_ref2","_slicedToArray","k","v","decodeURIComponent","join","extractExpoPathFromURL","_prefixes","arguments","length","undefined"],"sources":["C:\\Users\\R User\\Documents\\software_dev\\BranchBuddy\\node_modules\\expo-router\\src\\fork\\extractPathFromURL.ts"],"sourcesContent":["export function parsePathAndParamsFromExpoGoLink(url: string): {\n  pathname: string;\n  queryString: string;\n} {\n  // If the URL is defined (default in Expo Go dev apps) and the URL has no path:\n  // `exp://192.168.87.39:19000/` then use the default `exp://192.168.87.39:19000/--/`\n\n  const href = parsePathFromExpoGoLink(url);\n  const results = href.match(/([^?]*)(\\?.*)?/);\n  return {\n    pathname: results?.[1] ?? '',\n    queryString: results?.[2] ?? '',\n  };\n}\n\nexport function parsePathFromExpoGoLink(url: string): string {\n  // If the URL is defined (default in Expo Go dev apps) and the URL has no path:\n  // `exp://192.168.87.39:19000/` then use the default `exp://192.168.87.39:19000/--/`\n  return url.match(/exps?:\\/\\/.*?\\/--\\/(.*)/)?.[1] ?? '';\n}\n\n// This is only run on native.\nfunction extractExactPathFromURL(url: string): string {\n  if (\n    // If a universal link / app link / web URL is used, we should use the path\n    // from the URL, while stripping the origin.\n    url.match(/^https?:\\/\\//)\n  ) {\n    const { origin, href, hostname } = new URL(url);\n\n    if (hostname === 'exp.host' || hostname === 'u.expo.dev') {\n      // These are QR code generate deep-link that always like to the '/' path\n      // TODO: In the future, QR code may link to a specific path and this logic will need to be udpated\n      return '';\n    }\n\n    return href.replace(origin, '');\n  }\n\n  const isExpoGo = typeof expo !== 'undefined' && globalThis.expo?.modules?.ExpoGo;\n\n  // Handle special URLs used in Expo Go: `/--/pathname` -> `pathname`\n  if (\n    isExpoGo &&\n    // while not exhaustive, `exp` and `exps` are the only two schemes which\n    // are passed through to other apps in Expo Go.\n    url.match(/^exp(s)?:\\/\\//)\n  ) {\n    const pathname = parsePathFromExpoGoLink(url);\n    if (pathname) {\n      return fromDeepLink('a://' + pathname);\n    }\n    // Match the `?.*` segment of the URL.\n    const queryParams = url.match(/exps?:\\/\\/.*\\?(.*)/)?.[1];\n    if (queryParams) {\n      return fromDeepLink('a://?' + queryParams);\n    }\n\n    return '';\n  }\n\n  // TODO: Support dev client URLs\n\n  return fromDeepLink(url);\n}\n\n/** Major hack to support the makeshift expo-development-client system. */\nfunction isExpoDevelopmentClient(url: URL): boolean {\n  return url.hostname === 'expo-development-client';\n}\n\nfunction fromDeepLink(url: string): string {\n  let res: URL | null;\n  try {\n    // This is for all standard deep links, e.g. `foobar://` where everything\n    // after the `://` is the path.\n    res = new URL(url);\n  } catch {\n    /**\n     * We failed to parse the URL. This can occur for a variety of reasons, including:\n     * - Its a partial URL (e.g. `/route?query=param`).\n     * - It has a valid App scheme, but the scheme isn't a valid URL scheme (e.g. `my_app://`)\n     */\n\n    /**\n     * App schemes are not valid URL schemes, so they will fail to parse.\n     * We need to strip the scheme from these URLs\n     */\n    return url.replace(/^[^:]+:\\/\\//, '');\n  }\n\n  if (isExpoDevelopmentClient(res)) {\n    if (!res.searchParams.get('url')) {\n      return '';\n    }\n    const incomingUrl = res.searchParams.get('url')!;\n    return extractExactPathFromURL(decodeURI(incomingUrl));\n  }\n\n  let results = '';\n\n  if (res.host) {\n    results += res.host;\n  }\n\n  if (res.pathname) {\n    results += res.pathname;\n  }\n\n  const qs = !res.search\n    ? ''\n    : // @ts-ignore: `entries` is not on `URLSearchParams` in some typechecks.\n      [...res.searchParams.entries()].map(([k, v]) => `${k}=${decodeURIComponent(v)}`).join('&');\n\n  if (qs) {\n    results += '?' + qs;\n  }\n\n  return results;\n}\n\nexport function extractExpoPathFromURL(_prefixes: string[], url: string = '') {\n  return (\n    extractExactPathFromURL(url)\n      // TODO: We should get rid of this, dropping specificities is not good\n      .replace(/^\\//, '')\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}