{"ast":null,"code":"'use client';\n\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nvar _reactJsxRuntime = require(\"react/jsx-runtime\");\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\nvar _excluded = [\"wrapper\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ExpoRoot = void 0;\nvar react_1 = __importStar(require(\"react\"));\nvar react_native_1 = require(\"react-native-web/dist/index\");\nvar react_native_safe_area_context_1 = require(\"react-native-safe-area-context\");\nvar NavigationContainer_1 = require(\"./fork/NavigationContainer\");\nvar router_store_1 = require(\"./global-state/router-store\");\nvar serverLocationContext_1 = require(\"./global-state/serverLocationContext\");\nvar useDomComponentNavigation_1 = require(\"./link/useDomComponentNavigation\");\nvar statusbar_1 = require(\"./utils/statusbar\");\nvar SplashScreen = __importStar(require(\"./views/Splash\"));\nvar isTestEnv = process.env.NODE_ENV === 'test';\nvar INITIAL_METRICS = react_native_1.Platform.OS === 'web' || isTestEnv ? {\n  frame: {\n    x: 0,\n    y: 0,\n    width: 0,\n    height: 0\n  },\n  insets: {\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0\n  }\n} : undefined;\nfunction ExpoRoot(_ref) {\n  var _ref$wrapper = _ref.wrapper,\n    ParentWrapper = _ref$wrapper === void 0 ? react_1.Fragment : _ref$wrapper,\n    props = _objectWithoutProperties(_ref, _excluded);\n  var wrapper = function wrapper(_ref2) {\n    var children = _ref2.children;\n    return _reactJsxRuntime.jsx(ParentWrapper, {\n      children: _reactJsxRuntime.jsxs(react_native_safe_area_context_1.SafeAreaProvider, {\n        initialMetrics: INITIAL_METRICS,\n        children: [statusbar_1.canOverrideStatusBarBehavior && _reactJsxRuntime.jsx(AutoStatusBar, {}), children]\n      })\n    });\n  };\n  return _reactJsxRuntime.jsx(ContextNavigator, _objectSpread(_objectSpread({}, props), {}, {\n    wrapper: wrapper\n  }));\n}\nexports.ExpoRoot = ExpoRoot;\nfunction AutoStatusBar() {\n  return _reactJsxRuntime.jsx(react_native_1.StatusBar, {\n    barStyle: (0, react_native_1.useColorScheme)() === 'light' ? 'dark-content' : 'light-content'\n  });\n}\nvar initialUrl = react_native_1.Platform.OS === 'web' && typeof window !== 'undefined' ? new URL(window.location.href) : undefined;\nfunction ContextNavigator(_ref3) {\n  var context = _ref3.context,\n    _ref3$location = _ref3.location,\n    initialLocation = _ref3$location === void 0 ? initialUrl : _ref3$location,\n    _ref3$wrapper = _ref3.wrapper,\n    WrapperComponent = _ref3$wrapper === void 0 ? react_1.Fragment : _ref3$wrapper,\n    _ref3$linking = _ref3.linking,\n    linking = _ref3$linking === void 0 ? {} : _ref3$linking;\n  var serverContext = (0, react_1.useMemo)(function () {\n    var contextType = {};\n    if (initialLocation instanceof URL) {\n      contextType = {\n        location: {\n          pathname: initialLocation.pathname + initialLocation.hash,\n          search: initialLocation.search\n        }\n      };\n    } else if (typeof initialLocation === 'string') {\n      var url = new URL(initialLocation, 'http://placeholder.base');\n      contextType = {\n        location: {\n          pathname: url.pathname,\n          search: url.search\n        }\n      };\n    }\n    return contextType;\n  }, []);\n  var serverUrl = serverContext.location ? `${serverContext.location.pathname}${serverContext.location.search}` : undefined;\n  var store = (0, router_store_1.useInitializeExpoRouter)(context, _objectSpread(_objectSpread({}, linking), {}, {\n    serverUrl: serverUrl\n  }));\n  (0, useDomComponentNavigation_1.useDomComponentNavigation)(store);\n  if (store.shouldShowTutorial()) {\n    SplashScreen.hideAsync();\n    if (process.env.NODE_ENV === 'development') {\n      var Tutorial = require(\"./onboard/Tutorial\").Tutorial;\n      return _reactJsxRuntime.jsx(WrapperComponent, {\n        children: _reactJsxRuntime.jsx(Tutorial, {})\n      });\n    } else {\n      return null;\n    }\n  }\n  var Component = store.rootComponent;\n  return _reactJsxRuntime.jsx(NavigationContainer_1.NavigationContainer, {\n    ref: store.navigationRef,\n    initialState: store.initialState,\n    linking: store.linking,\n    onUnhandledAction: onUnhandledAction,\n    documentTitle: {\n      enabled: false\n    },\n    children: _reactJsxRuntime.jsx(serverLocationContext_1.ServerContext.Provider, {\n      value: serverContext,\n      children: _reactJsxRuntime.jsx(WrapperComponent, {\n        children: _reactJsxRuntime.jsx(Component, {})\n      })\n    })\n  });\n}\nvar onUnhandledAction;\nif (process.env.NODE_ENV !== 'production') {\n  onUnhandledAction = function onUnhandledAction(action) {\n    var payload = action.payload;\n    var message = `The action '${action.type}'${payload ? ` with payload ${JSON.stringify(action.payload)}` : ''} was not handled by any navigator.`;\n    switch (action.type) {\n      case 'NAVIGATE':\n      case 'PUSH':\n      case 'REPLACE':\n      case 'JUMP_TO':\n        if (payload != null && payload.name) {\n          message += `\\n\\nDo you have a route named '${payload.name}'?`;\n        } else {\n          message += `\\n\\nYou need to pass the name of the screen to navigate to. This may be a bug.`;\n        }\n        break;\n      case 'GO_BACK':\n      case 'POP':\n      case 'POP_TO_TOP':\n        message += `\\n\\nIs there any screen to go back to?`;\n        break;\n      case 'OPEN_DRAWER':\n      case 'CLOSE_DRAWER':\n      case 'TOGGLE_DRAWER':\n        message += `\\n\\nIs your screen inside a Drawer navigator?`;\n        break;\n    }\n    message += `\\n\\nThis is a development-only warning and won't be shown in production.`;\n    if (process.env.NODE_ENV === 'test') {\n      throw new Error(message);\n    }\n    console.error(message);\n  };\n} else {\n  onUnhandledAction = function onUnhandledAction() {};\n}","map":{"version":3,"names":["react_1","__importStar","require","react_native_1","react_native_safe_area_context_1","NavigationContainer_1","router_store_1","serverLocationContext_1","useDomComponentNavigation_1","statusbar_1","SplashScreen","isTestEnv","process","env","NODE_ENV","INITIAL_METRICS","Platform","OS","frame","x","y","width","height","insets","top","left","right","bottom","undefined","ExpoRoot","_ref","_ref$wrapper","wrapper","ParentWrapper","Fragment","props","_objectWithoutProperties","_excluded","_ref2","children","_reactJsxRuntime","jsx","jsxs","SafeAreaProvider","initialMetrics","canOverrideStatusBarBehavior","AutoStatusBar","ContextNavigator","_objectSpread","exports","StatusBar","barStyle","useColorScheme","initialUrl","window","URL","location","href","_ref3","context","_ref3$location","initialLocation","_ref3$wrapper","WrapperComponent","_ref3$linking","linking","serverContext","useMemo","contextType","pathname","hash","search","url","serverUrl","store","useInitializeExpoRouter","useDomComponentNavigation","shouldShowTutorial","hideAsync","Tutorial","Component","rootComponent","NavigationContainer","ref","navigationRef","initialState","onUnhandledAction","documentTitle","enabled","ServerContext","Provider","value","action","payload","message","type","JSON","stringify","name","Error","console","error"],"sources":["C:\\Users\\R User\\Documents\\software_dev\\BranchBuddy\\node_modules\\expo-router\\src\\ExpoRoot.tsx"],"sourcesContent":["'use client';\n\nimport { LinkingOptions, NavigationAction } from '@react-navigation/native';\nimport React, { type PropsWithChildren, Fragment, type ComponentType, useMemo } from 'react';\nimport { StatusBar, useColorScheme, Platform } from 'react-native';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\nimport { NavigationContainer as UpstreamNavigationContainer } from './fork/NavigationContainer';\nimport { ExpoLinkingOptions } from './getLinkingConfig';\nimport { useInitializeExpoRouter } from './global-state/router-store';\nimport { ServerContext, ServerContextType } from './global-state/serverLocationContext';\nimport { useDomComponentNavigation } from './link/useDomComponentNavigation';\nimport { RequireContext } from './types';\nimport { canOverrideStatusBarBehavior } from './utils/statusbar';\nimport * as SplashScreen from './views/Splash';\n\nexport type ExpoRootProps = {\n  context: RequireContext;\n  location?: URL | string;\n  wrapper?: ComponentType<PropsWithChildren>;\n  linking?: Partial<ExpoLinkingOptions>;\n};\n\nexport type NativeIntent = {\n  redirectSystemPath?: (event: {\n    path: string | null;\n    initial: boolean;\n  }) => Promise<string | null | undefined> | string | null | undefined;\n};\n\nconst isTestEnv = process.env.NODE_ENV === 'test';\n\nconst INITIAL_METRICS =\n  Platform.OS === 'web' || isTestEnv\n    ? {\n        frame: { x: 0, y: 0, width: 0, height: 0 },\n        insets: { top: 0, left: 0, right: 0, bottom: 0 },\n      }\n    : undefined;\n\n/**\n * @hidden\n */\nexport function ExpoRoot({ wrapper: ParentWrapper = Fragment, ...props }: ExpoRootProps) {\n  /*\n   * Due to static rendering we need to wrap these top level views in second wrapper\n   * View's like <SafeAreaProvider /> generate a <div> so if the parent wrapper\n   * is a HTML document, we need to ensure its inside the <body>\n   */\n  const wrapper = ({ children }: PropsWithChildren) => {\n    return (\n      <ParentWrapper>\n        <SafeAreaProvider\n          // SSR support\n          initialMetrics={INITIAL_METRICS}>\n          {/* Users can override this by adding another StatusBar element anywhere higher in the component tree. */}\n          {canOverrideStatusBarBehavior && <AutoStatusBar />}\n          {children}\n        </SafeAreaProvider>\n      </ParentWrapper>\n    );\n  };\n\n  return <ContextNavigator {...props} wrapper={wrapper} />;\n}\n\nfunction AutoStatusBar() {\n  return <StatusBar barStyle={useColorScheme() === 'light' ? 'dark-content' : 'light-content'} />;\n}\n\nconst initialUrl =\n  Platform.OS === 'web' && typeof window !== 'undefined'\n    ? new URL(window.location.href)\n    : undefined;\n\nfunction ContextNavigator({\n  context,\n  location: initialLocation = initialUrl,\n  wrapper: WrapperComponent = Fragment,\n  linking = {},\n}: ExpoRootProps) {\n  // location and linking.getInitialURL are both used to initialize the router state\n  //  - location is used on web and during static rendering\n  //  - linking.getInitialURL is used on native\n  const serverContext = useMemo(() => {\n    let contextType: ServerContextType = {};\n\n    if (initialLocation instanceof URL) {\n      contextType = {\n        location: {\n          pathname: initialLocation.pathname + initialLocation.hash,\n          search: initialLocation.search,\n        },\n      };\n    } else if (typeof initialLocation === 'string') {\n      // The initial location is a string, so we need to parse it into a URL.\n      const url = new URL(initialLocation, 'http://placeholder.base');\n      contextType = {\n        location: {\n          pathname: url.pathname,\n          search: url.search,\n        },\n      };\n    }\n\n    return contextType;\n  }, []);\n\n  /*\n   * The serverUrl is an initial URL used in server rendering environments.\n   * e.g Static renders, units tests, etc\n   */\n  const serverUrl = serverContext.location\n    ? `${serverContext.location.pathname}${serverContext.location.search}`\n    : undefined;\n\n  const store = useInitializeExpoRouter(context, {\n    ...linking,\n    serverUrl,\n  });\n\n  useDomComponentNavigation(store);\n\n  if (store.shouldShowTutorial()) {\n    SplashScreen.hideAsync();\n    if (process.env.NODE_ENV === 'development') {\n      const Tutorial = require('./onboard/Tutorial').Tutorial;\n      return (\n        <WrapperComponent>\n          <Tutorial />\n        </WrapperComponent>\n      );\n    } else {\n      // Ensure tutorial styles are stripped in production.\n      return null;\n    }\n  }\n\n  const Component = store.rootComponent;\n\n  return (\n    <UpstreamNavigationContainer\n      ref={store.navigationRef}\n      initialState={store.initialState}\n      linking={store.linking as LinkingOptions<any>}\n      onUnhandledAction={onUnhandledAction}\n      documentTitle={{\n        enabled: false,\n      }}>\n      <ServerContext.Provider value={serverContext}>\n        <WrapperComponent>\n          <Component />\n        </WrapperComponent>\n      </ServerContext.Provider>\n    </UpstreamNavigationContainer>\n  );\n}\n\nlet onUnhandledAction: (action: NavigationAction) => void;\n\nif (process.env.NODE_ENV !== 'production') {\n  onUnhandledAction = (action: NavigationAction) => {\n    const payload: Record<string, any> | undefined = action.payload;\n\n    let message = `The action '${action.type}'${\n      payload ? ` with payload ${JSON.stringify(action.payload)}` : ''\n    } was not handled by any navigator.`;\n\n    switch (action.type) {\n      case 'NAVIGATE':\n      case 'PUSH':\n      case 'REPLACE':\n      case 'JUMP_TO':\n        if (payload?.name) {\n          message += `\\n\\nDo you have a route named '${payload.name}'?`;\n        } else {\n          message += `\\n\\nYou need to pass the name of the screen to navigate to. This may be a bug.`;\n        }\n\n        break;\n      case 'GO_BACK':\n      case 'POP':\n      case 'POP_TO_TOP':\n        message += `\\n\\nIs there any screen to go back to?`;\n        break;\n      case 'OPEN_DRAWER':\n      case 'CLOSE_DRAWER':\n      case 'TOGGLE_DRAWER':\n        message += `\\n\\nIs your screen inside a Drawer navigator?`;\n        break;\n    }\n\n    message += `\\n\\nThis is a development-only warning and won't be shown in production.`;\n\n    if (process.env.NODE_ENV === 'test') {\n      throw new Error(message);\n    }\n    console.error(message);\n  };\n} else {\n  onUnhandledAction = function () {};\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}