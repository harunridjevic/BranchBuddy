{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getIgnoreList = exports.extrapolateGroups = exports.generateDynamic = exports.getExactRoutes = exports.getRoutes = void 0;\nvar getRoutesCore_1 = require(\"./getRoutesCore\");\nfunction getRoutes(contextModule) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return (0, getRoutesCore_1.getRoutes)(contextModule, _objectSpread({\n    getSystemRoute: function getSystemRoute(_ref) {\n      var route = _ref.route,\n        type = _ref.type;\n      if (route === '' && type === 'layout') {\n        return {\n          type: 'layout',\n          loadRoute: function loadRoute() {\n            return {\n              default: require(\"./views/Navigator\").DefaultNavigator\n            };\n          },\n          contextKey: 'expo-router/build/views/Navigator.js',\n          route: '',\n          generated: true,\n          dynamic: null,\n          children: []\n        };\n      } else if (route === '_sitemap' && type === 'route') {\n        return {\n          loadRoute: function loadRoute() {\n            var _require = require(\"./views/Sitemap\"),\n              Sitemap = _require.Sitemap,\n              getNavOptions = _require.getNavOptions;\n            return {\n              default: Sitemap,\n              getNavOptions: getNavOptions\n            };\n          },\n          route: '_sitemap',\n          type: 'route',\n          contextKey: 'expo-router/build/views/Sitemap.js',\n          generated: true,\n          internal: true,\n          dynamic: null,\n          children: []\n        };\n      } else if (route === '+not-found' && type === 'route') {\n        return {\n          loadRoute: function loadRoute() {\n            return {\n              default: require(\"./views/Unmatched\").Unmatched\n            };\n          },\n          type: 'route',\n          route: '+not-found',\n          contextKey: 'expo-router/build/views/Unmatched.js',\n          generated: true,\n          internal: true,\n          dynamic: [{\n            name: '+not-found',\n            deep: true,\n            notFound: true\n          }],\n          children: []\n        };\n      }\n      throw new Error(`Unknown system route: ${route} and type: ${type}`);\n    }\n  }, options));\n}\nexports.getRoutes = getRoutes;\nfunction getExactRoutes(contextModule) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return getRoutes(contextModule, _objectSpread(_objectSpread({}, options), {}, {\n    skipGenerated: true\n  }));\n}\nexports.getExactRoutes = getExactRoutes;\nvar getRoutesCore_2 = require(\"./getRoutesCore\");\nObject.defineProperty(exports, \"generateDynamic\", {\n  enumerable: true,\n  get: function get() {\n    return getRoutesCore_2.generateDynamic;\n  }\n});\nObject.defineProperty(exports, \"extrapolateGroups\", {\n  enumerable: true,\n  get: function get() {\n    return getRoutesCore_2.extrapolateGroups;\n  }\n});\nObject.defineProperty(exports, \"getIgnoreList\", {\n  enumerable: true,\n  get: function get() {\n    return getRoutesCore_2.getIgnoreList;\n  }\n});","map":{"version":3,"names":["getRoutesCore_1","require","getRoutes","contextModule","options","arguments","length","undefined","_objectSpread","getSystemRoute","_ref","route","type","loadRoute","default","DefaultNavigator","contextKey","generated","dynamic","children","_require","Sitemap","getNavOptions","internal","Unmatched","name","deep","notFound","Error","exports","getExactRoutes","skipGenerated","getRoutesCore_2","Object","defineProperty","enumerable","get","generateDynamic","extrapolateGroups","getIgnoreList"],"sources":["C:\\Users\\R User\\Documents\\software_dev\\BranchBuddy\\node_modules\\expo-router\\src\\getRoutes.ts"],"sourcesContent":["import type { RouteNode } from './Route';\nimport { getRoutes as getRoutesCore, type Options as OptionsCore } from './getRoutesCore';\nimport type { RequireContext } from './types';\n\nexport type Options = Omit<OptionsCore, 'getSystemRoute'>;\n/**\n * Given a Metro context module, return an array of nested routes.\n *\n * This is a two step process:\n *  1. Convert the RequireContext keys (file paths) into a directory tree.\n *      - This should extrapolate array syntax into multiple routes\n *      - Routes are given a specificity score\n *  2. Flatten the directory tree into routes\n *      - Routes in directories without _layout files are hoisted to the nearest _layout\n *      - The name of the route is relative to the nearest _layout\n *      - If multiple routes have the same name, the most specific route is used\n */\nexport function getRoutes(contextModule: RequireContext, options: Options = {}): RouteNode | null {\n  return getRoutesCore(contextModule, {\n    getSystemRoute({ route, type }) {\n      if (route === '' && type === 'layout') {\n        // Root layout when no layout is defined.\n        return {\n          type: 'layout',\n          loadRoute: () => ({\n            default: (require('./views/Navigator') as typeof import('./views/Navigator'))\n              .DefaultNavigator,\n          }),\n          // Generate a fake file name for the directory\n          contextKey: 'expo-router/build/views/Navigator.js',\n          route: '',\n          generated: true,\n          dynamic: null,\n          children: [],\n        };\n      } else if (route === '_sitemap' && type === 'route') {\n        return {\n          loadRoute() {\n            const { Sitemap, getNavOptions } = require('./views/Sitemap');\n            return { default: Sitemap, getNavOptions };\n          },\n          route: '_sitemap',\n          type: 'route',\n          contextKey: 'expo-router/build/views/Sitemap.js',\n          generated: true,\n          internal: true,\n          dynamic: null,\n          children: [],\n        };\n      } else if (route === '+not-found' && type === 'route') {\n        return {\n          loadRoute() {\n            return { default: require('./views/Unmatched').Unmatched };\n          },\n          type: 'route',\n          route: '+not-found',\n          contextKey: 'expo-router/build/views/Unmatched.js',\n          generated: true,\n          internal: true,\n          dynamic: [{ name: '+not-found', deep: true, notFound: true }],\n          children: [],\n        };\n      }\n      throw new Error(`Unknown system route: ${route} and type: ${type}`);\n    },\n    ...options,\n  });\n}\n\nexport function getExactRoutes(\n  contextModule: RequireContext,\n  options: Options = {}\n): RouteNode | null {\n  return getRoutes(contextModule, {\n    ...options,\n    skipGenerated: true,\n  });\n}\n\nexport { generateDynamic, extrapolateGroups, getIgnoreList } from './getRoutesCore';\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}