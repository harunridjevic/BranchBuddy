{"ast":null,"code":"import Anser from 'anser';\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { jsx as _jsx, Fragment as _Fragment } from \"react/jsx-runtime\";\nvar COLORS = {\n  'ansi-black': 'rgb(27, 27, 27)',\n  'ansi-red': 'rgb(187, 86, 83)',\n  'ansi-green': 'rgb(144, 157, 98)',\n  'ansi-yellow': 'rgb(234, 193, 121)',\n  'ansi-blue': 'rgb(125, 169, 199)',\n  'ansi-magenta': 'rgb(176, 101, 151)',\n  'ansi-cyan': 'rgb(140, 220, 216)',\n  'ansi-bright-black': 'rgb(98, 98, 98)',\n  'ansi-bright-red': 'rgb(187, 86, 83)',\n  'ansi-bright-green': 'rgb(144, 157, 98)',\n  'ansi-bright-yellow': 'rgb(234, 193, 121)',\n  'ansi-bright-blue': 'rgb(125, 169, 199)',\n  'ansi-bright-magenta': 'rgb(176, 101, 151)',\n  'ansi-bright-cyan': 'rgb(140, 220, 216)',\n  'ansi-bright-white': 'rgb(247, 247, 247)'\n};\nexport function Ansi(_ref) {\n  var text = _ref.text,\n    style = _ref.style;\n  var commonWhitespaceLength = Infinity;\n  var parsedLines = text.split(/\\n/).map(function (line) {\n    return Anser.ansiToJson(line, {\n      json: true,\n      remove_empty: true,\n      use_classes: true\n    });\n  });\n  parsedLines.map(function (lines) {\n    var _lines$, _lines$$content, _match$;\n    var match = lines[2] && ((_lines$ = lines[2]) == null ? void 0 : (_lines$$content = _lines$.content) == null ? void 0 : _lines$$content.match(/^ +/));\n    var whitespaceLength = match && ((_match$ = match[0]) == null ? void 0 : _match$.length) || 0;\n    if (whitespaceLength < commonWhitespaceLength) {\n      commonWhitespaceLength = whitespaceLength;\n    }\n  });\n  var getText = function getText(content, key) {\n    if (key === 1) {\n      return content.replace(/\\| $/, ' ');\n    } else if (key === 2 && commonWhitespaceLength < Infinity) {\n      return content.substr(commonWhitespaceLength);\n    } else {\n      return content;\n    }\n  };\n  return _jsx(_Fragment, {\n    children: parsedLines.map(function (items, i) {\n      return _jsx(View, {\n        style: styles.line,\n        children: items.map(function (bundle, key) {\n          var textStyle = bundle.fg && COLORS[bundle.fg] ? {\n            backgroundColor: bundle.bg && COLORS[bundle.bg],\n            color: bundle.fg && COLORS[bundle.fg]\n          } : {\n            backgroundColor: bundle.bg && COLORS[bundle.bg]\n          };\n          return _jsx(Text, {\n            style: [style, textStyle],\n            children: getText(bundle.content, key)\n          }, key);\n        })\n      }, i);\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  line: {\n    flexDirection: 'row'\n  }\n});","map":{"version":3,"names":["Anser","React","StyleSheet","Text","View","jsx","_jsx","Fragment","_Fragment","COLORS","Ansi","_ref","text","style","commonWhitespaceLength","Infinity","parsedLines","split","map","line","ansiToJson","json","remove_empty","use_classes","lines","_lines$","_lines$$content","_match$","match","content","whitespaceLength","length","getText","key","replace","substr","children","items","i","styles","bundle","textStyle","fg","backgroundColor","bg","color","create","flexDirection"],"sources":["C:/Users/R User/Documents/software_dev/BranchBuddy/node_modules/@expo/metro-runtime/src/error-overlay/UI/AnsiHighlight.tsx"],"sourcesContent":["/**\n * Copyright (c) 650 Industries.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport Anser from 'anser';\nimport React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport type { StyleProp, TextStyle } from 'react-native';\n\n// Afterglow theme from https://iterm2colorschemes.com/\nconst COLORS: Record<string, string> = {\n  'ansi-black': 'rgb(27, 27, 27)',\n  'ansi-red': 'rgb(187, 86, 83)',\n  'ansi-green': 'rgb(144, 157, 98)',\n  'ansi-yellow': 'rgb(234, 193, 121)',\n  'ansi-blue': 'rgb(125, 169, 199)',\n  'ansi-magenta': 'rgb(176, 101, 151)',\n  'ansi-cyan': 'rgb(140, 220, 216)',\n  // Instead of white, use the default color provided to the component\n  // 'ansi-white': 'rgb(216, 216, 216)',\n  'ansi-bright-black': 'rgb(98, 98, 98)',\n  'ansi-bright-red': 'rgb(187, 86, 83)',\n  'ansi-bright-green': 'rgb(144, 157, 98)',\n  'ansi-bright-yellow': 'rgb(234, 193, 121)',\n  'ansi-bright-blue': 'rgb(125, 169, 199)',\n  'ansi-bright-magenta': 'rgb(176, 101, 151)',\n  'ansi-bright-cyan': 'rgb(140, 220, 216)',\n  'ansi-bright-white': 'rgb(247, 247, 247)',\n};\n\nexport function Ansi({ text, style }: { text: string; style: StyleProp<TextStyle> }) {\n  let commonWhitespaceLength = Infinity;\n  const parsedLines = text.split(/\\n/).map((line) =>\n    Anser.ansiToJson(line, {\n      json: true,\n      remove_empty: true,\n      use_classes: true,\n    })\n  );\n\n  parsedLines.map((lines) => {\n    // The third item on each line includes the whitespace of the source code.\n    // We are looking for the least amount of common whitespace to trim all lines.\n    // Example: Array [\" \", \" 96 |\", \"     text\", ...]\n    const match = lines[2] && lines[2]?.content?.match(/^ +/);\n    const whitespaceLength = (match && match[0]?.length) || 0;\n    if (whitespaceLength < commonWhitespaceLength) {\n      commonWhitespaceLength = whitespaceLength;\n    }\n  });\n\n  const getText = (content: string, key: number) => {\n    if (key === 1) {\n      // Remove the vertical bar after line numbers\n      return content.replace(/\\| $/, ' ');\n    } else if (key === 2 && commonWhitespaceLength < Infinity) {\n      // Remove common whitespace at the beginning of the line\n      return content.substr(commonWhitespaceLength);\n    } else {\n      return content;\n    }\n  };\n\n  return (\n    <>\n      {parsedLines.map((items, i) => (\n        <View style={styles.line} key={i}>\n          {items.map((bundle, key) => {\n            const textStyle =\n              bundle.fg && COLORS[bundle.fg]\n                ? {\n                    backgroundColor: bundle.bg && COLORS[bundle.bg],\n                    color: bundle.fg && COLORS[bundle.fg],\n                  }\n                : {\n                    backgroundColor: bundle.bg && COLORS[bundle.bg],\n                  };\n            return (\n              <Text style={[style, textStyle]} key={key}>\n                {getText(bundle.content, key)}\n              </Text>\n            );\n          })}\n        </View>\n      ))}\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  line: {\n    flexDirection: 'row',\n  },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}