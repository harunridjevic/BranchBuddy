{"ast":null,"code":"import React, { useCallback, useMemo } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { ErrorToast } from \"./ErrorToast\";\nimport * as LogBoxData from \"../Data/LogBoxData\";\nimport { useLogs } from \"../Data/LogContext\";\nimport { useRejectionHandler } from \"../useRejectionHandler\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nexport function ErrorToastContainer() {\n  useRejectionHandler();\n  var _useLogs = useLogs(),\n    logs = _useLogs.logs,\n    isDisabled = _useLogs.isDisabled;\n  if (!logs.length || isDisabled) {\n    return null;\n  }\n  return _jsx(ErrorToastStack, {\n    logs: logs\n  });\n}\nfunction ErrorToastStack(_ref) {\n  var logs = _ref.logs;\n  var onDismissWarns = useCallback(function () {\n    LogBoxData.clearWarnings();\n  }, []);\n  var onDismissErrors = useCallback(function () {\n    LogBoxData.clearErrors();\n  }, []);\n  var setSelectedLog = useCallback(function (index) {\n    LogBoxData.setSelectedLog(index);\n  }, []);\n  function openLog(log) {\n    var index = logs.length - 1;\n    while (index > 0 && logs[index] !== log) {\n      index -= 1;\n    }\n    setSelectedLog(index);\n  }\n  var warnings = useMemo(function () {\n    return logs.filter(function (log) {\n      return log.level === 'warn';\n    });\n  }, [logs]);\n  var errors = useMemo(function () {\n    return logs.filter(function (log) {\n      return log.level === 'error' || log.level === 'fatal';\n    });\n  }, [logs]);\n  return _jsxs(View, {\n    style: styles.list,\n    children: [warnings.length > 0 && _jsx(ErrorToast, {\n      log: warnings[warnings.length - 1],\n      level: \"warn\",\n      totalLogCount: warnings.length,\n      onPressOpen: function onPressOpen() {\n        return openLog(warnings[warnings.length - 1]);\n      },\n      onPressDismiss: onDismissWarns\n    }), errors.length > 0 && _jsx(ErrorToast, {\n      log: errors[errors.length - 1],\n      level: \"error\",\n      totalLogCount: errors.length,\n      onPressOpen: function onPressOpen() {\n        return openLog(errors[errors.length - 1]);\n      },\n      onPressDismiss: onDismissErrors\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  list: {\n    bottom: 6,\n    left: 10,\n    right: 10,\n    maxWidth: 320,\n    position: 'fixed'\n  }\n});\nexport default LogBoxData.withSubscription(ErrorToastContainer);","map":{"version":3,"names":["React","useCallback","useMemo","StyleSheet","View","ErrorToast","LogBoxData","useLogs","useRejectionHandler","jsx","_jsx","jsxs","_jsxs","ErrorToastContainer","_useLogs","logs","isDisabled","length","ErrorToastStack","_ref","onDismissWarns","clearWarnings","onDismissErrors","clearErrors","setSelectedLog","index","openLog","log","warnings","filter","level","errors","style","styles","list","children","totalLogCount","onPressOpen","onPressDismiss","create","bottom","left","right","maxWidth","position","withSubscription"],"sources":["C:/Users/R User/Documents/software_dev/BranchBuddy/node_modules/@expo/metro-runtime/src/error-overlay/toast/ErrorToastContainer.web.tsx"],"sourcesContent":["/**\n * Copyright (c) 650 Industries.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React, { useCallback, useMemo } from 'react';\nimport { StyleSheet, View } from 'react-native';\n\nimport { ErrorToast } from './ErrorToast';\nimport * as LogBoxData from '../Data/LogBoxData';\nimport { LogBoxLog } from '../Data/LogBoxLog';\nimport { useLogs } from '../Data/LogContext';\nimport { useRejectionHandler } from '../useRejectionHandler';\n\nexport function ErrorToastContainer() {\n  useRejectionHandler();\n  const { logs, isDisabled } = useLogs();\n  if (!logs.length || isDisabled) {\n    return null;\n  }\n  return <ErrorToastStack logs={logs} />;\n}\n\nfunction ErrorToastStack({ logs }: { logs: LogBoxLog[] }) {\n  const onDismissWarns = useCallback(() => {\n    LogBoxData.clearWarnings();\n  }, []);\n\n  const onDismissErrors = useCallback(() => {\n    LogBoxData.clearErrors();\n  }, []);\n\n  const setSelectedLog = useCallback((index: number): void => {\n    LogBoxData.setSelectedLog(index);\n  }, []);\n\n  function openLog(log: LogBoxLog) {\n    let index = logs.length - 1;\n\n    // Stop at zero because if we don't find any log, we'll open the first log.\n    while (index > 0 && logs[index] !== log) {\n      index -= 1;\n    }\n    setSelectedLog(index);\n  }\n\n  const warnings = useMemo(() => logs.filter((log) => log.level === 'warn'), [logs]);\n\n  const errors = useMemo(\n    () => logs.filter((log) => log.level === 'error' || log.level === 'fatal'),\n    [logs]\n  );\n\n  return (\n    <View style={styles.list}>\n      {warnings.length > 0 && (\n        <ErrorToast\n          log={warnings[warnings.length - 1]}\n          level=\"warn\"\n          totalLogCount={warnings.length}\n          onPressOpen={() => openLog(warnings[warnings.length - 1])}\n          onPressDismiss={onDismissWarns}\n        />\n      )}\n\n      {errors.length > 0 && (\n        <ErrorToast\n          log={errors[errors.length - 1]}\n          level=\"error\"\n          totalLogCount={errors.length}\n          onPressOpen={() => openLog(errors[errors.length - 1])}\n          onPressDismiss={onDismissErrors}\n        />\n      )}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  list: {\n    bottom: 6,\n    left: 10,\n    right: 10,\n    maxWidth: 320,\n    // @ts-expect-error\n    position: 'fixed',\n  },\n});\n\nexport default LogBoxData.withSubscription(ErrorToastContainer);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}