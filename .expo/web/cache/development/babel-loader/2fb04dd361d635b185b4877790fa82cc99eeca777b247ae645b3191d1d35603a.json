{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useLinkProps = useLinkProps;\nvar _core = require(\"@react-navigation/core\");\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native-web/dist/index\");\nvar _LinkingContext = require(\"./LinkingContext.js\");\nfunction _getRequireWildcardCache(e) {\n  if (\"function\" != typeof WeakMap) return null;\n  var r = new WeakMap(),\n    t = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {\n    return e ? t : r;\n  })(e);\n}\nfunction _interopRequireWildcard(e, r) {\n  if (!r && e && e.__esModule) return e;\n  if (null === e || \"object\" != typeof e && \"function\" != typeof e) return {\n    default: e\n  };\n  var t = _getRequireWildcardCache(r);\n  if (t && t.has(e)) return t.get(e);\n  var n = {\n      __proto__: null\n    },\n    a = Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var u in e) if (\"default\" !== u && {}.hasOwnProperty.call(e, u)) {\n    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;\n    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];\n  }\n  return n.default = e, t && t.set(e, n), n;\n}\nvar _getStateFromParams = function getStateFromParams(params) {\n  if (params != null && params.state) {\n    return params.state;\n  }\n  if (params != null && params.screen) {\n    return {\n      routes: [{\n        name: params.screen,\n        params: params.params,\n        state: params.screen ? _getStateFromParams(params.params) : undefined\n      }]\n    };\n  }\n  return undefined;\n};\nfunction useLinkProps(_ref) {\n  var _options$getPathFromS;\n  var screen = _ref.screen,\n    params = _ref.params,\n    href = _ref.href,\n    action = _ref.action;\n  var root = React.useContext(_core.NavigationContainerRefContext);\n  var navigation = React.useContext(_core.NavigationHelpersContext);\n  var _React$useContext = React.useContext(_LinkingContext.LinkingContext),\n    options = _React$useContext.options;\n  var onPress = function onPress(e) {\n    var _e$currentTarget;\n    var hasModifierKey = e.metaKey || e.altKey || e.ctrlKey || e.shiftKey;\n    var isLeftClick = e.button == null || e.button === 0;\n    var isSelfTarget = [undefined, null, '', 'self'].includes((_e$currentTarget = e.currentTarget) == null ? void 0 : _e$currentTarget.target);\n    var shouldHandle = false;\n    if (_reactNative.Platform.OS !== 'web' || !e) {\n      shouldHandle = true;\n    } else if (!hasModifierKey && isLeftClick && isSelfTarget) {\n      e.preventDefault();\n      shouldHandle = true;\n    }\n    if (shouldHandle) {\n      if (action) {\n        if (navigation) {\n          navigation.dispatch(action);\n        } else if (root) {\n          root.dispatch(action);\n        } else {\n          throw new Error(\"Couldn't find a navigation object. Is your component inside NavigationContainer?\");\n        }\n      } else {\n        navigation == null ? void 0 : navigation.navigate(screen, params);\n      }\n    }\n  };\n  var getPathFromStateHelper = (_options$getPathFromS = options == null ? void 0 : options.getPathFromState) != null ? _options$getPathFromS : _core.getPathFromState;\n  return {\n    href: href != null ? href : _reactNative.Platform.OS === 'web' && screen != null ? getPathFromStateHelper({\n      routes: [{\n        name: screen,\n        params: params,\n        state: _getStateFromParams(params)\n      }]\n    }, options == null ? void 0 : options.config) : undefined,\n    accessibilityRole: 'link',\n    onPress: onPress\n  };\n}","map":{"version":3,"names":["_core","require","React","_interopRequireWildcard","_reactNative","_LinkingContext","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","getStateFromParams","params","state","screen","routes","name","undefined","useLinkProps","_ref","_options$getPathFromS","href","action","root","useContext","NavigationContainerRefContext","navigation","NavigationHelpersContext","_React$useContext","LinkingContext","options","onPress","_e$currentTarget","hasModifierKey","metaKey","altKey","ctrlKey","shiftKey","isLeftClick","button","isSelfTarget","includes","currentTarget","target","shouldHandle","Platform","OS","preventDefault","dispatch","Error","navigate","getPathFromStateHelper","getPathFromState","config","accessibilityRole"],"sources":["C:\\Users\\R User\\Documents\\software_dev\\BranchBuddy\\node_modules\\@react-navigation\\native\\src\\useLinkProps.tsx"],"sourcesContent":["import {\n  getPathFromState,\n  type NavigationAction,\n  NavigationContainerRefContext,\n  NavigationHelpersContext,\n  type NavigatorScreenParams,\n  type ParamListBase,\n} from '@react-navigation/core';\nimport type { NavigationState, PartialState } from '@react-navigation/routers';\nimport * as React from 'react';\nimport { type GestureResponderEvent, Platform } from 'react-native';\n\nimport { LinkingContext } from './LinkingContext';\n\nexport type LinkProps<\n  ParamList extends ReactNavigation.RootParamList,\n  RouteName extends keyof ParamList = keyof ParamList,\n> =\n  | ({\n      href?: string;\n      action?: NavigationAction;\n    } & {\n      [Screen in keyof ParamList]: undefined extends ParamList[Screen]\n        ? { screen: Screen; params?: ParamList[Screen] }\n        : { screen: Screen; params: ParamList[Screen] };\n    }[RouteName])\n  | {\n      href?: string;\n      action: NavigationAction;\n      screen?: undefined;\n      params?: undefined;\n    };\n\nconst getStateFromParams = (\n  params: NavigatorScreenParams<ParamListBase> | undefined\n): PartialState<NavigationState> | NavigationState | undefined => {\n  if (params?.state) {\n    return params.state;\n  }\n\n  if (params?.screen) {\n    return {\n      routes: [\n        {\n          name: params.screen,\n          params: params.params,\n          // @ts-expect-error this is fine ðŸ”¥\n          state: params.screen\n            ? getStateFromParams(\n                params.params as\n                  | NavigatorScreenParams<ParamListBase>\n                  | undefined\n              )\n            : undefined,\n        },\n      ],\n    };\n  }\n\n  return undefined;\n};\n\n/**\n * Hook to get props for an anchor tag so it can work with in page navigation.\n *\n * @param props.screen Name of the screen to navigate to (e.g. `'Feeds'`).\n * @param props.params Params to pass to the screen to navigate to (e.g. `{ sort: 'hot' }`).\n * @param props.href Optional absolute path to use for the href (e.g. `/feeds/hot`).\n * @param props.action Optional action to use for in-page navigation. By default, the path is parsed to an action based on linking config.\n */\nexport function useLinkProps<ParamList extends ReactNavigation.RootParamList>({\n  screen,\n  params,\n  href,\n  action,\n}: LinkProps<ParamList>) {\n  const root = React.useContext(NavigationContainerRefContext);\n  const navigation = React.useContext(NavigationHelpersContext);\n  const { options } = React.useContext(LinkingContext);\n\n  const onPress = (\n    e?: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent\n  ) => {\n    // @ts-expect-error: these properties exist on web, but not in React Native\n    const hasModifierKey = e.metaKey || e.altKey || e.ctrlKey || e.shiftKey; // ignore clicks with modifier keys\n    // @ts-expect-error: these properties exist on web, but not in React Native\n    const isLeftClick = e.button == null || e.button === 0; // only handle left clicks\n    const isSelfTarget = [undefined, null, '', 'self'].includes(\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      e.currentTarget?.target\n    ); // let browser handle \"target=_blank\" etc.\n\n    let shouldHandle = false;\n\n    if (Platform.OS !== 'web' || !e) {\n      shouldHandle = true;\n    } else if (!hasModifierKey && isLeftClick && isSelfTarget) {\n      e.preventDefault();\n      shouldHandle = true;\n    }\n\n    if (shouldHandle) {\n      if (action) {\n        if (navigation) {\n          navigation.dispatch(action);\n        } else if (root) {\n          root.dispatch(action);\n        } else {\n          throw new Error(\n            \"Couldn't find a navigation object. Is your component inside NavigationContainer?\"\n          );\n        }\n      } else {\n        // @ts-expect-error This is already type-checked by the prop types\n        navigation?.navigate(screen, params);\n      }\n    }\n  };\n\n  const getPathFromStateHelper = options?.getPathFromState ?? getPathFromState;\n\n  return {\n    href:\n      href ??\n      (Platform.OS === 'web' && screen != null\n        ? getPathFromStateHelper(\n            {\n              routes: [\n                {\n                  // @ts-expect-error this is fine ðŸ”¥\n                  name: screen,\n                  // @ts-expect-error this is fine ðŸ”¥\n                  params: params,\n                  // @ts-expect-error this is fine ðŸ”¥\n                  state: getStateFromParams(params),\n                },\n              ],\n            },\n            options?.config\n          )\n        : undefined),\n    accessibilityRole: 'link' as const,\n    onPress,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}