{"ast":null,"code":"'use client';\n\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nimport * as React from 'react';\nimport NativeEventEmitter from \"react-native-web/dist/exports/NativeEventEmitter\";\nimport { LogBoxLog } from \"./LogBoxLog\";\nimport { LogContext } from \"./LogContext\";\nimport { parseLogBoxException } from \"./parseLogBoxLog\";\nimport NativeLogBox from \"../modules/NativeLogBox\";\nimport parseErrorStack from \"../modules/parseErrorStack\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nvar observers = new Set();\nvar ignorePatterns = new Set();\nvar logs = new Set();\nvar updateTimeout = null;\nvar _isDisabled = false;\nvar _selectedIndex = -1;\nvar LOGBOX_ERROR_MESSAGE = 'An error was thrown when attempting to render log messages via LogBox.';\nfunction getNextState() {\n  return {\n    logs: logs,\n    isDisabled: _isDisabled,\n    selectedLogIndex: _selectedIndex\n  };\n}\nexport function reportLogBoxError(error, componentStack) {\n  var ExceptionsManager = require(\"../modules/ExceptionsManager\").default;\n  if (componentStack != null) {\n    error.componentStack = componentStack;\n  }\n  ExceptionsManager.handleException(error);\n}\nexport function reportUnexpectedLogBoxError(error, componentStack) {\n  error.message = `${LOGBOX_ERROR_MESSAGE}\\n\\n${error.message}`;\n  return reportLogBoxError(error, componentStack);\n}\nexport function isLogBoxErrorMessage(message) {\n  return typeof message === 'string' && message.includes(LOGBOX_ERROR_MESSAGE);\n}\nexport function isMessageIgnored(message) {\n  for (var pattern of ignorePatterns) {\n    if (pattern instanceof RegExp && pattern.test(message) || typeof pattern === 'string' && message.includes(pattern)) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction setImmediateShim(callback) {\n  if (!global.setImmediate) {\n    return setTimeout(callback, 0);\n  }\n  return global.setImmediate(callback);\n}\nfunction handleUpdate() {\n  if (updateTimeout == null) {\n    updateTimeout = setImmediateShim(function () {\n      updateTimeout = null;\n      var nextState = getNextState();\n      observers.forEach(function (_ref) {\n        var observer = _ref.observer;\n        return observer(nextState);\n      });\n    });\n  }\n}\nfunction appendNewLog(newLog) {\n  if (isMessageIgnored(newLog.message.content)) {\n    return;\n  }\n  var lastLog = Array.from(logs).pop();\n  if (lastLog && lastLog.category === newLog.category) {\n    lastLog.incrementCount();\n    handleUpdate();\n    return;\n  }\n  if (newLog.level === 'fatal') {\n    var OPTIMISTIC_WAIT_TIME = 1000;\n    var _addPendingLog = function addPendingLog() {\n      logs.add(newLog);\n      if (_selectedIndex < 0) {\n        setSelectedLog(logs.size - 1);\n      } else {\n        handleUpdate();\n      }\n      _addPendingLog = null;\n    };\n    var optimisticTimeout = setTimeout(function () {\n      if (_addPendingLog) {\n        _addPendingLog();\n      }\n    }, OPTIMISTIC_WAIT_TIME);\n    newLog.symbolicate('component');\n    newLog.symbolicate('stack', function (status) {\n      if (_addPendingLog && status !== 'PENDING') {\n        _addPendingLog();\n        clearTimeout(optimisticTimeout);\n      } else if (status !== 'PENDING') {\n        handleUpdate();\n      }\n    });\n  } else if (newLog.level === 'syntax') {\n    logs.add(newLog);\n    setSelectedLog(logs.size - 1);\n  } else {\n    logs.add(newLog);\n    handleUpdate();\n  }\n}\nexport function addLog(log) {\n  var errorForStackTrace = new Error();\n  setImmediate(function () {\n    try {\n      var stack = parseErrorStack(errorForStackTrace == null ? void 0 : errorForStackTrace.stack);\n      appendNewLog(new LogBoxLog({\n        level: log.level,\n        message: log.message,\n        isComponentError: false,\n        stack: stack,\n        category: log.category,\n        componentStack: log.componentStack\n      }));\n    } catch (error) {\n      reportUnexpectedLogBoxError(error);\n    }\n  });\n}\nexport function addException(error) {\n  setImmediate(function () {\n    try {\n      appendNewLog(new LogBoxLog(parseLogBoxException(error)));\n    } catch (loggingError) {\n      reportUnexpectedLogBoxError(loggingError);\n    }\n  });\n}\nexport function symbolicateLogNow(type, log) {\n  log.symbolicate(type, function () {\n    handleUpdate();\n  });\n}\nexport function retrySymbolicateLogNow(type, log) {\n  log.retrySymbolicate(type, function () {\n    handleUpdate();\n  });\n}\nexport function symbolicateLogLazy(type, log) {\n  log.symbolicate(type);\n}\nexport function clear() {\n  if (logs.size > 0) {\n    logs = new Set();\n    setSelectedLog(-1);\n  }\n}\nexport function setSelectedLog(proposedNewIndex) {\n  var oldIndex = _selectedIndex;\n  var newIndex = proposedNewIndex;\n  var logArray = Array.from(logs);\n  var index = logArray.length - 1;\n  while (index >= 0) {\n    if (logArray[index].level === 'syntax') {\n      newIndex = index;\n      break;\n    }\n    index -= 1;\n  }\n  _selectedIndex = newIndex;\n  handleUpdate();\n  if (NativeLogBox) {\n    setTimeout(function () {\n      if (oldIndex < 0 && newIndex >= 0) {\n        NativeLogBox.show();\n      } else if (oldIndex >= 0 && newIndex < 0) {\n        NativeLogBox.hide();\n      }\n    }, 0);\n  }\n}\nexport function clearWarnings() {\n  var newLogs = Array.from(logs).filter(function (log) {\n    return log.level !== 'warn';\n  });\n  if (newLogs.length !== logs.size) {\n    logs = new Set(newLogs);\n    setSelectedLog(-1);\n    handleUpdate();\n  }\n}\nexport function clearErrors() {\n  var newLogs = Array.from(logs).filter(function (log) {\n    return log.level !== 'error' && log.level !== 'fatal';\n  });\n  if (newLogs.length !== logs.size) {\n    logs = new Set(newLogs);\n    setSelectedLog(-1);\n  }\n}\nexport function dismiss(log) {\n  if (logs.has(log)) {\n    logs.delete(log);\n    handleUpdate();\n  }\n}\nexport function getIgnorePatterns() {\n  return Array.from(ignorePatterns);\n}\nexport function addIgnorePatterns(patterns) {\n  var existingSize = ignorePatterns.size;\n  patterns.forEach(function (pattern) {\n    if (pattern instanceof RegExp) {\n      for (var existingPattern of ignorePatterns) {\n        if (existingPattern instanceof RegExp && existingPattern.toString() === pattern.toString()) {\n          return;\n        }\n      }\n      ignorePatterns.add(pattern);\n    }\n    ignorePatterns.add(pattern);\n  });\n  if (ignorePatterns.size === existingSize) {\n    return;\n  }\n  logs = new Set(Array.from(logs).filter(function (log) {\n    return !isMessageIgnored(log.message.content);\n  }));\n  handleUpdate();\n}\nexport function setDisabled(value) {\n  if (value === _isDisabled) {\n    return;\n  }\n  _isDisabled = value;\n  handleUpdate();\n}\nexport function isDisabled() {\n  return _isDisabled;\n}\nexport function observe(observer) {\n  var subscription = {\n    observer: observer\n  };\n  observers.add(subscription);\n  observer(getNextState());\n  return {\n    unsubscribe: function unsubscribe() {\n      observers.delete(subscription);\n    }\n  };\n}\nvar emitter = new NativeEventEmitter({\n  addListener: function addListener() {},\n  removeListeners: function removeListeners() {}\n});\nexport function withSubscription(WrappedComponent) {\n  var LogBoxStateSubscription = function (_React$Component) {\n    function LogBoxStateSubscription(props) {\n      var _this;\n      _classCallCheck(this, LogBoxStateSubscription);\n      _this = _callSuper(this, LogBoxStateSubscription, [props]);\n      _this.state = {\n        logs: new Set(),\n        isDisabled: false,\n        hasError: false,\n        selectedLogIndex: -1\n      };\n      _this.retry = function () {\n        return new Promise(function (resolve) {\n          _this.setState({\n            hasError: false\n          }, function () {\n            resolve();\n          });\n        });\n      };\n      _this._handleDismiss = function () {\n        var _this$state = _this.state,\n          selectedLogIndex = _this$state.selectedLogIndex,\n          stateLogs = _this$state.logs;\n        var logsArray = Array.from(stateLogs);\n        if (selectedLogIndex != null) {\n          if (logsArray.length - 1 <= 0) {\n            setSelectedLog(-1);\n          } else if (selectedLogIndex >= logsArray.length - 1) {\n            setSelectedLog(selectedLogIndex - 1);\n          }\n          dismiss(logsArray[selectedLogIndex]);\n        }\n      };\n      _this._handleMinimize = function () {\n        setSelectedLog(-1);\n      };\n      _this._handleSetSelectedLog = function (index) {\n        setSelectedLog(index);\n      };\n      if (process.env.NODE_ENV === 'development') {\n        emitter.addListener('devLoadingView:hide', function () {\n          if (_this.state.hasError) {\n            _this.retry();\n          }\n        });\n      }\n      return _this;\n    }\n    _inherits(LogBoxStateSubscription, _React$Component);\n    return _createClass(LogBoxStateSubscription, [{\n      key: \"componentDidCatch\",\n      value: function componentDidCatch(err, errorInfo) {\n        reportLogBoxError(err, errorInfo.componentStack);\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        return _jsxs(LogContext.Provider, {\n          value: {\n            selectedLogIndex: this.state.selectedLogIndex,\n            isDisabled: this.state.isDisabled,\n            logs: Array.from(this.state.logs)\n          },\n          children: [this.state.hasError ? null : this.props.children, _jsx(WrappedComponent, {})]\n        });\n      }\n    }, {\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        var _this2 = this;\n        this._subscription = observe(function (data) {\n          if (data.selectedLogIndex === -1) return;\n          React.startTransition(function () {\n            _this2.setState(data);\n          });\n        });\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        if (this._subscription != null) {\n          this._subscription.unsubscribe();\n        }\n      }\n    }], [{\n      key: \"getDerivedStateFromError\",\n      value: function getDerivedStateFromError() {\n        return {\n          hasError: true\n        };\n      }\n    }]);\n  }(React.Component);\n  return LogBoxStateSubscription;\n}","map":{"version":3,"names":["_classCallCheck","_createClass","_possibleConstructorReturn","_getPrototypeOf","_inherits","_callSuper","t","o","e","_isNativeReflectConstruct","Reflect","construct","constructor","apply","Boolean","prototype","valueOf","call","React","NativeEventEmitter","LogBoxLog","LogContext","parseLogBoxException","NativeLogBox","parseErrorStack","jsx","_jsx","jsxs","_jsxs","observers","Set","ignorePatterns","logs","updateTimeout","_isDisabled","_selectedIndex","LOGBOX_ERROR_MESSAGE","getNextState","isDisabled","selectedLogIndex","reportLogBoxError","error","componentStack","ExceptionsManager","require","default","handleException","reportUnexpectedLogBoxError","message","isLogBoxErrorMessage","includes","isMessageIgnored","pattern","RegExp","test","setImmediateShim","callback","global","setImmediate","setTimeout","handleUpdate","nextState","forEach","_ref","observer","appendNewLog","newLog","content","lastLog","Array","from","pop","category","incrementCount","level","OPTIMISTIC_WAIT_TIME","addPendingLog","add","setSelectedLog","size","optimisticTimeout","symbolicate","status","clearTimeout","addLog","log","errorForStackTrace","Error","stack","isComponentError","addException","loggingError","symbolicateLogNow","type","retrySymbolicateLogNow","retrySymbolicate","symbolicateLogLazy","clear","proposedNewIndex","oldIndex","newIndex","logArray","index","length","show","hide","clearWarnings","newLogs","filter","clearErrors","dismiss","has","delete","getIgnorePatterns","addIgnorePatterns","patterns","existingSize","existingPattern","toString","setDisabled","value","observe","subscription","unsubscribe","emitter","addListener","removeListeners","withSubscription","WrappedComponent","LogBoxStateSubscription","_React$Component","props","_this","state","hasError","retry","Promise","resolve","setState","_handleDismiss","_this$state","stateLogs","logsArray","_handleMinimize","_handleSetSelectedLog","process","env","NODE_ENV","key","componentDidCatch","err","errorInfo","render","Provider","children","componentDidMount","_this2","_subscription","data","startTransition","componentWillUnmount","getDerivedStateFromError","Component"],"sources":["C:/Users/R User/Documents/software_dev/BranchBuddy/node_modules/@expo/metro-runtime/src/error-overlay/Data/LogBoxData.tsx"],"sourcesContent":["/**\n * Copyright (c) 650 Industries.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use client';\n\nimport * as React from 'react';\nimport { NativeEventEmitter } from 'react-native';\n\nimport { LogBoxLog, StackType } from './LogBoxLog';\nimport type { LogLevel } from './LogBoxLog';\nimport { LogContext } from './LogContext';\nimport { parseLogBoxException } from './parseLogBoxLog';\nimport type { Message, Category, ComponentStack, ExtendedExceptionData } from './parseLogBoxLog';\nimport NativeLogBox from '../modules/NativeLogBox';\nimport parseErrorStack from '../modules/parseErrorStack';\n\nexport type LogBoxLogs = Set<LogBoxLog>;\n\nexport type LogData = {\n  level: LogLevel;\n  message: Message;\n  category: Category;\n  componentStack: ComponentStack;\n};\n\ntype ExtendedError = any;\n\nexport type Observer = (options: {\n  logs: LogBoxLogs;\n  isDisabled: boolean;\n  selectedLogIndex: number;\n}) => void;\n\nexport type IgnorePattern = string | RegExp;\n\nexport type Subscription = {\n  unsubscribe: () => void;\n};\n\nexport type WarningInfo = {\n  finalFormat: string;\n  forceDialogImmediately: boolean;\n  suppressDialog_LEGACY: boolean;\n  suppressCompletely: boolean;\n  monitorEvent: string | null;\n  monitorListVersion: number;\n  monitorSampleRate: number;\n};\n\nexport type WarningFilter = (format: string) => WarningInfo;\n\ntype Props = object;\n\ntype State = {\n  logs: LogBoxLogs;\n  isDisabled: boolean;\n  hasError: boolean;\n  selectedLogIndex: number;\n};\n\nconst observers: Set<{ observer: Observer } & any> = new Set();\nconst ignorePatterns: Set<IgnorePattern> = new Set();\nlet logs: LogBoxLogs = new Set();\nlet updateTimeout: null | ReturnType<typeof setImmediate> | ReturnType<typeof setTimeout> = null;\nlet _isDisabled = false;\nlet _selectedIndex = -1;\n\nconst LOGBOX_ERROR_MESSAGE =\n  'An error was thrown when attempting to render log messages via LogBox.';\n\nfunction getNextState() {\n  return {\n    logs,\n    isDisabled: _isDisabled,\n    selectedLogIndex: _selectedIndex,\n  };\n}\n\nexport function reportLogBoxError(error: ExtendedError, componentStack?: string): void {\n  const ExceptionsManager = require('../modules/ExceptionsManager').default;\n\n  if (componentStack != null) {\n    error.componentStack = componentStack;\n  }\n  ExceptionsManager.handleException(error);\n}\n\nexport function reportUnexpectedLogBoxError(error: ExtendedError, componentStack?: string): void {\n  error.message = `${LOGBOX_ERROR_MESSAGE}\\n\\n${error.message}`;\n  return reportLogBoxError(error, componentStack);\n}\n\nexport function isLogBoxErrorMessage(message: string): boolean {\n  return typeof message === 'string' && message.includes(LOGBOX_ERROR_MESSAGE);\n}\n\nexport function isMessageIgnored(message: string): boolean {\n  for (const pattern of ignorePatterns) {\n    if (\n      (pattern instanceof RegExp && pattern.test(message)) ||\n      (typeof pattern === 'string' && message.includes(pattern))\n    ) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction setImmediateShim(callback: () => void) {\n  if (!global.setImmediate) {\n    return setTimeout(callback, 0);\n  }\n  return global.setImmediate(callback);\n}\n\nfunction handleUpdate(): void {\n  if (updateTimeout == null) {\n    updateTimeout = setImmediateShim(() => {\n      updateTimeout = null;\n      const nextState = getNextState();\n      observers.forEach(({ observer }) => observer(nextState));\n    });\n  }\n}\n\nfunction appendNewLog(newLog: LogBoxLog): void {\n  // Don't want store these logs because they trigger a\n  // state update when we add them to the store.\n  if (isMessageIgnored(newLog.message.content)) {\n    return;\n  }\n\n  // If the next log has the same category as the previous one\n  // then roll it up into the last log in the list by incrementing\n  // the count (similar to how Chrome does it).\n  const lastLog = Array.from(logs).pop();\n  if (lastLog && lastLog.category === newLog.category) {\n    lastLog.incrementCount();\n    handleUpdate();\n    return;\n  }\n\n  if (newLog.level === 'fatal') {\n    // If possible, to avoid jank, we don't want to open the error before\n    // it's symbolicated. To do that, we optimistically wait for\n    // symbolication for up to a second before adding the log.\n    const OPTIMISTIC_WAIT_TIME = 1000;\n\n    let addPendingLog: null | (() => void) = () => {\n      logs.add(newLog);\n      if (_selectedIndex < 0) {\n        setSelectedLog(logs.size - 1);\n      } else {\n        handleUpdate();\n      }\n      addPendingLog = null;\n    };\n\n    const optimisticTimeout = setTimeout(() => {\n      if (addPendingLog) {\n        addPendingLog();\n      }\n    }, OPTIMISTIC_WAIT_TIME);\n\n    // TODO: HANDLE THIS\n    newLog.symbolicate('component');\n\n    newLog.symbolicate('stack', (status) => {\n      if (addPendingLog && status !== 'PENDING') {\n        addPendingLog();\n        clearTimeout(optimisticTimeout);\n      } else if (status !== 'PENDING') {\n        // The log has already been added but we need to trigger a render.\n        handleUpdate();\n      }\n    });\n  } else if (newLog.level === 'syntax') {\n    logs.add(newLog);\n    setSelectedLog(logs.size - 1);\n  } else {\n    logs.add(newLog);\n    handleUpdate();\n  }\n}\n\nexport function addLog(log: LogData): void {\n  const errorForStackTrace = new Error();\n\n  // Parsing logs are expensive so we schedule this\n  // otherwise spammy logs would pause rendering.\n  setImmediate(() => {\n    try {\n      const stack = parseErrorStack(errorForStackTrace?.stack);\n\n      appendNewLog(\n        new LogBoxLog({\n          level: log.level,\n          message: log.message,\n          isComponentError: false,\n          stack,\n          category: log.category,\n          componentStack: log.componentStack,\n        })\n      );\n    } catch (error) {\n      reportUnexpectedLogBoxError(error);\n    }\n  });\n}\n\nexport function addException(error: ExtendedExceptionData): void {\n  // Parsing logs are expensive so we schedule this\n  // otherwise spammy logs would pause rendering.\n  setImmediate(() => {\n    try {\n      appendNewLog(new LogBoxLog(parseLogBoxException(error)));\n    } catch (loggingError) {\n      reportUnexpectedLogBoxError(loggingError);\n    }\n  });\n}\n\nexport function symbolicateLogNow(type: StackType, log: LogBoxLog) {\n  log.symbolicate(type, () => {\n    handleUpdate();\n  });\n}\n\nexport function retrySymbolicateLogNow(type: StackType, log: LogBoxLog) {\n  log.retrySymbolicate(type, () => {\n    handleUpdate();\n  });\n}\n\nexport function symbolicateLogLazy(type: StackType, log: LogBoxLog) {\n  log.symbolicate(type);\n}\n\nexport function clear(): void {\n  if (logs.size > 0) {\n    logs = new Set();\n    setSelectedLog(-1);\n  }\n}\n\nexport function setSelectedLog(proposedNewIndex: number): void {\n  const oldIndex = _selectedIndex;\n  let newIndex = proposedNewIndex;\n\n  const logArray = Array.from(logs);\n  let index = logArray.length - 1;\n  while (index >= 0) {\n    // The latest syntax error is selected and displayed before all other logs.\n    if (logArray[index].level === 'syntax') {\n      newIndex = index;\n      break;\n    }\n    index -= 1;\n  }\n  _selectedIndex = newIndex;\n  handleUpdate();\n  if (NativeLogBox) {\n    setTimeout(() => {\n      if (oldIndex < 0 && newIndex >= 0) {\n        NativeLogBox.show();\n      } else if (oldIndex >= 0 && newIndex < 0) {\n        NativeLogBox.hide();\n      }\n    }, 0);\n  }\n}\n\nexport function clearWarnings(): void {\n  const newLogs = Array.from(logs).filter((log) => log.level !== 'warn');\n  if (newLogs.length !== logs.size) {\n    logs = new Set(newLogs);\n    setSelectedLog(-1);\n    handleUpdate();\n  }\n}\n\nexport function clearErrors(): void {\n  const newLogs = Array.from(logs).filter((log) => log.level !== 'error' && log.level !== 'fatal');\n  if (newLogs.length !== logs.size) {\n    logs = new Set(newLogs);\n    setSelectedLog(-1);\n  }\n}\n\nexport function dismiss(log: LogBoxLog): void {\n  if (logs.has(log)) {\n    logs.delete(log);\n    handleUpdate();\n  }\n}\n\nexport function getIgnorePatterns(): IgnorePattern[] {\n  return Array.from(ignorePatterns);\n}\n\nexport function addIgnorePatterns(patterns: IgnorePattern[]): void {\n  const existingSize = ignorePatterns.size;\n  // The same pattern may be added multiple times, but adding a new pattern\n  // can be expensive so let's find only the ones that are new.\n  patterns.forEach((pattern: IgnorePattern) => {\n    if (pattern instanceof RegExp) {\n      for (const existingPattern of ignorePatterns) {\n        if (\n          existingPattern instanceof RegExp &&\n          existingPattern.toString() === pattern.toString()\n        ) {\n          return;\n        }\n      }\n      ignorePatterns.add(pattern);\n    }\n    ignorePatterns.add(pattern);\n  });\n  if (ignorePatterns.size === existingSize) {\n    return;\n  }\n  // We need to recheck all of the existing logs.\n  // This allows adding an ignore pattern anywhere in the codebase.\n  // Without this, if you ignore a pattern after the a log is created,\n  // then we would keep showing the log.\n  logs = new Set(Array.from(logs).filter((log) => !isMessageIgnored(log.message.content)));\n  handleUpdate();\n}\n\nexport function setDisabled(value: boolean): void {\n  if (value === _isDisabled) {\n    return;\n  }\n  _isDisabled = value;\n  handleUpdate();\n}\n\nexport function isDisabled(): boolean {\n  return _isDisabled;\n}\n\nexport function observe(observer: Observer): Subscription {\n  const subscription = { observer };\n  observers.add(subscription);\n\n  observer(getNextState());\n\n  return {\n    unsubscribe(): void {\n      observers.delete(subscription);\n    },\n  };\n}\n\nconst emitter = new NativeEventEmitter({\n  addListener() {},\n  removeListeners() {},\n});\n\nexport function withSubscription(WrappedComponent: React.FC<object>): React.Component<object> {\n  class LogBoxStateSubscription extends React.Component<React.PropsWithChildren<Props>, State> {\n    static getDerivedStateFromError() {\n      return { hasError: true };\n    }\n\n    constructor(props) {\n      super(props);\n\n      if (process.env.NODE_ENV === 'development') {\n        emitter.addListener('devLoadingView:hide', () => {\n          if (this.state.hasError) {\n            this.retry();\n          }\n        });\n      }\n    }\n\n    componentDidCatch(err: Error, errorInfo: { componentStack: string } & any) {\n      /* $FlowFixMe[class-object-subtyping] added when improving typing for\n       * this parameters */\n      reportLogBoxError(err, errorInfo.componentStack);\n    }\n\n    _subscription?: Subscription;\n\n    state = {\n      logs: new Set<LogBoxLog>(),\n      isDisabled: false,\n      hasError: false,\n      selectedLogIndex: -1,\n    };\n\n    retry = () => {\n      return new Promise<void>((resolve) => {\n        this.setState({ hasError: false }, () => {\n          resolve();\n        });\n      });\n    };\n\n    render() {\n      return (\n        <LogContext.Provider\n          value={{\n            selectedLogIndex: this.state.selectedLogIndex,\n            isDisabled: this.state.isDisabled,\n            logs: Array.from(this.state.logs),\n          }}>\n          {this.state.hasError ? null : this.props.children}\n          <WrappedComponent />\n        </LogContext.Provider>\n      );\n    }\n\n    componentDidMount(): void {\n      this._subscription = observe((data) => {\n        // Ignore the initial empty log\n        if (data.selectedLogIndex === -1) return;\n        React.startTransition(() => {\n          this.setState(data);\n        });\n      });\n    }\n\n    componentWillUnmount(): void {\n      if (this._subscription != null) {\n        this._subscription.unsubscribe();\n      }\n    }\n\n    _handleDismiss = (): void => {\n      // Here we handle the cases when the log is dismissed and it\n      // was either the last log, or when the current index\n      // is now outside the bounds of the log array.\n      const { selectedLogIndex, logs: stateLogs } = this.state;\n      const logsArray = Array.from(stateLogs);\n      if (selectedLogIndex != null) {\n        if (logsArray.length - 1 <= 0) {\n          setSelectedLog(-1);\n        } else if (selectedLogIndex >= logsArray.length - 1) {\n          setSelectedLog(selectedLogIndex - 1);\n        }\n\n        dismiss(logsArray[selectedLogIndex]);\n      }\n    };\n\n    _handleMinimize = (): void => {\n      setSelectedLog(-1);\n    };\n\n    _handleSetSelectedLog = (index: number): void => {\n      setSelectedLog(index);\n    };\n  }\n\n  // @ts-expect-error\n  return LogBoxStateSubscription;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}