{"ast":null,"code":"import React from 'react';\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { LogBoxInspectorSection } from \"./LogBoxInspectorSection\";\nimport { Ansi } from \"../UI/AnsiHighlight\";\nimport { LogBoxButton } from \"../UI/LogBoxButton\";\nimport * as LogBoxStyle from \"../UI/LogBoxStyle\";\nimport { CODE_FONT } from \"../UI/constants\";\nimport { formatProjectFilePath } from \"../formatProjectFilePath\";\nimport openFileInEditor from \"../modules/openFileInEditor\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nexport function LogBoxInspectorCodeFrame(_ref) {\n  var codeFrame = _ref.codeFrame;\n  if (codeFrame == null) {\n    return null;\n  }\n  function getFileName() {\n    return formatProjectFilePath(process.env.EXPO_PROJECT_ROOT, codeFrame == null ? void 0 : codeFrame.fileName);\n  }\n  function getLocation() {\n    var location = codeFrame == null ? void 0 : codeFrame.location;\n    if (location != null) {\n      return ` (${location.row}:${location.column + 1})`;\n    }\n    return null;\n  }\n  return _jsx(LogBoxInspectorSection, {\n    heading: \"Source\",\n    children: _jsxs(View, {\n      style: styles.box,\n      children: [_jsx(View, {\n        style: styles.frame,\n        children: _jsx(ScrollView, {\n          horizontal: true,\n          contentContainerStyle: {\n            flexDirection: 'column'\n          },\n          children: _jsx(Ansi, {\n            style: styles.content,\n            text: codeFrame.content\n          })\n        })\n      }), _jsx(LogBoxButton, {\n        backgroundColor: {\n          default: 'transparent',\n          pressed: LogBoxStyle.getBackgroundDarkColor(1)\n        },\n        style: styles.button,\n        onPress: function onPress() {\n          var _codeFrame$location$r, _codeFrame$location;\n          openFileInEditor(codeFrame.fileName, (_codeFrame$location$r = (_codeFrame$location = codeFrame.location) == null ? void 0 : _codeFrame$location.row) != null ? _codeFrame$location$r : 0);\n        },\n        children: _jsxs(Text, {\n          style: styles.fileText,\n          children: [getFileName(), getLocation()]\n        })\n      })]\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  box: {\n    backgroundColor: LogBoxStyle.getBackgroundColor(),\n    borderWidth: 1,\n    borderColor: '#323232',\n    marginLeft: 10,\n    marginRight: 10,\n    marginTop: 5,\n    borderRadius: 3\n  },\n  frame: {\n    padding: 10,\n    borderBottomColor: LogBoxStyle.getTextColor(0.1),\n    borderBottomWidth: 1\n  },\n  button: {\n    paddingTop: 10,\n    paddingBottom: 10\n  },\n  content: {\n    flexDirection: 'column',\n    color: LogBoxStyle.getTextColor(1),\n    fontSize: 12,\n    includeFontPadding: false,\n    lineHeight: 20,\n    fontFamily: CODE_FONT\n  },\n  fileText: {\n    userSelect: 'none',\n    color: LogBoxStyle.getTextColor(0.5),\n    textAlign: 'center',\n    flex: 1,\n    fontSize: 16,\n    includeFontPadding: false,\n    fontFamily: CODE_FONT\n  }\n});","map":{"version":3,"names":["React","ScrollView","StyleSheet","Text","View","LogBoxInspectorSection","Ansi","LogBoxButton","LogBoxStyle","CODE_FONT","formatProjectFilePath","openFileInEditor","jsx","_jsx","jsxs","_jsxs","LogBoxInspectorCodeFrame","_ref","codeFrame","getFileName","process","env","EXPO_PROJECT_ROOT","fileName","getLocation","location","row","column","heading","children","style","styles","box","frame","horizontal","contentContainerStyle","flexDirection","content","text","backgroundColor","default","pressed","getBackgroundDarkColor","button","onPress","_codeFrame$location$r","_codeFrame$location","fileText","create","getBackgroundColor","borderWidth","borderColor","marginLeft","marginRight","marginTop","borderRadius","padding","borderBottomColor","getTextColor","borderBottomWidth","paddingTop","paddingBottom","color","fontSize","includeFontPadding","lineHeight","fontFamily","userSelect","textAlign","flex"],"sources":["C:/Users/R User/Documents/software_dev/BranchBuddy/node_modules/@expo/metro-runtime/src/error-overlay/overlay/LogBoxInspectorCodeFrame.tsx"],"sourcesContent":["/**\n * Copyright (c) 650 Industries.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport { ScrollView, StyleSheet, Text, View } from 'react-native';\n\nimport { LogBoxInspectorSection } from './LogBoxInspectorSection';\nimport type { CodeFrame } from '../Data/parseLogBoxLog';\nimport { Ansi } from '../UI/AnsiHighlight';\nimport { LogBoxButton } from '../UI/LogBoxButton';\nimport * as LogBoxStyle from '../UI/LogBoxStyle';\nimport { CODE_FONT } from '../UI/constants';\nimport { formatProjectFilePath } from '../formatProjectFilePath';\nimport openFileInEditor from '../modules/openFileInEditor';\n\ndeclare const process: any;\n\nexport function LogBoxInspectorCodeFrame({ codeFrame }: { codeFrame?: CodeFrame }) {\n  if (codeFrame == null) {\n    return null;\n  }\n\n  function getFileName() {\n    return formatProjectFilePath(process.env.EXPO_PROJECT_ROOT, codeFrame?.fileName);\n  }\n\n  function getLocation() {\n    const location = codeFrame?.location;\n    if (location != null) {\n      return ` (${location.row}:${location.column + 1 /* Code frame columns are zero indexed */})`;\n    }\n\n    return null;\n  }\n\n  return (\n    <LogBoxInspectorSection heading=\"Source\">\n      <View style={styles.box}>\n        <View style={styles.frame}>\n          <ScrollView\n            horizontal\n            contentContainerStyle={{\n              flexDirection: 'column',\n            }}>\n            <Ansi style={styles.content} text={codeFrame.content} />\n          </ScrollView>\n        </View>\n        <LogBoxButton\n          backgroundColor={{\n            default: 'transparent',\n            pressed: LogBoxStyle.getBackgroundDarkColor(1),\n          }}\n          style={styles.button}\n          onPress={() => {\n            openFileInEditor(codeFrame.fileName, codeFrame.location?.row ?? 0);\n          }}>\n          <Text style={styles.fileText}>\n            {getFileName()}\n            {getLocation()}\n          </Text>\n        </LogBoxButton>\n      </View>\n    </LogBoxInspectorSection>\n  );\n}\n\nconst styles = StyleSheet.create({\n  box: {\n    backgroundColor: LogBoxStyle.getBackgroundColor(),\n    borderWidth: 1,\n    borderColor: '#323232',\n    marginLeft: 10,\n    marginRight: 10,\n    marginTop: 5,\n    borderRadius: 3,\n  },\n  frame: {\n    padding: 10,\n    borderBottomColor: LogBoxStyle.getTextColor(0.1),\n    borderBottomWidth: 1,\n  },\n  button: {\n    paddingTop: 10,\n    paddingBottom: 10,\n  },\n  content: {\n    flexDirection: 'column',\n    color: LogBoxStyle.getTextColor(1),\n    fontSize: 12,\n    includeFontPadding: false,\n    lineHeight: 20,\n    fontFamily: CODE_FONT,\n  },\n  fileText: {\n    userSelect: 'none',\n    color: LogBoxStyle.getTextColor(0.5),\n    textAlign: 'center',\n    flex: 1,\n    fontSize: 16,\n    includeFontPadding: false,\n    fontFamily: CODE_FONT,\n  },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}