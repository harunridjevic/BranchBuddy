{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nvar _excluded = [\"children\", \"layout\", \"screenOptions\", \"screenLayout\", \"screenListeners\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useNavigationBuilder = useNavigationBuilder;\nvar _routers = require(\"@react-navigation/routers\");\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactIs = require(\"react-is\");\nvar _useLatestCallback = _interopRequireDefault(require(\"use-latest-callback\"));\nvar _deepFreeze = require(\"./deepFreeze.js\");\nvar _Group = require(\"./Group.js\");\nvar _isArrayEqual = require(\"./isArrayEqual.js\");\nvar _isRecordEqual = require(\"./isRecordEqual.js\");\nvar _NavigationHelpersContext = require(\"./NavigationHelpersContext.js\");\nvar _NavigationRouteContext = require(\"./NavigationRouteContext.js\");\nvar _NavigationStateContext = require(\"./NavigationStateContext.js\");\nvar _PreventRemoveProvider = require(\"./PreventRemoveProvider.js\");\nvar _Screen = require(\"./Screen.js\");\nvar _types = require(\"./types.js\");\nvar _useChildListeners = require(\"./useChildListeners.js\");\nvar _useComponent = require(\"./useComponent.js\");\nvar _useCurrentRender = require(\"./useCurrentRender.js\");\nvar _useDescriptors = require(\"./useDescriptors.js\");\nvar _useEventEmitter = require(\"./useEventEmitter.js\");\nvar _useFocusedListenersChildrenAdapter = require(\"./useFocusedListenersChildrenAdapter.js\");\nvar _useFocusEvents = require(\"./useFocusEvents.js\");\nvar _useIsomorphicLayoutEffect = require(\"./useIsomorphicLayoutEffect\");\nvar _useKeyedChildListeners = require(\"./useKeyedChildListeners.js\");\nvar _useLazyValue = require(\"./useLazyValue.js\");\nvar _useNavigationHelpers = require(\"./useNavigationHelpers.js\");\nvar _useOnAction = require(\"./useOnAction.js\");\nvar _useOnGetState = require(\"./useOnGetState.js\");\nvar _useOnRouteFocus = require(\"./useOnRouteFocus.js\");\nvar _useRegisterNavigator = require(\"./useRegisterNavigator.js\");\nvar _useScheduleUpdate = require(\"./useScheduleUpdate.js\");\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nfunction _interopRequireDefault(e) {\n  return e && e.__esModule ? e : {\n    default: e\n  };\n}\nfunction _getRequireWildcardCache(e) {\n  if (\"function\" != typeof WeakMap) return null;\n  var r = new WeakMap(),\n    t = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {\n    return e ? t : r;\n  })(e);\n}\nfunction _interopRequireWildcard(e, r) {\n  if (!r && e && e.__esModule) return e;\n  if (null === e || \"object\" != typeof e && \"function\" != typeof e) return {\n    default: e\n  };\n  var t = _getRequireWildcardCache(r);\n  if (t && t.has(e)) return t.get(e);\n  var n = {\n      __proto__: null\n    },\n    a = Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var u in e) if (\"default\" !== u && {}.hasOwnProperty.call(e, u)) {\n    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;\n    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];\n  }\n  return n.default = e, t && t.set(e, n), n;\n}\n_types.PrivateValueStore;\nvar isValidKey = function isValidKey(key) {\n  return key === undefined || typeof key === 'string' && key !== '';\n};\nvar _getRouteConfigsFromChildren = function getRouteConfigsFromChildren(children, groupKey, groupOptions, groupLayout) {\n  var configs = React.Children.toArray(children).reduce(function (acc, child) {\n    var _child$type, _child$props;\n    if (React.isValidElement(child)) {\n      if (child.type === _Screen.Screen) {\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(`Got an invalid 'navigationKey' prop (${JSON.stringify(child.props.navigationKey)}) for the screen '${child.props.name}'. It must be a non-empty string or 'undefined'.`);\n        }\n        acc.push({\n          keys: [groupKey, child.props.navigationKey],\n          options: groupOptions,\n          layout: groupLayout,\n          props: child.props\n        });\n        return acc;\n      }\n      if (child.type === React.Fragment || child.type === _Group.Group) {\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(`Got an invalid 'navigationKey' prop (${JSON.stringify(child.props.navigationKey)}) for the group. It must be a non-empty string or 'undefined'.`);\n        }\n        acc.push.apply(acc, _toConsumableArray(_getRouteConfigsFromChildren(child.props.children, child.props.navigationKey, child.type !== _Group.Group ? groupOptions : groupOptions != null ? [].concat(_toConsumableArray(groupOptions), [child.props.screenOptions]) : [child.props.screenOptions], typeof child.props.screenLayout === 'function' ? child.props.screenLayout : groupLayout)));\n        return acc;\n      }\n    }\n    throw new Error(`A navigator can only contain 'Screen', 'Group' or 'React.Fragment' as its direct children (found ${React.isValidElement(child) ? `'${typeof child.type === 'string' ? child.type : (_child$type = child.type) == null ? void 0 : _child$type.name}'${child.props != null && typeof child.props === 'object' && 'name' in child.props && (_child$props = child.props) != null && _child$props.name ? ` for the screen '${child.props.name}'` : ''}` : typeof child === 'object' ? JSON.stringify(child) : `'${String(child)}'`}). To render this component in the navigator, pass it in the 'component' prop to 'Screen'.`);\n  }, []);\n  if (process.env.NODE_ENV !== 'production') {\n    configs.forEach(function (config) {\n      var _config$props = config.props,\n        name = _config$props.name,\n        children = _config$props.children,\n        component = _config$props.component,\n        getComponent = _config$props.getComponent;\n      if (typeof name !== 'string' || !name) {\n        throw new Error(`Got an invalid name (${JSON.stringify(name)}) for the screen. It must be a non-empty string.`);\n      }\n      if (children != null || component !== undefined || getComponent !== undefined) {\n        if (children != null && component !== undefined) {\n          throw new Error(`Got both 'component' and 'children' props for the screen '${name}'. You must pass only one of them.`);\n        }\n        if (children != null && getComponent !== undefined) {\n          throw new Error(`Got both 'getComponent' and 'children' props for the screen '${name}'. You must pass only one of them.`);\n        }\n        if (component !== undefined && getComponent !== undefined) {\n          throw new Error(`Got both 'component' and 'getComponent' props for the screen '${name}'. You must pass only one of them.`);\n        }\n        if (children != null && typeof children !== 'function') {\n          throw new Error(`Got an invalid value for 'children' prop for the screen '${name}'. It must be a function returning a React Element.`);\n        }\n        if (component !== undefined && !(0, _reactIs.isValidElementType)(component)) {\n          throw new Error(`Got an invalid value for 'component' prop for the screen '${name}'. It must be a valid React Component.`);\n        }\n        if (getComponent !== undefined && typeof getComponent !== 'function') {\n          throw new Error(`Got an invalid value for 'getComponent' prop for the screen '${name}'. It must be a function returning a React Component.`);\n        }\n        if (typeof component === 'function') {\n          if (component.name === 'component') {\n            console.warn(`Looks like you're passing an inline function for 'component' prop for the screen '${name}' (e.g. component={() => <SomeComponent />}). Passing an inline function will cause the component state to be lost on re-render and cause perf issues since it's re-created every render. You can pass the function as children to 'Screen' instead to achieve the desired behaviour.`);\n          } else if (/^[a-z]/.test(component.name)) {\n            console.warn(`Got a component with the name '${component.name}' for the screen '${name}'. React Components must start with an uppercase letter. If you're passing a regular function and not a component, pass it as children to 'Screen' instead. Otherwise capitalize your component's name.`);\n          }\n        }\n      } else {\n        throw new Error(`Couldn't find a 'component', 'getComponent' or 'children' prop for the screen '${name}'. This can happen if you passed 'undefined'. You likely forgot to export your component from the file it's defined in, or mixed up default import and named import when importing.`);\n      }\n    });\n  }\n  return configs;\n};\nfunction useNavigationBuilder(createRouter, options) {\n  var navigatorKey = (0, _useRegisterNavigator.useRegisterNavigator)();\n  var route = React.useContext(_NavigationRouteContext.NavigationRouteContext);\n  var children = options.children,\n    layout = options.layout,\n    screenOptions = options.screenOptions,\n    screenLayout = options.screenLayout,\n    screenListeners = options.screenListeners,\n    rest = _objectWithoutProperties(options, _excluded);\n  var routeConfigs = _getRouteConfigsFromChildren(children);\n  var router = (0, _useLazyValue.useLazyValue)(function () {\n    if (rest.initialRouteName != null && routeConfigs.every(function (config) {\n      return config.props.name !== rest.initialRouteName;\n    })) {\n      throw new Error(`Couldn't find a screen named '${rest.initialRouteName}' to use as 'initialRouteName'.`);\n    }\n    return createRouter(rest);\n  });\n  var screens = routeConfigs.reduce(function (acc, config) {\n    if (config.props.name in acc) {\n      throw new Error(`A navigator cannot contain multiple 'Screen' components with the same name (found duplicate screen named '${config.props.name}')`);\n    }\n    acc[config.props.name] = config;\n    return acc;\n  }, {});\n  var routeNames = routeConfigs.map(function (config) {\n    return config.props.name;\n  });\n  var routeKeyList = routeNames.reduce(function (acc, curr) {\n    acc[curr] = screens[curr].keys.map(function (key) {\n      return key != null ? key : '';\n    }).join(':');\n    return acc;\n  }, {});\n  var routeParamList = routeNames.reduce(function (acc, curr) {\n    var initialParams = screens[curr].props.initialParams;\n    acc[curr] = initialParams;\n    return acc;\n  }, {});\n  var routeGetIdList = routeNames.reduce(function (acc, curr) {\n    return Object.assign(acc, _defineProperty({}, curr, screens[curr].props.getId));\n  }, {});\n  if (!routeNames.length) {\n    throw new Error(\"Couldn't find any screens for the navigator. Have you defined any screens as its children?\");\n  }\n  var isStateValid = React.useCallback(function (state) {\n    return state.type === undefined || state.type === router.type;\n  }, [router.type]);\n  var isStateInitialized = React.useCallback(function (state) {\n    return state !== undefined && state.stale === false && isStateValid(state);\n  }, [isStateValid]);\n  var _React$useContext = React.useContext(_NavigationStateContext.NavigationStateContext),\n    currentState = _React$useContext.state,\n    getCurrentState = _React$useContext.getState,\n    setCurrentState = _React$useContext.setState,\n    setKey = _React$useContext.setKey,\n    getKey = _React$useContext.getKey,\n    getIsInitial = _React$useContext.getIsInitial;\n  var stateCleanedUp = React.useRef(false);\n  var setState = (0, _useLatestCallback.default)(function (state) {\n    if (stateCleanedUp.current) {\n      return;\n    }\n    setCurrentState(state);\n  });\n  var _React$useMemo = React.useMemo(function () {\n      var _route$params4, _route$params5, _route$params6;\n      var initialRouteParamList = routeNames.reduce(function (acc, curr) {\n        var _route$params, _route$params2, _route$params3;\n        var initialParams = screens[curr].props.initialParams;\n        var initialParamsFromParams = (route == null ? void 0 : (_route$params = route.params) == null ? void 0 : _route$params.state) == null && (route == null ? void 0 : (_route$params2 = route.params) == null ? void 0 : _route$params2.initial) !== false && (route == null ? void 0 : (_route$params3 = route.params) == null ? void 0 : _route$params3.screen) === curr ? route.params.params : undefined;\n        acc[curr] = initialParams !== undefined || initialParamsFromParams !== undefined ? _objectSpread(_objectSpread({}, initialParams), initialParamsFromParams) : undefined;\n        return acc;\n      }, {});\n      if ((currentState === undefined || !isStateValid(currentState)) && (route == null ? void 0 : (_route$params4 = route.params) == null ? void 0 : _route$params4.state) == null && !(typeof (route == null ? void 0 : (_route$params5 = route.params) == null ? void 0 : _route$params5.screen) === 'string' && (route == null ? void 0 : (_route$params6 = route.params) == null ? void 0 : _route$params6.initial) !== false)) {\n        return [router.getInitialState({\n          routeNames: routeNames,\n          routeParamList: initialRouteParamList,\n          routeGetIdList: routeGetIdList\n        }), true];\n      } else {\n        var _route$params7, _route$params8, _route$params9, _stateFromParams;\n        var stateFromParams;\n        if ((route == null ? void 0 : (_route$params7 = route.params) == null ? void 0 : _route$params7.state) != null) {\n          stateFromParams = route.params.state;\n        } else if (typeof (route == null ? void 0 : (_route$params8 = route.params) == null ? void 0 : _route$params8.screen) === 'string' && (route == null ? void 0 : (_route$params9 = route.params) == null ? void 0 : _route$params9.initial) !== false) {\n          stateFromParams = {\n            index: 0,\n            routes: [{\n              name: route.params.screen,\n              params: route.params.params,\n              path: route.params.path\n            }]\n          };\n        }\n        return [router.getRehydratedState((_stateFromParams = stateFromParams) != null ? _stateFromParams : currentState, {\n          routeNames: routeNames,\n          routeParamList: initialRouteParamList,\n          routeGetIdList: routeGetIdList\n        }), false];\n      }\n    }, [currentState, router, isStateValid]),\n    _React$useMemo2 = _slicedToArray(_React$useMemo, 2),\n    initializedState = _React$useMemo2[0],\n    isFirstStateInitialization = _React$useMemo2[1];\n  var previousRouteKeyListRef = React.useRef(routeKeyList);\n  React.useEffect(function () {\n    previousRouteKeyListRef.current = routeKeyList;\n  });\n  var previousRouteKeyList = previousRouteKeyListRef.current;\n  var state = isStateInitialized(currentState) ? currentState : initializedState;\n  var nextState = state;\n  if (!(0, _isArrayEqual.isArrayEqual)(state.routeNames, routeNames) || !(0, _isRecordEqual.isRecordEqual)(routeKeyList, previousRouteKeyList)) {\n    var navigatorStateForNextRouteNamesChange = options.UNSTABLE_getStateForRouteNamesChange == null ? void 0 : options.UNSTABLE_getStateForRouteNamesChange(state);\n    nextState = navigatorStateForNextRouteNamesChange ? router.getRehydratedState(navigatorStateForNextRouteNamesChange, {\n      routeNames: routeNames,\n      routeParamList: routeParamList,\n      routeGetIdList: routeGetIdList\n    }) : router.getStateForRouteNamesChange(state, {\n      routeNames: routeNames,\n      routeParamList: routeParamList,\n      routeGetIdList: routeGetIdList,\n      routeKeyChanges: Object.keys(routeKeyList).filter(function (name) {\n        return name in previousRouteKeyList && routeKeyList[name] !== previousRouteKeyList[name];\n      })\n    });\n  }\n  var previousNestedParamsRef = React.useRef(route == null ? void 0 : route.params);\n  React.useEffect(function () {\n    previousNestedParamsRef.current = route == null ? void 0 : route.params;\n  }, [route == null ? void 0 : route.params]);\n  if (route != null && route.params) {\n    var previousParams = previousNestedParamsRef.current;\n    var action;\n    if (typeof route.params.state === 'object' && route.params.state != null && route.params !== previousParams) {\n      action = _routers.CommonActions.reset(route.params.state);\n    } else if (typeof route.params.screen === 'string' && (route.params.initial === false && isFirstStateInitialization || route.params !== previousParams)) {\n      action = _routers.CommonActions.navigate({\n        name: route.params.screen,\n        params: route.params.params,\n        path: route.params.path\n      });\n    }\n    var updatedState = action ? router.getStateForAction(nextState, action, {\n      routeNames: routeNames,\n      routeParamList: routeParamList,\n      routeGetIdList: routeGetIdList\n    }) : null;\n    nextState = updatedState !== null ? router.getRehydratedState(updatedState, {\n      routeNames: routeNames,\n      routeParamList: routeParamList,\n      routeGetIdList: routeGetIdList\n    }) : nextState;\n  }\n  var shouldUpdate = state !== nextState;\n  (0, _useScheduleUpdate.useScheduleUpdate)(function () {\n    if (shouldUpdate) {\n      setState(nextState);\n    }\n  });\n  state = nextState;\n  React.useEffect(function () {\n    stateCleanedUp.current = false;\n    setKey(navigatorKey);\n    if (!getIsInitial()) {\n      setState(nextState);\n    }\n    return function () {\n      if (getCurrentState() !== undefined && getKey() === navigatorKey) {\n        setCurrentState(undefined);\n        stateCleanedUp.current = true;\n      }\n    };\n  }, []);\n  var stateRef = React.useRef(state);\n  stateRef.current = state;\n  (0, _useIsomorphicLayoutEffect.useIsomorphicLayoutEffect)(function () {\n    stateRef.current = null;\n  });\n  var getState = (0, _useLatestCallback.default)(function () {\n    var currentState = getCurrentState();\n    return (0, _deepFreeze.deepFreeze)(isStateInitialized(currentState) ? currentState : initializedState);\n  });\n  var emitter = (0, _useEventEmitter.useEventEmitter)(function (e) {\n    var _ref;\n    var routeNames = [];\n    var route;\n    if (e.target) {\n      var _route;\n      route = state.routes.find(function (route) {\n        return route.key === e.target;\n      });\n      if ((_route = route) != null && _route.name) {\n        routeNames.push(route.name);\n      }\n    } else {\n      route = state.routes[state.index];\n      routeNames.push.apply(routeNames, _toConsumableArray(Object.keys(screens).filter(function (name) {\n        var _route2;\n        return ((_route2 = route) == null ? void 0 : _route2.name) === name;\n      })));\n    }\n    if (route == null) {\n      return;\n    }\n    var navigation = descriptors[route.key].navigation;\n    var listeners = (_ref = []).concat.apply(_ref, _toConsumableArray([screenListeners].concat(_toConsumableArray(routeNames.map(function (name) {\n      var listeners = screens[name].props.listeners;\n      return listeners;\n    }))).map(function (listeners) {\n      var map = typeof listeners === 'function' ? listeners({\n        route: route,\n        navigation: navigation\n      }) : listeners;\n      return map ? Object.keys(map).filter(function (type) {\n        return type === e.type;\n      }).map(function (type) {\n        return map == null ? void 0 : map[type];\n      }) : undefined;\n    }))).filter(function (cb, i, self) {\n      return cb && self.lastIndexOf(cb) === i;\n    });\n    listeners.forEach(function (listener) {\n      return listener == null ? void 0 : listener(e);\n    });\n  });\n  (0, _useFocusEvents.useFocusEvents)({\n    state: state,\n    emitter: emitter\n  });\n  React.useEffect(function () {\n    emitter.emit({\n      type: 'state',\n      data: {\n        state: state\n      }\n    });\n  }, [emitter, state]);\n  var _ref2 = (0, _useChildListeners.useChildListeners)(),\n    childListeners = _ref2.listeners,\n    addListener = _ref2.addListener;\n  var _ref3 = (0, _useKeyedChildListeners.useKeyedChildListeners)(),\n    keyedListeners = _ref3.keyedListeners,\n    addKeyedListener = _ref3.addKeyedListener;\n  var onAction = (0, _useOnAction.useOnAction)({\n    router: router,\n    getState: getState,\n    setState: setState,\n    key: route == null ? void 0 : route.key,\n    actionListeners: childListeners.action,\n    beforeRemoveListeners: keyedListeners.beforeRemove,\n    routerConfigOptions: {\n      routeNames: routeNames,\n      routeParamList: routeParamList,\n      routeGetIdList: routeGetIdList\n    },\n    emitter: emitter\n  });\n  var onRouteFocus = (0, _useOnRouteFocus.useOnRouteFocus)({\n    router: router,\n    key: route == null ? void 0 : route.key,\n    getState: getState,\n    setState: setState\n  });\n  var navigation = (0, _useNavigationHelpers.useNavigationHelpers)({\n    id: options.id,\n    onAction: onAction,\n    getState: getState,\n    emitter: emitter,\n    router: router,\n    stateRef: stateRef\n  });\n  (0, _useFocusedListenersChildrenAdapter.useFocusedListenersChildrenAdapter)({\n    navigation: navigation,\n    focusedListeners: childListeners.focus\n  });\n  (0, _useOnGetState.useOnGetState)({\n    getState: getState,\n    getStateListeners: keyedListeners.getState\n  });\n  var _ref4 = (0, _useDescriptors.useDescriptors)({\n      state: state,\n      screens: screens,\n      navigation: navigation,\n      screenOptions: screenOptions,\n      screenLayout: screenLayout,\n      onAction: onAction,\n      getState: getState,\n      setState: setState,\n      onRouteFocus: onRouteFocus,\n      addListener: addListener,\n      addKeyedListener: addKeyedListener,\n      router: router,\n      emitter: emitter\n    }),\n    describe = _ref4.describe,\n    descriptors = _ref4.descriptors;\n  (0, _useCurrentRender.useCurrentRender)({\n    state: state,\n    navigation: navigation,\n    descriptors: descriptors\n  });\n  var NavigationContent = (0, _useComponent.useComponent)(function (children) {\n    var element = layout != null ? layout({\n      state: state,\n      descriptors: descriptors,\n      navigation: navigation,\n      children: children\n    }) : children;\n    return (0, _jsxRuntime.jsx)(_NavigationHelpersContext.NavigationHelpersContext.Provider, {\n      value: navigation,\n      children: (0, _jsxRuntime.jsx)(_PreventRemoveProvider.PreventRemoveProvider, {\n        children: element\n      })\n    });\n  });\n  return {\n    state: state,\n    navigation: navigation,\n    describe: describe,\n    descriptors: descriptors,\n    NavigationContent: NavigationContent\n  };\n}","map":{"version":3,"names":["_routers","require","React","_interopRequireWildcard","_reactIs","_useLatestCallback","_interopRequireDefault","_deepFreeze","_Group","_isArrayEqual","_isRecordEqual","_NavigationHelpersContext","_NavigationRouteContext","_NavigationStateContext","_PreventRemoveProvider","_Screen","_types","_useChildListeners","_useComponent","_useCurrentRender","_useDescriptors","_useEventEmitter","_useFocusedListenersChildrenAdapter","_useFocusEvents","_useIsomorphicLayoutEffect","_useKeyedChildListeners","_useLazyValue","_useNavigationHelpers","_useOnAction","_useOnGetState","_useOnRouteFocus","_useRegisterNavigator","_useScheduleUpdate","_jsxRuntime","e","__esModule","default","_getRequireWildcardCache","WeakMap","r","t","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","PrivateValueStore","isValidKey","key","undefined","getRouteConfigsFromChildren","children","groupKey","groupOptions","groupLayout","configs","Children","toArray","reduce","acc","child","_child$type","_child$props","isValidElement","type","Screen","props","navigationKey","Error","JSON","stringify","name","push","keys","options","layout","Fragment","Group","apply","_toConsumableArray","concat","screenOptions","screenLayout","String","process","env","NODE_ENV","forEach","config","_config$props","component","getComponent","isValidElementType","console","warn","test","useNavigationBuilder","createRouter","navigatorKey","useRegisterNavigator","route","useContext","NavigationRouteContext","screenListeners","rest","_objectWithoutProperties","_excluded","routeConfigs","router","useLazyValue","initialRouteName","every","screens","routeNames","map","routeKeyList","curr","join","routeParamList","initialParams","routeGetIdList","assign","_defineProperty","getId","length","isStateValid","useCallback","state","isStateInitialized","stale","_React$useContext","NavigationStateContext","currentState","getCurrentState","getState","setCurrentState","setState","setKey","getKey","getIsInitial","stateCleanedUp","useRef","current","_React$useMemo","useMemo","_route$params4","_route$params5","_route$params6","initialRouteParamList","_route$params","_route$params2","_route$params3","initialParamsFromParams","params","initial","screen","_objectSpread","getInitialState","_route$params7","_route$params8","_route$params9","_stateFromParams","stateFromParams","index","routes","path","getRehydratedState","_React$useMemo2","_slicedToArray","initializedState","isFirstStateInitialization","previousRouteKeyListRef","useEffect","previousRouteKeyList","nextState","isArrayEqual","isRecordEqual","navigatorStateForNextRouteNamesChange","UNSTABLE_getStateForRouteNamesChange","getStateForRouteNamesChange","routeKeyChanges","filter","previousNestedParamsRef","previousParams","action","CommonActions","reset","navigate","updatedState","getStateForAction","shouldUpdate","useScheduleUpdate","stateRef","useIsomorphicLayoutEffect","deepFreeze","emitter","useEventEmitter","_ref","target","_route","find","_route2","navigation","descriptors","listeners","cb","self","lastIndexOf","listener","useFocusEvents","emit","data","_ref2","useChildListeners","childListeners","addListener","_ref3","useKeyedChildListeners","keyedListeners","addKeyedListener","onAction","useOnAction","actionListeners","beforeRemoveListeners","beforeRemove","routerConfigOptions","onRouteFocus","useOnRouteFocus","useNavigationHelpers","id","useFocusedListenersChildrenAdapter","focusedListeners","focus","useOnGetState","getStateListeners","_ref4","useDescriptors","describe","useCurrentRender","NavigationContent","useComponent","element","jsx","NavigationHelpersContext","Provider","value","PreventRemoveProvider"],"sources":["C:\\Users\\R User\\Documents\\software_dev\\BranchBuddy\\node_modules\\@react-navigation\\core\\src\\useNavigationBuilder.tsx"],"sourcesContent":["import {\n  CommonActions,\n  type DefaultRouterOptions,\n  type NavigationAction,\n  type NavigationState,\n  type ParamListBase,\n  type PartialState,\n  type Route,\n  type Router,\n  type RouterConfigOptions,\n  type RouterFactory,\n} from '@react-navigation/routers';\nimport * as React from 'react';\nimport { isValidElementType } from 'react-is';\nimport useLatestCallback from 'use-latest-callback';\n\nimport { deepFreeze } from './deepFreeze';\nimport { Group } from './Group';\nimport { isArrayEqual } from './isArrayEqual';\nimport { isRecordEqual } from './isRecordEqual';\nimport { NavigationHelpersContext } from './NavigationHelpersContext';\nimport { NavigationRouteContext } from './NavigationRouteContext';\nimport { NavigationStateContext } from './NavigationStateContext';\nimport { PreventRemoveProvider } from './PreventRemoveProvider';\nimport { Screen } from './Screen';\nimport {\n  type DefaultNavigatorOptions,\n  type EventMapBase,\n  type EventMapCore,\n  type NavigatorScreenParams,\n  PrivateValueStore,\n  type RouteConfig,\n} from './types';\nimport { useChildListeners } from './useChildListeners';\nimport { useComponent } from './useComponent';\nimport { useCurrentRender } from './useCurrentRender';\nimport { type ScreenConfigWithParent, useDescriptors } from './useDescriptors';\nimport { useEventEmitter } from './useEventEmitter';\nimport { useFocusedListenersChildrenAdapter } from './useFocusedListenersChildrenAdapter';\nimport { useFocusEvents } from './useFocusEvents';\nimport { useIsomorphicLayoutEffect } from './useIsomorphicLayoutEffect';\nimport { useKeyedChildListeners } from './useKeyedChildListeners';\nimport { useLazyValue } from './useLazyValue';\nimport { useNavigationHelpers } from './useNavigationHelpers';\nimport { useOnAction } from './useOnAction';\nimport { useOnGetState } from './useOnGetState';\nimport { useOnRouteFocus } from './useOnRouteFocus';\nimport { useRegisterNavigator } from './useRegisterNavigator';\nimport { useScheduleUpdate } from './useScheduleUpdate';\n\n// This is to make TypeScript compiler happy\nPrivateValueStore;\n\ntype NavigatorRoute = {\n  key: string;\n  params?: NavigatorScreenParams<ParamListBase>;\n};\n\nconst isValidKey = (key: unknown) =>\n  key === undefined || (typeof key === 'string' && key !== '');\n\n/**\n * Extract route config object from React children elements.\n *\n * @param children React Elements to extract the config from.\n */\nconst getRouteConfigsFromChildren = <\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase,\n>(\n  children: React.ReactNode,\n  groupKey?: string,\n  groupOptions?: ScreenConfigWithParent<\n    State,\n    ScreenOptions,\n    EventMap\n  >['options'],\n  groupLayout?: ScreenConfigWithParent<State, ScreenOptions, EventMap>['layout']\n) => {\n  const configs = React.Children.toArray(children).reduce<\n    ScreenConfigWithParent<State, ScreenOptions, EventMap>[]\n  >((acc, child) => {\n    if (React.isValidElement(child)) {\n      if (child.type === Screen) {\n        // We can only extract the config from `Screen` elements\n        // If something else was rendered, it's probably a bug\n\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(\n            `Got an invalid 'navigationKey' prop (${JSON.stringify(\n              child.props.navigationKey\n            )}) for the screen '${\n              child.props.name\n            }'. It must be a non-empty string or 'undefined'.`\n          );\n        }\n\n        acc.push({\n          keys: [groupKey, child.props.navigationKey],\n          options: groupOptions,\n          layout: groupLayout,\n          props: child.props as RouteConfig<\n            ParamListBase,\n            string,\n            State,\n            ScreenOptions,\n            EventMap,\n            unknown\n          >,\n        });\n\n        return acc;\n      }\n\n      if (child.type === React.Fragment || child.type === Group) {\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(\n            `Got an invalid 'navigationKey' prop (${JSON.stringify(\n              child.props.navigationKey\n            )}) for the group. It must be a non-empty string or 'undefined'.`\n          );\n        }\n\n        // When we encounter a fragment or group, we need to dive into its children to extract the configs\n        // This is handy to conditionally define a group of screens\n        acc.push(\n          ...getRouteConfigsFromChildren<State, ScreenOptions, EventMap>(\n            child.props.children,\n            child.props.navigationKey,\n            child.type !== Group\n              ? groupOptions\n              : groupOptions != null\n                ? [...groupOptions, child.props.screenOptions]\n                : [child.props.screenOptions],\n            typeof child.props.screenLayout === 'function'\n              ? child.props.screenLayout\n              : groupLayout\n          )\n        );\n        return acc;\n      }\n    }\n\n    throw new Error(\n      `A navigator can only contain 'Screen', 'Group' or 'React.Fragment' as its direct children (found ${\n        React.isValidElement(child)\n          ? `'${\n              typeof child.type === 'string' ? child.type : child.type?.name\n            }'${\n              child.props != null &&\n              typeof child.props === 'object' &&\n              'name' in child.props &&\n              child.props?.name\n                ? ` for the screen '${child.props.name}'`\n                : ''\n            }`\n          : typeof child === 'object'\n            ? JSON.stringify(child)\n            : `'${String(child)}'`\n      }). To render this component in the navigator, pass it in the 'component' prop to 'Screen'.`\n    );\n  }, []);\n\n  if (process.env.NODE_ENV !== 'production') {\n    configs.forEach((config) => {\n      const { name, children, component, getComponent } = config.props;\n\n      if (typeof name !== 'string' || !name) {\n        throw new Error(\n          `Got an invalid name (${JSON.stringify(\n            name\n          )}) for the screen. It must be a non-empty string.`\n        );\n      }\n\n      if (\n        children != null ||\n        component !== undefined ||\n        getComponent !== undefined\n      ) {\n        if (children != null && component !== undefined) {\n          throw new Error(\n            `Got both 'component' and 'children' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (children != null && getComponent !== undefined) {\n          throw new Error(\n            `Got both 'getComponent' and 'children' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (component !== undefined && getComponent !== undefined) {\n          throw new Error(\n            `Got both 'component' and 'getComponent' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (children != null && typeof children !== 'function') {\n          throw new Error(\n            `Got an invalid value for 'children' prop for the screen '${name}'. It must be a function returning a React Element.`\n          );\n        }\n\n        if (component !== undefined && !isValidElementType(component)) {\n          throw new Error(\n            `Got an invalid value for 'component' prop for the screen '${name}'. It must be a valid React Component.`\n          );\n        }\n\n        if (getComponent !== undefined && typeof getComponent !== 'function') {\n          throw new Error(\n            `Got an invalid value for 'getComponent' prop for the screen '${name}'. It must be a function returning a React Component.`\n          );\n        }\n\n        if (typeof component === 'function') {\n          if (component.name === 'component') {\n            // Inline anonymous functions passed in the `component` prop will have the name of the prop\n            // It's relatively safe to assume that it's not a component since it should also have PascalCase name\n            // We won't catch all scenarios here, but this should catch a good chunk of incorrect use.\n            console.warn(\n              `Looks like you're passing an inline function for 'component' prop for the screen '${name}' (e.g. component={() => <SomeComponent />}). Passing an inline function will cause the component state to be lost on re-render and cause perf issues since it's re-created every render. You can pass the function as children to 'Screen' instead to achieve the desired behaviour.`\n            );\n          } else if (/^[a-z]/.test(component.name)) {\n            console.warn(\n              `Got a component with the name '${component.name}' for the screen '${name}'. React Components must start with an uppercase letter. If you're passing a regular function and not a component, pass it as children to 'Screen' instead. Otherwise capitalize your component's name.`\n            );\n          }\n        }\n      } else {\n        throw new Error(\n          `Couldn't find a 'component', 'getComponent' or 'children' prop for the screen '${name}'. This can happen if you passed 'undefined'. You likely forgot to export your component from the file it's defined in, or mixed up default import and named import when importing.`\n        );\n      }\n    });\n  }\n\n  return configs;\n};\n\n/**\n * Hook for building navigators.\n *\n * @param createRouter Factory method which returns router object.\n * @param options Options object containing `children` and additional options for the router.\n * @returns An object containing `state`, `navigation`, `descriptors` objects.\n */\nexport function useNavigationBuilder<\n  State extends NavigationState,\n  RouterOptions extends DefaultRouterOptions,\n  ActionHelpers extends Record<string, (...args: any) => void>,\n  ScreenOptions extends {},\n  EventMap extends Record<string, any>,\n>(\n  createRouter: RouterFactory<State, any, RouterOptions>,\n  options: DefaultNavigatorOptions<\n    ParamListBase,\n    string | undefined,\n    State,\n    ScreenOptions,\n    EventMap,\n    any\n  > &\n    RouterOptions\n) {\n  const navigatorKey = useRegisterNavigator();\n\n  const route = React.useContext(NavigationRouteContext) as\n    | NavigatorRoute\n    | undefined;\n\n  const {\n    children,\n    layout,\n    screenOptions,\n    screenLayout,\n    screenListeners,\n    ...rest\n  } = options;\n\n  const routeConfigs = getRouteConfigsFromChildren<\n    State,\n    ScreenOptions,\n    EventMap\n  >(children);\n\n  const router = useLazyValue<Router<State, any>>(() => {\n    if (\n      rest.initialRouteName != null &&\n      routeConfigs.every(\n        (config) => config.props.name !== rest.initialRouteName\n      )\n    ) {\n      throw new Error(\n        `Couldn't find a screen named '${rest.initialRouteName}' to use as 'initialRouteName'.`\n      );\n    }\n\n    return createRouter(rest as unknown as RouterOptions);\n  });\n\n  const screens = routeConfigs.reduce<\n    Record<string, ScreenConfigWithParent<State, ScreenOptions, EventMap>>\n  >((acc, config) => {\n    if (config.props.name in acc) {\n      throw new Error(\n        `A navigator cannot contain multiple 'Screen' components with the same name (found duplicate screen named '${config.props.name}')`\n      );\n    }\n\n    acc[config.props.name] = config;\n    return acc;\n  }, {});\n\n  const routeNames = routeConfigs.map((config) => config.props.name);\n  const routeKeyList = routeNames.reduce<Record<string, React.Key | undefined>>(\n    (acc, curr) => {\n      acc[curr] = screens[curr].keys.map((key) => key ?? '').join(':');\n      return acc;\n    },\n    {}\n  );\n  const routeParamList = routeNames.reduce<Record<string, object | undefined>>(\n    (acc, curr) => {\n      const { initialParams } = screens[curr].props;\n      acc[curr] = initialParams;\n      return acc;\n    },\n    {}\n  );\n  const routeGetIdList = routeNames.reduce<\n    RouterConfigOptions['routeGetIdList']\n  >(\n    (acc, curr) =>\n      Object.assign(acc, {\n        [curr]: screens[curr].props.getId,\n      }),\n    {}\n  );\n\n  if (!routeNames.length) {\n    throw new Error(\n      \"Couldn't find any screens for the navigator. Have you defined any screens as its children?\"\n    );\n  }\n\n  const isStateValid = React.useCallback(\n    (state: NavigationState | PartialState<NavigationState>) =>\n      state.type === undefined || state.type === router.type,\n    [router.type]\n  );\n\n  const isStateInitialized = React.useCallback(\n    (state: NavigationState | PartialState<NavigationState> | undefined) =>\n      state !== undefined && state.stale === false && isStateValid(state),\n    [isStateValid]\n  );\n\n  const {\n    state: currentState,\n    getState: getCurrentState,\n    setState: setCurrentState,\n    setKey,\n    getKey,\n    getIsInitial,\n  } = React.useContext(NavigationStateContext);\n\n  const stateCleanedUp = React.useRef(false);\n\n  const setState = useLatestCallback(\n    (state: NavigationState | PartialState<NavigationState> | undefined) => {\n      if (stateCleanedUp.current) {\n        // State might have been already cleaned up due to unmount\n        // We do not want to expose API allowing to override this\n        // This would lead to old data preservation on main navigator unmount\n        return;\n      }\n\n      setCurrentState(state);\n    }\n  );\n\n  const [initializedState, isFirstStateInitialization] = React.useMemo(() => {\n    const initialRouteParamList = routeNames.reduce<\n      Record<string, object | undefined>\n    >((acc, curr) => {\n      const { initialParams } = screens[curr].props;\n      const initialParamsFromParams =\n        route?.params?.state == null &&\n        route?.params?.initial !== false &&\n        route?.params?.screen === curr\n          ? route.params.params\n          : undefined;\n\n      acc[curr] =\n        initialParams !== undefined || initialParamsFromParams !== undefined\n          ? {\n              ...initialParams,\n              ...initialParamsFromParams,\n            }\n          : undefined;\n\n      return acc;\n    }, {});\n\n    // If the current state isn't initialized on first render, we initialize it\n    // We also need to re-initialize it if the state passed from parent was changed (maybe due to reset)\n    // Otherwise assume that the state was provided as initial state\n    // So we need to rehydrate it to make it usable\n    if (\n      (currentState === undefined || !isStateValid(currentState)) &&\n      route?.params?.state == null &&\n      !(\n        typeof route?.params?.screen === 'string' &&\n        route?.params?.initial !== false\n      )\n    ) {\n      return [\n        router.getInitialState({\n          routeNames,\n          routeParamList: initialRouteParamList,\n          routeGetIdList,\n        }),\n        true,\n      ];\n    } else {\n      let stateFromParams;\n\n      if (route?.params?.state != null) {\n        stateFromParams = route.params.state;\n      } else if (\n        typeof route?.params?.screen === 'string' &&\n        route?.params?.initial !== false\n      ) {\n        stateFromParams = {\n          index: 0,\n          routes: [\n            {\n              name: route.params.screen,\n              params: route.params.params,\n              path: route.params.path,\n            },\n          ],\n        };\n      }\n\n      return [\n        router.getRehydratedState(\n          (stateFromParams ?? currentState) as PartialState<State>,\n          {\n            routeNames,\n            routeParamList: initialRouteParamList,\n            routeGetIdList,\n          }\n        ),\n        false,\n      ];\n    }\n    // We explicitly don't include routeNames, route.params etc. in the dep list\n    // below. We want to avoid forcing a new state to be calculated in those cases\n    // Instead, we handle changes to these in the nextState code below. Note\n    // that some changes to routeConfigs are explicitly ignored, such as changes\n    // to initialParams\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentState, router, isStateValid]);\n\n  const previousRouteKeyListRef = React.useRef(routeKeyList);\n\n  React.useEffect(() => {\n    previousRouteKeyListRef.current = routeKeyList;\n  });\n\n  const previousRouteKeyList = previousRouteKeyListRef.current;\n\n  let state =\n    // If the state isn't initialized, or stale, use the state we initialized instead\n    // The state won't update until there's a change needed in the state we have initialized locally\n    // So it'll be `undefined` or stale until the first navigation event happens\n    isStateInitialized(currentState)\n      ? (currentState as State)\n      : (initializedState as State);\n\n  let nextState: State = state;\n\n  if (\n    !isArrayEqual(state.routeNames, routeNames) ||\n    !isRecordEqual(routeKeyList, previousRouteKeyList)\n  ) {\n    const navigatorStateForNextRouteNamesChange =\n      options.UNSTABLE_getStateForRouteNamesChange?.(state);\n    // When the list of route names change, the router should handle it to remove invalid routes\n    nextState = navigatorStateForNextRouteNamesChange\n      ? // @ts-expect-error this is ok\n        router.getRehydratedState(navigatorStateForNextRouteNamesChange, {\n          routeNames,\n          routeParamList,\n          routeGetIdList,\n        })\n      : router.getStateForRouteNamesChange(state, {\n          routeNames,\n          routeParamList,\n          routeGetIdList,\n          routeKeyChanges: Object.keys(routeKeyList).filter(\n            (name) =>\n              name in previousRouteKeyList &&\n              routeKeyList[name] !== previousRouteKeyList[name]\n          ),\n        });\n  }\n\n  const previousNestedParamsRef = React.useRef(route?.params);\n\n  React.useEffect(() => {\n    previousNestedParamsRef.current = route?.params;\n  }, [route?.params]);\n\n  if (route?.params) {\n    const previousParams = previousNestedParamsRef.current;\n\n    let action: CommonActions.Action | undefined;\n\n    if (\n      typeof route.params.state === 'object' &&\n      route.params.state != null &&\n      route.params !== previousParams\n    ) {\n      // If the route was updated with new state, we should reset to it\n      action = CommonActions.reset(route.params.state);\n    } else if (\n      typeof route.params.screen === 'string' &&\n      ((route.params.initial === false && isFirstStateInitialization) ||\n        route.params !== previousParams)\n    ) {\n      // If the route was updated with new screen name and/or params, we should navigate there\n      action = CommonActions.navigate({\n        name: route.params.screen,\n        params: route.params.params,\n        path: route.params.path,\n      });\n    }\n\n    // The update should be limited to current navigator only, so we call the router manually\n    const updatedState = action\n      ? router.getStateForAction(nextState, action, {\n          routeNames,\n          routeParamList,\n          routeGetIdList,\n        })\n      : null;\n\n    nextState =\n      updatedState !== null\n        ? router.getRehydratedState(updatedState, {\n            routeNames,\n            routeParamList,\n            routeGetIdList,\n          })\n        : nextState;\n  }\n\n  const shouldUpdate = state !== nextState;\n\n  useScheduleUpdate(() => {\n    if (shouldUpdate) {\n      // If the state needs to be updated, we'll schedule an update\n      setState(nextState);\n    }\n  });\n\n  // The up-to-date state will come in next render, but we don't need to wait for it\n  // We can't use the outdated state since the screens have changed, which will cause error due to mismatched config\n  // So we override the state object we return to use the latest state as soon as possible\n  state = nextState;\n\n  React.useEffect(() => {\n    // In strict mode, React will double-invoke effects.\n    // So we need to reset the flag if component was not unmounted\n    stateCleanedUp.current = false;\n\n    setKey(navigatorKey);\n\n    if (!getIsInitial()) {\n      // If it's not initial render, we need to update the state\n      // This will make sure that our container gets notifier of state changes due to new mounts\n      // This is necessary for proper screen tracking, URL updates etc.\n      setState(nextState);\n    }\n\n    return () => {\n      // We need to clean up state for this navigator on unmount\n      if (getCurrentState() !== undefined && getKey() === navigatorKey) {\n        setCurrentState(undefined);\n        stateCleanedUp.current = true;\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // In some cases (e.g. route names change), internal state might have changed\n  // But it hasn't been committed yet, so hasn't propagated to the sync external store\n  // During this time, we need to return the internal state in `getState`\n  // Otherwise it can result in inconsistent state during render in children\n  // To avoid this, we use a ref for render phase, and immediately clear it on commit\n  const stateRef = React.useRef<State | null>(state);\n\n  stateRef.current = state;\n\n  useIsomorphicLayoutEffect(() => {\n    stateRef.current = null;\n  });\n\n  const getState = useLatestCallback((): State => {\n    const currentState = getCurrentState();\n\n    return deepFreeze(\n      (isStateInitialized(currentState)\n        ? currentState\n        : initializedState) as State\n    );\n  });\n\n  const emitter = useEventEmitter<EventMapCore<State>>((e) => {\n    const routeNames = [];\n\n    let route: Route<string> | undefined;\n\n    if (e.target) {\n      route = state.routes.find((route) => route.key === e.target);\n\n      if (route?.name) {\n        routeNames.push(route.name);\n      }\n    } else {\n      route = state.routes[state.index];\n      routeNames.push(\n        ...Object.keys(screens).filter((name) => route?.name === name)\n      );\n    }\n\n    if (route == null) {\n      return;\n    }\n\n    const navigation = descriptors[route.key].navigation;\n\n    const listeners = ([] as (((e: any) => void) | undefined)[])\n      .concat(\n        // Get an array of listeners for all screens + common listeners on navigator\n        ...[\n          screenListeners,\n          ...routeNames.map((name) => {\n            const { listeners } = screens[name].props;\n            return listeners;\n          }),\n        ].map((listeners) => {\n          const map =\n            typeof listeners === 'function'\n              ? listeners({ route: route as any, navigation })\n              : listeners;\n\n          return map\n            ? Object.keys(map)\n                .filter((type) => type === e.type)\n                .map((type) => map?.[type])\n            : undefined;\n        })\n      )\n      // We don't want same listener to be called multiple times for same event\n      // So we remove any duplicate functions from the array\n      .filter((cb, i, self) => cb && self.lastIndexOf(cb) === i);\n\n    listeners.forEach((listener) => listener?.(e));\n  });\n\n  useFocusEvents({ state, emitter });\n\n  React.useEffect(() => {\n    emitter.emit({ type: 'state', data: { state } });\n  }, [emitter, state]);\n\n  const { listeners: childListeners, addListener } = useChildListeners();\n\n  const { keyedListeners, addKeyedListener } = useKeyedChildListeners();\n\n  const onAction = useOnAction({\n    router,\n    getState,\n    setState,\n    key: route?.key,\n    actionListeners: childListeners.action,\n    beforeRemoveListeners: keyedListeners.beforeRemove,\n    routerConfigOptions: {\n      routeNames,\n      routeParamList,\n      routeGetIdList,\n    },\n    emitter,\n  });\n\n  const onRouteFocus = useOnRouteFocus({\n    router,\n    key: route?.key,\n    getState,\n    setState,\n  });\n\n  const navigation = useNavigationHelpers<\n    State,\n    ActionHelpers,\n    NavigationAction,\n    EventMap\n  >({\n    id: options.id,\n    onAction,\n    getState,\n    emitter,\n    router,\n    stateRef,\n  });\n\n  useFocusedListenersChildrenAdapter({\n    navigation,\n    focusedListeners: childListeners.focus,\n  });\n\n  useOnGetState({\n    getState,\n    getStateListeners: keyedListeners.getState,\n  });\n\n  const { describe, descriptors } = useDescriptors<\n    State,\n    ActionHelpers,\n    ScreenOptions,\n    EventMap\n  >({\n    state,\n    screens,\n    navigation,\n    screenOptions,\n    screenLayout,\n    onAction,\n    getState,\n    setState,\n    onRouteFocus,\n    addListener,\n    addKeyedListener,\n    router,\n    // @ts-expect-error: this should have both core and custom events, but too much work right now\n    emitter,\n  });\n\n  useCurrentRender({\n    state,\n    navigation,\n    descriptors,\n  });\n\n  const NavigationContent = useComponent((children: React.ReactNode) => {\n    const element =\n      layout != null\n        ? layout({\n            state,\n            descriptors,\n            navigation,\n            children,\n          })\n        : children;\n\n    return (\n      <NavigationHelpersContext.Provider value={navigation}>\n        <PreventRemoveProvider>{element}</PreventRemoveProvider>\n      </NavigationHelpersContext.Provider>\n    );\n  });\n\n  return {\n    state,\n    navigation,\n    describe,\n    descriptors,\n    NavigationContent,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}