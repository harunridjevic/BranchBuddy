{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.router = void 0;\nvar router_store_1 = require(\"./global-state/router-store\");\nexports.router = {\n  navigate: function navigate(href, options) {\n    return router_store_1.store.navigate(href, options);\n  },\n  push: function push(href, options) {\n    return router_store_1.store.push(href, options);\n  },\n  dismiss: function dismiss(count) {\n    return router_store_1.store.dismiss(count);\n  },\n  dismissAll: function dismissAll() {\n    return router_store_1.store.dismissAll();\n  },\n  dismissTo: function dismissTo(href, options) {\n    return router_store_1.store.dismissTo(href, options);\n  },\n  canDismiss: function canDismiss() {\n    return router_store_1.store.canDismiss();\n  },\n  replace: function replace(href, options) {\n    return router_store_1.store.replace(href, options);\n  },\n  back: function back() {\n    return router_store_1.store.goBack();\n  },\n  canGoBack: function canGoBack() {\n    return router_store_1.store.canGoBack();\n  },\n  setParams: function setParams(params) {\n    return router_store_1.store.setParams(params);\n  },\n  reload: function reload() {\n    return router_store_1.store.reload();\n  }\n};","map":{"version":3,"names":["router_store_1","require","exports","router","navigate","href","options","store","push","dismiss","count","dismissAll","dismissTo","canDismiss","replace","back","goBack","canGoBack","setParams","params","reload"],"sources":["C:\\Users\\R User\\Documents\\software_dev\\BranchBuddy\\node_modules\\expo-router\\src\\imperative-api.ts"],"sourcesContent":["import { store } from './global-state/router-store';\nimport { NavigationOptions } from './global-state/routing';\nimport { Href, Route, RouteInputParams } from './types';\n\n/**\n * Returns `router` object for imperative navigation API.\n *\n * @example\n *```tsx\n * import { router } from 'expo-router';\n * import { Text } from 'react-native';\n *\n * export default function Route() {\n *\n *  return (\n *   <Text onPress={() => router.push('/home')}>Go Home</Text>\n *  );\n *}\n * ```\n */\nexport type Router = {\n  /**\n   * Goes back in the navigation history.\n   */\n  back: () => void;\n  /**\n   * Navigates to a route in the navigator's history if it supports invoking the `back` function.\n   */\n  canGoBack: () => boolean;\n  /**\n   * Navigates to the provided [`href`](#href) using a push operation if possible.\n   */\n  push: (href: Href, options?: NavigationOptions) => void;\n  /**\n   * Navigates to the provided [`href`](#href).\n   */\n  navigate: (href: Href, options?: NavigationOptions) => void;\n  /**\n   * Navigates to route without appending to the history. Can be used with\n   * [`useFocusEffect`](#usefocuseffecteffect-do_not_pass_a_second_prop)\n   * to redirect imperatively to a new screen.\n   *\n   * @see [Using `useRouter()` hook](/router/reference/redirects/) to redirect.\n   * */\n  replace: (href: Href, options?: NavigationOptions) => void;\n  /**\n   * Navigates to the a stack lower than the current screen using the provided count if possible, otherwise 1.\n   *\n   * If the current screen is the only route, it will dismiss the entire stack.\n   */\n  dismiss: (count?: number) => void;\n  /**\n   * Dismisses screens until the provided href is reached. If the href is not found, it will instead replace the current screen with the provided href.\n   */\n  dismissTo: (href: Href, options?: NavigationOptions) => void;\n  /**\n   * Returns to the first screen in the closest stack. This is similar to\n   * [popToTop](https://reactnavigation.org/docs/stack-actions/#poptotop) stack action.\n   */\n  dismissAll: () => void;\n  /**\n   * Checks if it is possible to dismiss the current screen. Returns `true` if the\n   * router is within the stack with more than one screen in stack's history.\n   *\n   */\n  canDismiss: () => boolean;\n  /**\n   * Updates the current route's query params.\n   */\n  setParams: <T extends Route>(params: Partial<RouteInputParams<T>>) => void;\n  /**\n   * Reloads the currently mounted route in experimental server mode. This can be used to re-fetch data.\n   * @hidden\n   */\n  reload: () => void;\n};\n\n/**\n * @hidden\n */\nexport const router: Router = {\n  navigate: (href, options) => store.navigate(href, options),\n  push: (href, options) => store.push(href, options),\n  dismiss: (count) => store.dismiss(count),\n  dismissAll: () => store.dismissAll(),\n  dismissTo: (href, options) => store.dismissTo(href, options),\n  canDismiss: () => store.canDismiss(),\n  replace: (href, options) => store.replace(href, options),\n  back: () => store.goBack(),\n  canGoBack: () => store.canGoBack(),\n  setParams: (params) => store.setParams(params),\n  reload: () => store.reload(),\n};\n"],"mappings":";;;;;;AAAA,IAAAA,cAAA,GAAAC,OAAA;AAgFaC,OAAA,CAAAC,MAAM,GAAW;EAC5BC,QAAQ,EAAE,SAAVA,QAAQA,CAAGC,IAAI,EAAEC,OAAO;IAAA,OAAKN,cAAA,CAAAO,KAAK,CAACH,QAAQ,CAACC,IAAI,EAAEC,OAAO,CAAC;EAAA;EAC1DE,IAAI,EAAE,SAANA,IAAIA,CAAGH,IAAI,EAAEC,OAAO;IAAA,OAAKN,cAAA,CAAAO,KAAK,CAACC,IAAI,CAACH,IAAI,EAAEC,OAAO,CAAC;EAAA;EAClDG,OAAO,EAAE,SAATA,OAAOA,CAAGC,KAAK;IAAA,OAAKV,cAAA,CAAAO,KAAK,CAACE,OAAO,CAACC,KAAK,CAAC;EAAA;EACxCC,UAAU,EAAE,SAAZA,UAAUA,CAAA;IAAA,OAAQX,cAAA,CAAAO,KAAK,CAACI,UAAU,EAAE;EAAA;EACpCC,SAAS,EAAE,SAAXA,SAASA,CAAGP,IAAI,EAAEC,OAAO;IAAA,OAAKN,cAAA,CAAAO,KAAK,CAACK,SAAS,CAACP,IAAI,EAAEC,OAAO,CAAC;EAAA;EAC5DO,UAAU,EAAE,SAAZA,UAAUA,CAAA;IAAA,OAAQb,cAAA,CAAAO,KAAK,CAACM,UAAU,EAAE;EAAA;EACpCC,OAAO,EAAE,SAATA,OAAOA,CAAGT,IAAI,EAAEC,OAAO;IAAA,OAAKN,cAAA,CAAAO,KAAK,CAACO,OAAO,CAACT,IAAI,EAAEC,OAAO,CAAC;EAAA;EACxDS,IAAI,EAAE,SAANA,IAAIA,CAAA;IAAA,OAAQf,cAAA,CAAAO,KAAK,CAACS,MAAM,EAAE;EAAA;EAC1BC,SAAS,EAAE,SAAXA,SAASA,CAAA;IAAA,OAAQjB,cAAA,CAAAO,KAAK,CAACU,SAAS,EAAE;EAAA;EAClCC,SAAS,EAAE,SAAXA,SAASA,CAAGC,MAAM;IAAA,OAAKnB,cAAA,CAAAO,KAAK,CAACW,SAAS,CAACC,MAAM,CAAC;EAAA;EAC9CC,MAAM,EAAE,SAARA,MAAMA,CAAA;IAAA,OAAQpB,cAAA,CAAAO,KAAK,CAACa,MAAM,EAAE;EAAA;CAC7B","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}