{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport * as LogBoxSymbolication from \"./LogBoxSymbolication\";\nfunction componentStackToStack(componentStack) {\n  return componentStack.map(function (stack) {\n    var _stack$location$row, _stack$location, _stack$location$colum, _stack$location2;\n    return {\n      file: stack.fileName,\n      methodName: stack.content,\n      lineNumber: (_stack$location$row = (_stack$location = stack.location) == null ? void 0 : _stack$location.row) != null ? _stack$location$row : 0,\n      column: (_stack$location$colum = (_stack$location2 = stack.location) == null ? void 0 : _stack$location2.column) != null ? _stack$location$colum : 0,\n      arguments: []\n    };\n  });\n}\nexport var LogBoxLog = function () {\n  function LogBoxLog(data) {\n    var _data$type, _data$symbolicated;\n    _classCallCheck(this, LogBoxLog);\n    this.symbolicated = {\n      stack: {\n        error: null,\n        stack: null,\n        status: 'NONE'\n      },\n      component: {\n        error: null,\n        stack: null,\n        status: 'NONE'\n      }\n    };\n    this.callbacks = new Map();\n    this.componentStackCache = null;\n    this.level = data.level;\n    this.type = (_data$type = data.type) != null ? _data$type : 'error';\n    this.message = data.message;\n    this.stack = data.stack;\n    this.category = data.category;\n    this.componentStack = data.componentStack;\n    this.codeFrame = data.codeFrame;\n    this.isComponentError = data.isComponentError;\n    this.count = 1;\n    this.symbolicated = (_data$symbolicated = data.symbolicated) != null ? _data$symbolicated : this.symbolicated;\n  }\n  return _createClass(LogBoxLog, [{\n    key: \"incrementCount\",\n    value: function incrementCount() {\n      this.count += 1;\n    }\n  }, {\n    key: \"getAvailableStack\",\n    value: function getAvailableStack(type) {\n      if (this.symbolicated[type].status === 'COMPLETE') {\n        return this.symbolicated[type].stack;\n      }\n      return this.getStack(type);\n    }\n  }, {\n    key: \"flushCallbacks\",\n    value: function flushCallbacks(type) {\n      var callbacks = this.callbacks.get(type);\n      var status = this.symbolicated[type].status;\n      if (callbacks) {\n        for (var callback of callbacks) {\n          callback(status);\n        }\n        callbacks.clear();\n      }\n    }\n  }, {\n    key: \"pushCallback\",\n    value: function pushCallback(type, callback) {\n      var callbacks = this.callbacks.get(type);\n      if (!callbacks) {\n        callbacks = new Set();\n        this.callbacks.set(type, callbacks);\n      }\n      callbacks.add(callback);\n    }\n  }, {\n    key: \"retrySymbolicate\",\n    value: function retrySymbolicate(type, callback) {\n      this._symbolicate(type, true, callback);\n    }\n  }, {\n    key: \"symbolicate\",\n    value: function symbolicate(type, callback) {\n      this._symbolicate(type, false, callback);\n    }\n  }, {\n    key: \"_symbolicate\",\n    value: function _symbolicate(type, retry, callback) {\n      if (callback) {\n        this.pushCallback(type, callback);\n      }\n      var status = this.symbolicated[type].status;\n      if (status === 'COMPLETE') {\n        return this.flushCallbacks(type);\n      }\n      if (retry) {\n        LogBoxSymbolication.deleteStack(this.getStack(type));\n        this.handleSymbolicate(type);\n      } else {\n        if (status === 'NONE') {\n          this.handleSymbolicate(type);\n        }\n      }\n    }\n  }, {\n    key: \"getStack\",\n    value: function getStack(type) {\n      if (type === 'component') {\n        if (this.componentStackCache == null) {\n          this.componentStackCache = componentStackToStack(this.componentStack);\n        }\n        return this.componentStackCache;\n      }\n      return this.stack;\n    }\n  }, {\n    key: \"handleSymbolicate\",\n    value: function handleSymbolicate(type) {\n      var _this$componentStack,\n        _this = this;\n      if (type === 'component' && !((_this$componentStack = this.componentStack) != null && _this$componentStack.length)) {\n        return;\n      }\n      if (this.symbolicated[type].status !== 'PENDING') {\n        this.updateStatus(type, null, null, null);\n        LogBoxSymbolication.symbolicate(ensureStackFilesHaveParams(this.getStack(type))).then(function (data) {\n          _this.updateStatus(type, null, data == null ? void 0 : data.stack, data == null ? void 0 : data.codeFrame);\n        }, function (error) {\n          _this.updateStatus(type, error, null, null);\n        });\n      }\n    }\n  }, {\n    key: \"updateStatus\",\n    value: function updateStatus(type, error, stack, codeFrame) {\n      var lastStatus = this.symbolicated[type].status;\n      if (error != null) {\n        this.symbolicated[type] = {\n          error: error,\n          stack: null,\n          status: 'FAILED'\n        };\n      } else if (stack != null) {\n        if (codeFrame) {\n          this.codeFrame = codeFrame;\n        }\n        this.symbolicated[type] = {\n          error: null,\n          stack: stack,\n          status: 'COMPLETE'\n        };\n      } else {\n        this.symbolicated[type] = {\n          error: null,\n          stack: null,\n          status: 'PENDING'\n        };\n      }\n      var status = this.symbolicated[type].status;\n      if (lastStatus !== status) {\n        if (['COMPLETE', 'FAILED'].includes(status)) {\n          this.flushCallbacks(type);\n        }\n      }\n    }\n  }]);\n}();\nfunction ensureStackFilesHaveParams(stack) {\n  var currentSrc = typeof document !== 'undefined' && document.currentScript ? 'src' in document.currentScript && document.currentScript.src || null : null;\n  var currentParams = currentSrc ? new URLSearchParams(currentSrc) : new URLSearchParams({\n    platform: 'web',\n    dev: String(__DEV__)\n  });\n  return stack.map(function (frame) {\n    var _frame$file;\n    if (!((_frame$file = frame.file) != null && _frame$file.startsWith('http')) || frame.file.includes('&platform=')) return frame;\n    var url = new URL(frame.file);\n    if (url.searchParams.has('platform')) {\n      return frame;\n    }\n    currentParams.forEach(function (value, key) {\n      if (url.searchParams.has(key)) return;\n      url.searchParams.set(key, value);\n    });\n    return _objectSpread(_objectSpread({}, frame), {}, {\n      file: url.toString()\n    });\n  });\n}","map":{"version":3,"names":["LogBoxSymbolication","componentStackToStack","componentStack","map","stack","_stack$location$row","_stack$location","_stack$location$colum","_stack$location2","file","fileName","methodName","content","lineNumber","location","row","column","arguments","LogBoxLog","data","_data$type","_data$symbolicated","_classCallCheck","symbolicated","error","status","component","callbacks","Map","componentStackCache","level","type","message","category","codeFrame","isComponentError","count","_createClass","key","value","incrementCount","getAvailableStack","getStack","flushCallbacks","get","callback","clear","pushCallback","Set","set","add","retrySymbolicate","_symbolicate","symbolicate","retry","deleteStack","handleSymbolicate","_this$componentStack","_this","length","updateStatus","ensureStackFilesHaveParams","then","lastStatus","includes","currentSrc","document","currentScript","src","currentParams","URLSearchParams","platform","dev","String","__DEV__","frame","_frame$file","startsWith","url","URL","searchParams","has","forEach","_objectSpread","toString"],"sources":["C:/Users/R User/Documents/software_dev/BranchBuddy/node_modules/@expo/metro-runtime/src/error-overlay/Data/LogBoxLog.ts"],"sourcesContent":["/**\n * Copyright (c) 650 Industries.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport * as LogBoxSymbolication from './LogBoxSymbolication';\nimport type { Stack } from './LogBoxSymbolication';\nimport type { Category, Message, ComponentStack, CodeFrame } from './parseLogBoxLog';\n\ntype SymbolicationStatus = 'NONE' | 'PENDING' | 'COMPLETE' | 'FAILED';\n\nexport type LogLevel = 'warn' | 'error' | 'fatal' | 'syntax' | 'static';\n\nexport type LogBoxLogData = {\n  level: LogLevel;\n  type?: string;\n  message: Message;\n  stack: Stack;\n  category: string;\n  componentStack: ComponentStack;\n  codeFrame?: CodeFrame;\n  isComponentError: boolean;\n};\n\nexport type StackType = 'stack' | 'component';\n\nfunction componentStackToStack(componentStack: ComponentStack): Stack {\n  return componentStack.map((stack) => ({\n    file: stack.fileName,\n    methodName: stack.content,\n    lineNumber: stack.location?.row ?? 0,\n    column: stack.location?.column ?? 0,\n    arguments: [],\n  }));\n}\n\ntype SymbolicationCallback = (status: SymbolicationStatus) => void;\n\ntype SymbolicationResult =\n  | { error: null; stack: null; status: 'NONE' }\n  | { error: null; stack: null; status: 'PENDING' }\n  | { error: null; stack: Stack; status: 'COMPLETE' }\n  | { error: Error; stack: null; status: 'FAILED' };\n\nexport class LogBoxLog {\n  message: Message;\n  type: string;\n  category: Category;\n  componentStack: ComponentStack;\n  stack: Stack;\n  count: number;\n  level: LogLevel;\n  codeFrame?: CodeFrame;\n  isComponentError: boolean;\n  symbolicated: Record<StackType, SymbolicationResult> = {\n    stack: {\n      error: null,\n      stack: null,\n      status: 'NONE',\n    },\n    component: {\n      error: null,\n      stack: null,\n      status: 'NONE',\n    },\n  };\n\n  private callbacks: Map<StackType, Set<SymbolicationCallback>> = new Map();\n\n  constructor(\n    data: LogBoxLogData & {\n      symbolicated?: Record<StackType, SymbolicationResult>;\n    }\n  ) {\n    this.level = data.level;\n    this.type = data.type ?? 'error';\n    this.message = data.message;\n    this.stack = data.stack;\n    this.category = data.category;\n    this.componentStack = data.componentStack;\n    this.codeFrame = data.codeFrame;\n    this.isComponentError = data.isComponentError;\n    this.count = 1;\n    this.symbolicated = data.symbolicated ?? this.symbolicated;\n  }\n\n  incrementCount(): void {\n    this.count += 1;\n  }\n\n  getAvailableStack(type: StackType): Stack | null {\n    if (this.symbolicated[type].status === 'COMPLETE') {\n      return this.symbolicated[type].stack;\n    }\n    return this.getStack(type);\n  }\n\n  private flushCallbacks(type: StackType): void {\n    const callbacks = this.callbacks.get(type);\n    const status = this.symbolicated[type].status;\n    if (callbacks) {\n      for (const callback of callbacks) {\n        callback(status);\n      }\n      callbacks.clear();\n    }\n  }\n\n  private pushCallback(type: StackType, callback: SymbolicationCallback): void {\n    let callbacks = this.callbacks.get(type);\n    if (!callbacks) {\n      callbacks = new Set();\n      this.callbacks.set(type, callbacks);\n    }\n    callbacks.add(callback);\n  }\n\n  retrySymbolicate(type: StackType, callback?: (status: SymbolicationStatus) => void): void {\n    this._symbolicate(type, true, callback);\n  }\n\n  symbolicate(type: StackType, callback?: (status: SymbolicationStatus) => void): void {\n    this._symbolicate(type, false, callback);\n  }\n\n  private _symbolicate(\n    type: StackType,\n    retry: boolean,\n    callback?: (status: SymbolicationStatus) => void\n  ): void {\n    if (callback) {\n      this.pushCallback(type, callback);\n    }\n    const status = this.symbolicated[type].status;\n\n    if (status === 'COMPLETE') {\n      return this.flushCallbacks(type);\n    }\n\n    if (retry) {\n      LogBoxSymbolication.deleteStack(this.getStack(type));\n      this.handleSymbolicate(type);\n    } else {\n      if (status === 'NONE') {\n        this.handleSymbolicate(type);\n      }\n    }\n  }\n\n  private componentStackCache: Stack | null = null;\n\n  private getStack(type: StackType): Stack {\n    if (type === 'component') {\n      if (this.componentStackCache == null) {\n        this.componentStackCache = componentStackToStack(this.componentStack);\n      }\n      return this.componentStackCache;\n    }\n    return this.stack;\n  }\n\n  private handleSymbolicate(type: StackType): void {\n    if (type === 'component' && !this.componentStack?.length) {\n      return;\n    }\n\n    if (this.symbolicated[type].status !== 'PENDING') {\n      this.updateStatus(type, null, null, null);\n      LogBoxSymbolication.symbolicate(ensureStackFilesHaveParams(this.getStack(type))).then(\n        (data) => {\n          this.updateStatus(type, null, data?.stack, data?.codeFrame);\n        },\n        (error) => {\n          this.updateStatus(type, error, null, null);\n        }\n      );\n    }\n  }\n\n  private updateStatus(\n    type: StackType,\n    error?: Error | null,\n    stack?: Stack | null,\n    codeFrame?: CodeFrame | null\n  ): void {\n    const lastStatus = this.symbolicated[type].status;\n    if (error != null) {\n      this.symbolicated[type] = {\n        error,\n        stack: null,\n        status: 'FAILED',\n      };\n    } else if (stack != null) {\n      if (codeFrame) {\n        this.codeFrame = codeFrame;\n      }\n\n      this.symbolicated[type] = {\n        error: null,\n        stack,\n        status: 'COMPLETE',\n      };\n    } else {\n      this.symbolicated[type] = {\n        error: null,\n        stack: null,\n        status: 'PENDING',\n      };\n    }\n\n    const status = this.symbolicated[type].status;\n    if (lastStatus !== status) {\n      if (['COMPLETE', 'FAILED'].includes(status)) {\n        this.flushCallbacks(type);\n      }\n    }\n  }\n}\n\n// Sometime the web stacks don't have correct query params, this can lead to Metro errors when it attempts to resolve without a platform.\n// This will attempt to reconcile the issue by adding the current query params to the stack frames if they exist, or fallback to some common defaults.\nfunction ensureStackFilesHaveParams(stack: Stack): Stack {\n  const currentSrc =\n    typeof document !== 'undefined' && document.currentScript\n      ? ('src' in document.currentScript && document.currentScript.src) || null\n      : null;\n\n  const currentParams = currentSrc\n    ? new URLSearchParams(currentSrc)\n    : new URLSearchParams({\n        platform: 'web',\n        dev: String(__DEV__),\n      });\n\n  return stack.map((frame) => {\n    if (\n      !frame.file?.startsWith('http') ||\n      // Account for Metro malformed URLs\n      frame.file.includes('&platform=')\n    )\n      return frame;\n\n    const url = new URL(frame.file);\n    if (url.searchParams.has('platform')) {\n      return frame;\n    }\n\n    currentParams.forEach((value, key) => {\n      if (url.searchParams.has(key)) return;\n      url.searchParams.set(key, value);\n    });\n\n    return { ...frame, file: url.toString() };\n  });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}