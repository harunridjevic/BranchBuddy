{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React from 'react';\nimport { LogBoxLog } from \"./LogBoxLog\";\nexport var LogContext = React.createContext(null);\nexport function useLogs() {\n  var logs = React.useContext(LogContext);\n  if (!logs) {\n    if (process.env.EXPO_OS === 'web' && typeof window !== 'undefined') {\n      var expoCliStaticErrorElement = document.getElementById('_expo-static-error');\n      if (expoCliStaticErrorElement != null && expoCliStaticErrorElement.textContent) {\n        var raw = JSON.parse(expoCliStaticErrorElement.textContent);\n        return _objectSpread(_objectSpread({}, raw), {}, {\n          logs: raw.logs.map(function (raw) {\n            return new LogBoxLog(raw);\n          })\n        });\n      }\n    }\n    throw new Error('useLogs must be used within a LogProvider');\n  }\n  return logs;\n}\nexport function useSelectedLog() {\n  var _useLogs = useLogs(),\n    selectedLogIndex = _useLogs.selectedLogIndex,\n    logs = _useLogs.logs;\n  return logs[selectedLogIndex];\n}","map":{"version":3,"names":["React","LogBoxLog","LogContext","createContext","useLogs","logs","useContext","process","env","EXPO_OS","window","expoCliStaticErrorElement","document","getElementById","textContent","raw","JSON","parse","_objectSpread","map","Error","useSelectedLog","_useLogs","selectedLogIndex"],"sources":["C:/Users/R User/Documents/software_dev/BranchBuddy/node_modules/@expo/metro-runtime/src/error-overlay/Data/LogContext.tsx"],"sourcesContent":["import React from 'react';\n\nimport { LogBoxLog } from './LogBoxLog';\n\n// Context provider for Array<LogBoxLog>\n\nexport const LogContext = React.createContext<{\n  selectedLogIndex: number;\n  isDisabled: boolean;\n  logs: LogBoxLog[];\n} | null>(null);\n\nexport function useLogs(): {\n  selectedLogIndex: number;\n  isDisabled: boolean;\n  logs: LogBoxLog[];\n} {\n  const logs = React.useContext(LogContext);\n  if (!logs) {\n    if (process.env.EXPO_OS === 'web' && typeof window !== 'undefined') {\n      // Logbox data that is pre-fetched on the dev server and rendered here.\n      const expoCliStaticErrorElement = document.getElementById('_expo-static-error');\n      if (expoCliStaticErrorElement?.textContent) {\n        const raw = JSON.parse(expoCliStaticErrorElement.textContent);\n        return {\n          ...raw,\n          logs: raw.logs.map((raw: any) => new LogBoxLog(raw)),\n        };\n      }\n    }\n\n    throw new Error('useLogs must be used within a LogProvider');\n  }\n  return logs;\n}\n\nexport function useSelectedLog() {\n  const { selectedLogIndex, logs } = useLogs();\n  return logs[selectedLogIndex];\n}\n"],"mappings":";;;AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,SAASC,SAAS;AAIlB,OAAO,IAAMC,UAAU,GAAGF,KAAK,CAACG,aAAa,CAInC,IAAI,CAAC;AAEf,OAAO,SAASC,OAAOA,CAAA,EAIrB;EACA,IAAMC,IAAI,GAAGL,KAAK,CAACM,UAAU,CAACJ,UAAU,CAAC;EACzC,IAAI,CAACG,IAAI,EAAE;IACT,IAAIE,OAAO,CAACC,GAAG,CAACC,OAAO,KAAK,KAAK,IAAI,OAAOC,MAAM,KAAK,WAAW,EAAE;MAElE,IAAMC,yBAAyB,GAAGC,QAAQ,CAACC,cAAc,CAAC,oBAAoB,CAAC;MAC/E,IAAIF,yBAAyB,YAAzBA,yBAAyB,CAAEG,WAAW,EAAE;QAC1C,IAAMC,GAAG,GAAGC,IAAI,CAACC,KAAK,CAACN,yBAAyB,CAACG,WAAW,CAAC;QAC7D,OAAAI,aAAA,CAAAA,aAAA,KACKH,GAAG;UACNV,IAAI,EAAEU,GAAG,CAACV,IAAI,CAACc,GAAG,CAAC,UAACJ,GAAQ;YAAA,OAAK,IAAId,SAAS,CAACc,GAAG,CAAC;UAAA;QAAC;MAExD;IACF;IAEA,MAAM,IAAIK,KAAK,CAAC,2CAA2C,CAAC;EAC9D;EACA,OAAOf,IAAI;AACb;AAEA,OAAO,SAASgB,cAAcA,CAAA,EAAG;EAC/B,IAAAC,QAAA,GAAmClB,OAAO,CAAC,CAAC;IAApCmB,gBAAgB,GAAAD,QAAA,CAAhBC,gBAAgB;IAAElB,IAAI,GAAAiB,QAAA,CAAJjB,IAAI;EAC9B,OAAOA,IAAI,CAACkB,gBAAgB,CAAC;AAC/B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}