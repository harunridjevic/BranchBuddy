{"ast":null,"code":"import { MetroServerError } from \"./errors\";\nimport { fetchAsync } from \"./fetchAsync\";\nexport function fetchThenEvalAsync(url) {\n  return fetchAsync(url).then(function (_ref) {\n    var body = _ref.body,\n      status = _ref.status,\n      headers = _ref.headers;\n    if ((headers == null ? void 0 : headers.has == null ? void 0 : headers.has('Content-Type')) != null && headers.get('Content-Type').includes('application/json')) {\n      throw new Error(JSON.parse(body).message || `Unknown error fetching '${url}'`);\n    }\n    if (status === 200) {\n      return eval(body);\n    } else {\n      if (process.env.NODE_ENV === 'development') {\n        var error = jsonParseOptional(body);\n        if (error) {\n          throw new MetroServerError(error, url);\n        }\n      }\n      throw new Error(`Failed to load split bundle from URL: ${url}\\n${body}`);\n    }\n  });\n}\nfunction jsonParseOptional(json) {\n  try {\n    return JSON.parse(json);\n  } catch (_unused) {\n    return null;\n  }\n}","map":{"version":3,"names":["MetroServerError","fetchAsync","fetchThenEvalAsync","url","then","_ref","body","status","headers","has","get","includes","Error","JSON","parse","message","eval","process","env","NODE_ENV","error","jsonParseOptional","json","_unused"],"sources":["C:/Users/R User/Documents/software_dev/BranchBuddy/node_modules/@expo/metro-runtime/src/async-require/fetchThenEvalJs.ts"],"sourcesContent":["/**\n * Copyright Â© 2022 650 Industries.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { MetroServerError } from './errors';\nimport { fetchAsync } from './fetchAsync';\n/**\n * Load a bundle for a URL using fetch + eval on native and script tag injection on web.\n *\n * @param url Given a statement like `import('./Bacon')` `bundlePath` would be `Bacon`.\n */\nexport function fetchThenEvalAsync(url: string): Promise<void> {\n  return fetchAsync(url).then(({ body, status, headers }) => {\n    if (\n      headers?.has?.('Content-Type') != null &&\n      headers.get('Content-Type')!.includes('application/json')\n    ) {\n      // Errors are returned as JSON.\n      throw new Error(JSON.parse(body).message || `Unknown error fetching '${url}'`);\n    }\n\n    if (status === 200) {\n      // eslint-disable-next-line no-eval\n      return eval(body);\n    } else {\n      // Format Metro errors if possible.\n      if (process.env.NODE_ENV === 'development') {\n        // body can be an error from Metro if a module is missing.\n        // {\"originModulePath\":\"/Users/evanbacon/Documents/GitHub/expo/.\",\"targetModuleName\":\"./http://localhost:8081/node_modules/react-native/index.js\",\"message\":\"...\"}\n        const error = jsonParseOptional(body);\n        if (error) {\n          // TODO: This is essentially like the Metro native red box errors. We should do a better job formatting them so\n          // the user experience doesn't feel bad. This can be tested by loading a split bundle that results in a missing module error from Metro.\n          throw new MetroServerError(error, url);\n        }\n      }\n\n      throw new Error(`Failed to load split bundle from URL: ${url}\\n${body}`);\n    }\n  });\n}\n\nfunction jsonParseOptional(json: string): any {\n  try {\n    return JSON.parse(json);\n  } catch {\n    return null;\n  }\n}\n"],"mappings":"AAMA,SAASA,gBAAgB;AACzB,SAASC,UAAU;AAMnB,OAAO,SAASC,kBAAkBA,CAACC,GAAW,EAAiB;EAC7D,OAAOF,UAAU,CAACE,GAAG,CAAC,CAACC,IAAI,CAAC,UAAAC,IAAA,EAA+B;IAAA,IAA5BC,IAAI,GAAAD,IAAA,CAAJC,IAAI;MAAEC,MAAM,GAAAF,IAAA,CAANE,MAAM;MAAEC,OAAO,GAAAH,IAAA,CAAPG,OAAO;IAClD,IACE,CAAAA,OAAO,oBAAPA,OAAO,CAAEC,GAAG,oBAAZD,OAAO,CAAEC,GAAG,CAAG,cAAc,CAAC,KAAI,IAAI,IACtCD,OAAO,CAACE,GAAG,CAAC,cAAc,CAAC,CAAEC,QAAQ,CAAC,kBAAkB,CAAC,EACzD;MAEA,MAAM,IAAIC,KAAK,CAACC,IAAI,CAACC,KAAK,CAACR,IAAI,CAAC,CAACS,OAAO,IAAI,2BAA2BZ,GAAG,GAAG,CAAC;IAChF;IAEA,IAAII,MAAM,KAAK,GAAG,EAAE;MAElB,OAAOS,IAAI,CAACV,IAAI,CAAC;IACnB,CAAC,MAAM;MAEL,IAAIW,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,EAAE;QAG1C,IAAMC,KAAK,GAAGC,iBAAiB,CAACf,IAAI,CAAC;QACrC,IAAIc,KAAK,EAAE;UAGT,MAAM,IAAIpB,gBAAgB,CAACoB,KAAK,EAAEjB,GAAG,CAAC;QACxC;MACF;MAEA,MAAM,IAAIS,KAAK,CAAC,yCAAyCT,GAAG,KAAKG,IAAI,EAAE,CAAC;IAC1E;EACF,CAAC,CAAC;AACJ;AAEA,SAASe,iBAAiBA,CAACC,IAAY,EAAO;EAC5C,IAAI;IACF,OAAOT,IAAI,CAACC,KAAK,CAACQ,IAAI,CAAC;EACzB,CAAC,CAAC,OAAAC,OAAA,EAAM;IACN,OAAO,IAAI;EACb;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}