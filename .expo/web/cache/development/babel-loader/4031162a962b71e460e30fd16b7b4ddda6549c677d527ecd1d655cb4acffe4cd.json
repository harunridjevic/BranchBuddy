{"ast":null,"code":"var disableReactNativeMissingModuleHandling = !__DEV__ && (process.env.EXPO_OS !== 'web' || typeof window === 'undefined');\nglobalThis.__webpack_chunk_load__ = function (id) {\n  return global[`${__METRO_GLOBAL_PREFIX__}__loadBundleAsync`](id);\n};\nglobalThis.__webpack_require__ = function (id) {\n  var original = ErrorUtils.reportFatalError;\n  if (disableReactNativeMissingModuleHandling) {\n    ErrorUtils.reportFatalError = function (err) {\n      throw err;\n    };\n  }\n  try {\n    return global[`${__METRO_GLOBAL_PREFIX__}__r`](id);\n  } finally {\n    if (disableReactNativeMissingModuleHandling) {\n      ErrorUtils.reportFatalError = original;\n    }\n  }\n};","map":{"version":3,"names":["disableReactNativeMissingModuleHandling","__DEV__","process","env","EXPO_OS","window","globalThis","__webpack_chunk_load__","id","global","__METRO_GLOBAL_PREFIX__","__webpack_require__","original","ErrorUtils","reportFatalError","err"],"sources":["C:/Users/R User/Documents/software_dev/BranchBuddy/node_modules/@expo/metro-runtime/rsc/runtime.js"],"sourcesContent":["/**\n * Copyright Â© 2024 650 Industries.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// React Native's error handling is full of bugs which cause the app to crash in production.\n// We'll disable their handling in production native builds to ensure missing modules are shown to the user.\nconst disableReactNativeMissingModuleHandling =\n  !__DEV__ && (process.env.EXPO_OS !== 'web' || typeof window === 'undefined');\n\nglobalThis.__webpack_chunk_load__ = (id) => {\n  return global[`${__METRO_GLOBAL_PREFIX__}__loadBundleAsync`](id);\n};\n\nglobalThis.__webpack_require__ = (id) => {\n  // This logic can be tested by running a production iOS build without virtual client boundaries. This will result in all split chunks being missing and\n  // errors being thrown on RSC load.\n\n  const original = ErrorUtils.reportFatalError;\n  if (disableReactNativeMissingModuleHandling) {\n    ErrorUtils.reportFatalError = (err) => {\n      // Throw the error so the __r function exits as expected. The error will then be caught by the nearest error boundary.\n      throw err;\n    };\n  }\n  try {\n    return global[`${__METRO_GLOBAL_PREFIX__}__r`](id);\n  } finally {\n    // Restore the original error handling.\n    if (disableReactNativeMissingModuleHandling) {\n      ErrorUtils.reportFatalError = original;\n    }\n  }\n};\n"],"mappings":"AASA,IAAMA,uCAAuC,GAC3C,CAACC,OAAO,KAAKC,OAAO,CAACC,GAAG,CAACC,OAAO,KAAK,KAAK,IAAI,OAAOC,MAAM,KAAK,WAAW,CAAC;AAE9EC,UAAU,CAACC,sBAAsB,GAAG,UAACC,EAAE,EAAK;EAC1C,OAAOC,MAAM,CAAC,GAAGC,uBAAuB,mBAAmB,CAAC,CAACF,EAAE,CAAC;AAClE,CAAC;AAEDF,UAAU,CAACK,mBAAmB,GAAG,UAACH,EAAE,EAAK;EAIvC,IAAMI,QAAQ,GAAGC,UAAU,CAACC,gBAAgB;EAC5C,IAAId,uCAAuC,EAAE;IAC3Ca,UAAU,CAACC,gBAAgB,GAAG,UAACC,GAAG,EAAK;MAErC,MAAMA,GAAG;IACX,CAAC;EACH;EACA,IAAI;IACF,OAAON,MAAM,CAAC,GAAGC,uBAAuB,KAAK,CAAC,CAACF,EAAE,CAAC;EACpD,CAAC,SAAS;IAER,IAAIR,uCAAuC,EAAE;MAC3Ca,UAAU,CAACC,gBAAgB,GAAGF,QAAQ;IACxC;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}