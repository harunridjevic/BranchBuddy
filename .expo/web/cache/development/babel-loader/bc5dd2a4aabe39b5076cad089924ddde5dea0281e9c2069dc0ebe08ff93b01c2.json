{"ast":null,"code":"import React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { LogBoxButton } from \"../UI/LogBoxButton\";\nimport * as LogBoxStyle from \"../UI/LogBoxStyle\";\nimport { CODE_FONT } from \"../UI/constants\";\nimport { getStackFormattedLocation } from \"../formatProjectFilePath\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nexport function LogBoxInspectorStackFrame(props) {\n  var frame = props.frame,\n    onPress = props.onPress;\n  var location = getStackFormattedLocation(process.env.EXPO_PROJECT_ROOT, frame);\n  return _jsx(View, {\n    style: styles.frameContainer,\n    children: _jsxs(LogBoxButton, {\n      backgroundColor: {\n        default: 'transparent',\n        pressed: onPress ? LogBoxStyle.getBackgroundColor(1) : 'transparent'\n      },\n      onPress: onPress,\n      style: styles.frame,\n      children: [_jsx(Text, {\n        style: [styles.name, frame.collapse === true && styles.dim],\n        children: frame.methodName\n      }), _jsx(Text, {\n        ellipsizeMode: \"middle\",\n        numberOfLines: 1,\n        style: [styles.location, frame.collapse === true && styles.dim],\n        children: location\n      })]\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  frameContainer: {\n    flexDirection: 'row',\n    paddingHorizontal: 15\n  },\n  frame: {\n    flex: 1,\n    paddingVertical: 4,\n    paddingHorizontal: 10,\n    borderRadius: 5\n  },\n  lineLocation: {\n    flexDirection: 'row'\n  },\n  name: {\n    color: LogBoxStyle.getTextColor(1),\n    fontSize: 14,\n    includeFontPadding: false,\n    lineHeight: 18,\n    fontWeight: '400',\n    fontFamily: CODE_FONT\n  },\n  location: {\n    color: LogBoxStyle.getTextColor(0.8),\n    fontSize: 12,\n    fontWeight: '300',\n    includeFontPadding: false,\n    lineHeight: 16,\n    paddingLeft: 10\n  },\n  dim: {\n    color: LogBoxStyle.getTextColor(0.4),\n    fontWeight: '300'\n  },\n  line: {\n    color: LogBoxStyle.getTextColor(0.8),\n    fontSize: 12,\n    fontWeight: '300',\n    includeFontPadding: false,\n    lineHeight: 16\n  }\n});","map":{"version":3,"names":["React","StyleSheet","Text","View","LogBoxButton","LogBoxStyle","CODE_FONT","getStackFormattedLocation","jsx","_jsx","jsxs","_jsxs","LogBoxInspectorStackFrame","props","frame","onPress","location","process","env","EXPO_PROJECT_ROOT","style","styles","frameContainer","children","backgroundColor","default","pressed","getBackgroundColor","name","collapse","dim","methodName","ellipsizeMode","numberOfLines","create","flexDirection","paddingHorizontal","flex","paddingVertical","borderRadius","lineLocation","color","getTextColor","fontSize","includeFontPadding","lineHeight","fontWeight","fontFamily","paddingLeft","line"],"sources":["C:/Users/R User/Documents/software_dev/BranchBuddy/node_modules/@expo/metro-runtime/src/error-overlay/overlay/LogBoxInspectorStackFrame.tsx"],"sourcesContent":["/**\n * Copyright (c) 650 Industries.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport type { GestureResponderEvent } from 'react-native';\nimport { StackFrame } from 'stacktrace-parser';\n\nimport { LogBoxButton } from '../UI/LogBoxButton';\nimport * as LogBoxStyle from '../UI/LogBoxStyle';\nimport { CODE_FONT } from '../UI/constants';\nimport { getStackFormattedLocation } from '../formatProjectFilePath';\n\ndeclare const process: any;\n\ntype Props = {\n  frame: StackFrame & { collapse?: boolean };\n  onPress?: (event: GestureResponderEvent) => void;\n};\n\nexport function LogBoxInspectorStackFrame(props: Props) {\n  const { frame, onPress } = props;\n  const location = getStackFormattedLocation(process.env.EXPO_PROJECT_ROOT, frame);\n  return (\n    <View style={styles.frameContainer}>\n      <LogBoxButton\n        backgroundColor={{\n          default: 'transparent',\n          pressed: onPress ? LogBoxStyle.getBackgroundColor(1) : 'transparent',\n        }}\n        onPress={onPress}\n        style={styles.frame}>\n        <Text style={[styles.name, frame.collapse === true && styles.dim]}>{frame.methodName}</Text>\n        <Text\n          ellipsizeMode=\"middle\"\n          numberOfLines={1}\n          style={[styles.location, frame.collapse === true && styles.dim]}>\n          {location}\n        </Text>\n      </LogBoxButton>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  frameContainer: {\n    flexDirection: 'row',\n    paddingHorizontal: 15,\n  },\n  frame: {\n    flex: 1,\n    paddingVertical: 4,\n    paddingHorizontal: 10,\n    borderRadius: 5,\n  },\n  lineLocation: {\n    flexDirection: 'row',\n  },\n  name: {\n    color: LogBoxStyle.getTextColor(1),\n    fontSize: 14,\n    includeFontPadding: false,\n    lineHeight: 18,\n    fontWeight: '400',\n    fontFamily: CODE_FONT,\n  },\n  location: {\n    color: LogBoxStyle.getTextColor(0.8),\n    fontSize: 12,\n    fontWeight: '300',\n    includeFontPadding: false,\n    lineHeight: 16,\n    paddingLeft: 10,\n  },\n  dim: {\n    color: LogBoxStyle.getTextColor(0.4),\n    fontWeight: '300',\n  },\n  line: {\n    color: LogBoxStyle.getTextColor(0.8),\n    fontSize: 12,\n    fontWeight: '300',\n    includeFontPadding: false,\n    lineHeight: 16,\n  },\n});\n"],"mappings":"AAOA,OAAOA,KAAK,MAAM,OAAO;AAAC,OAAAC,UAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAK1B,SAASC,YAAY;AACrB,OAAO,KAAKC,WAAW;AACvB,SAASC,SAAS;AAClB,SAASC,yBAAyB;AAAmC,SAAAC,GAAA,IAAAC,IAAA,EAAAC,IAAA,IAAAC,KAAA;AASrE,OAAO,SAASC,yBAAyBA,CAACC,KAAY,EAAE;EACtD,IAAQC,KAAK,GAAcD,KAAK,CAAxBC,KAAK;IAAEC,OAAO,GAAKF,KAAK,CAAjBE,OAAO;EACtB,IAAMC,QAAQ,GAAGT,yBAAyB,CAACU,OAAO,CAACC,GAAG,CAACC,iBAAiB,EAAEL,KAAK,CAAC;EAChF,OACEL,IAAA,CAACN,IAAI;IAACiB,KAAK,EAAEC,MAAM,CAACC,cAAe;IAAAC,QAAA,EACjCZ,KAAA,CAACP,YAAY;MACXoB,eAAe,EAAE;QACfC,OAAO,EAAE,aAAa;QACtBC,OAAO,EAAEX,OAAO,GAAGV,WAAW,CAACsB,kBAAkB,CAAC,CAAC,CAAC,GAAG;MACzD,CAAE;MACFZ,OAAO,EAAEA,OAAQ;MACjBK,KAAK,EAAEC,MAAM,CAACP,KAAM;MAAAS,QAAA,GACpBd,IAAA,CAACP,IAAI;QAACkB,KAAK,EAAE,CAACC,MAAM,CAACO,IAAI,EAAEd,KAAK,CAACe,QAAQ,KAAK,IAAI,IAAIR,MAAM,CAACS,GAAG,CAAE;QAAAP,QAAA,EAAET,KAAK,CAACiB;MAAU,CAAO,CAAC,EAC5FtB,IAAA,CAACP,IAAI;QACH8B,aAAa,EAAC,QAAQ;QACtBC,aAAa,EAAE,CAAE;QACjBb,KAAK,EAAE,CAACC,MAAM,CAACL,QAAQ,EAAEF,KAAK,CAACe,QAAQ,KAAK,IAAI,IAAIR,MAAM,CAACS,GAAG,CAAE;QAAAP,QAAA,EAC/DP;MAAQ,CACL,CAAC;IAAA,CACK;EAAC,CACX,CAAC;AAEX;AAEA,IAAMK,MAAM,GAAGpB,UAAU,CAACiC,MAAM,CAAC;EAC/BZ,cAAc,EAAE;IACda,aAAa,EAAE,KAAK;IACpBC,iBAAiB,EAAE;EACrB,CAAC;EACDtB,KAAK,EAAE;IACLuB,IAAI,EAAE,CAAC;IACPC,eAAe,EAAE,CAAC;IAClBF,iBAAiB,EAAE,EAAE;IACrBG,YAAY,EAAE;EAChB,CAAC;EACDC,YAAY,EAAE;IACZL,aAAa,EAAE;EACjB,CAAC;EACDP,IAAI,EAAE;IACJa,KAAK,EAAEpC,WAAW,CAACqC,YAAY,CAAC,CAAC,CAAC;IAClCC,QAAQ,EAAE,EAAE;IACZC,kBAAkB,EAAE,KAAK;IACzBC,UAAU,EAAE,EAAE;IACdC,UAAU,EAAE,KAAK;IACjBC,UAAU,EAAEzC;EACd,CAAC;EACDU,QAAQ,EAAE;IACRyB,KAAK,EAAEpC,WAAW,CAACqC,YAAY,CAAC,GAAG,CAAC;IACpCC,QAAQ,EAAE,EAAE;IACZG,UAAU,EAAE,KAAK;IACjBF,kBAAkB,EAAE,KAAK;IACzBC,UAAU,EAAE,EAAE;IACdG,WAAW,EAAE;EACf,CAAC;EACDlB,GAAG,EAAE;IACHW,KAAK,EAAEpC,WAAW,CAACqC,YAAY,CAAC,GAAG,CAAC;IACpCI,UAAU,EAAE;EACd,CAAC;EACDG,IAAI,EAAE;IACJR,KAAK,EAAEpC,WAAW,CAACqC,YAAY,CAAC,GAAG,CAAC;IACpCC,QAAQ,EAAE,EAAE;IACZG,UAAU,EAAE,KAAK;IACjBF,kBAAkB,EAAE,KAAK;IACzBC,UAAU,EAAE;EACd;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}