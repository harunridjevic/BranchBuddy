{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useLinking = exports.series = void 0;\nvar native_1 = require(\"@react-navigation/native\");\nvar fast_deep_equal_1 = __importDefault(require(\"fast-deep-equal\"));\nvar React = __importStar(require(\"react\"));\nvar createMemoryHistory_1 = require(\"./createMemoryHistory\");\nvar serverLocationContext_1 = require(\"../global-state/serverLocationContext\");\nvar _findMatchingState = function findMatchingState(a, b) {\n  if (a === undefined || b === undefined || a.key !== b.key) {\n    return [undefined, undefined];\n  }\n  var aHistoryLength = a.history ? a.history.length : a.routes.length;\n  var bHistoryLength = b.history ? b.history.length : b.routes.length;\n  var aRoute = a.routes[a.index];\n  var bRoute = b.routes[b.index];\n  var aChildState = aRoute.state;\n  var bChildState = bRoute.state;\n  if (aHistoryLength !== bHistoryLength || aRoute.key !== bRoute.key || aChildState === undefined || bChildState === undefined || aChildState.key !== bChildState.key) {\n    return [a, b];\n  }\n  return _findMatchingState(aChildState, bChildState);\n};\nvar series = function series(cb) {\n  var queue = Promise.resolve();\n  var callback = function callback() {\n    queue = queue.then(cb);\n  };\n  return callback;\n};\nexports.series = series;\nvar linkingHandlers = [];\nfunction useLinking(ref, _ref, onUnhandledLinking) {\n  var _ref$enabled = _ref.enabled,\n    enabled = _ref$enabled === void 0 ? true : _ref$enabled,\n    config = _ref.config,\n    _ref$getStateFromPath = _ref.getStateFromPath,\n    getStateFromPath = _ref$getStateFromPath === void 0 ? native_1.getStateFromPath : _ref$getStateFromPath,\n    _ref$getPathFromState = _ref.getPathFromState,\n    getPathFromState = _ref$getPathFromState === void 0 ? native_1.getPathFromState : _ref$getPathFromState,\n    _ref$getActionFromSta = _ref.getActionFromState,\n    getActionFromState = _ref$getActionFromSta === void 0 ? native_1.getActionFromState : _ref$getActionFromSta;\n  var independent = (0, native_1.useNavigationIndependentTree)();\n  React.useEffect(function () {\n    if (process.env.NODE_ENV === 'production') {\n      return undefined;\n    }\n    if (independent) {\n      return undefined;\n    }\n    if (enabled !== false && linkingHandlers.length) {\n      console.error(['Looks like you have configured linking in multiple places. This is likely an error since deep links should only be handled in one place to avoid conflicts. Make sure that:', \"- You don't have multiple NavigationContainers in the app each with 'linking' enabled\", '- Only a single instance of the root component is rendered'].join('\\n').trim());\n    }\n    var handler = Symbol();\n    if (enabled !== false) {\n      linkingHandlers.push(handler);\n    }\n    return function () {\n      var index = linkingHandlers.indexOf(handler);\n      if (index > -1) {\n        linkingHandlers.splice(index, 1);\n      }\n    };\n  }, [enabled, independent]);\n  var _React$useState = React.useState(createMemoryHistory_1.createMemoryHistory),\n    _React$useState2 = _slicedToArray(_React$useState, 1),\n    history = _React$useState2[0];\n  var enabledRef = React.useRef(enabled);\n  var configRef = React.useRef(config);\n  var getStateFromPathRef = React.useRef(getStateFromPath);\n  var getPathFromStateRef = React.useRef(getPathFromState);\n  var getActionFromStateRef = React.useRef(getActionFromState);\n  React.useEffect(function () {\n    enabledRef.current = enabled;\n    configRef.current = config;\n    getStateFromPathRef.current = getStateFromPath;\n    getPathFromStateRef.current = getPathFromState;\n    getActionFromStateRef.current = getActionFromState;\n  });\n  var validateRoutesNotExistInRootState = React.useCallback(function (state) {\n    var navigation = ref.current;\n    var rootState = navigation == null ? void 0 : navigation.getRootState();\n    return state == null ? void 0 : state.routes.some(function (r) {\n      return !(rootState != null && rootState.routeNames.includes(r.name));\n    });\n  }, [ref]);\n  var server = React.useContext(serverLocationContext_1.ServerContext);\n  var getInitialState = React.useCallback(function () {\n    var value;\n    if (enabledRef.current) {\n      var _server$location;\n      var location = (_server$location = server == null ? void 0 : server.location) != null ? _server$location : typeof window !== 'undefined' ? window.location : undefined;\n      var path = location ? location.pathname + location.search : undefined;\n      if (path) {\n        value = getStateFromPathRef.current(path, configRef.current);\n      }\n      onUnhandledLinking(path);\n    }\n    var thenable = {\n      then: function then(onfulfilled) {\n        return Promise.resolve(onfulfilled ? onfulfilled(value) : value);\n      },\n      catch: function _catch() {\n        return thenable;\n      }\n    };\n    return thenable;\n  }, []);\n  var previousIndexRef = React.useRef(undefined);\n  var previousStateRef = React.useRef(undefined);\n  var pendingPopStatePathRef = React.useRef(undefined);\n  React.useEffect(function () {\n    previousIndexRef.current = history.index;\n    return history.listen(function () {\n      var _previousIndexRef$cur;\n      var navigation = ref.current;\n      if (!navigation || !enabled) {\n        return;\n      }\n      var _window = window,\n        location = _window.location;\n      var path = location.pathname + location.search + location.hash;\n      var index = history.index;\n      var previousIndex = (_previousIndexRef$cur = previousIndexRef.current) != null ? _previousIndexRef$cur : 0;\n      previousIndexRef.current = index;\n      pendingPopStatePathRef.current = path;\n      var record = history.get(index);\n      if ((record == null ? void 0 : record.path) === path && record != null && record.state) {\n        navigation.resetRoot(record.state);\n        return;\n      }\n      var state = getStateFromPathRef.current(path, configRef.current);\n      if (state) {\n        onUnhandledLinking(path);\n        if (validateRoutesNotExistInRootState(state)) {\n          return;\n        }\n        if (index > previousIndex || (index === previousIndex && (!record || `${record == null ? void 0 : record.path}${location.hash}` === path))) {\n          var action = getActionFromStateRef.current(state, configRef.current);\n          if (action !== undefined) {\n            try {\n              navigation.dispatch(action);\n            } catch (e) {\n              console.warn(`An error occurred when trying to handle the link '${path}': ${typeof e === 'object' && e != null && 'message' in e ? e.message : e}`);\n            }\n          } else {\n            navigation.resetRoot(state);\n          }\n        } else {\n          navigation.resetRoot(state);\n        }\n      } else {\n        navigation.resetRoot(state);\n      }\n    });\n  }, [enabled, history, onUnhandledLinking, ref, validateRoutesNotExistInRootState]);\n  React.useEffect(function () {\n    var _ref$current;\n    if (!enabled) {\n      return;\n    }\n    var getPathForRoute = function getPathForRoute(route, state) {\n      var path;\n      if (route != null && route.path) {\n        var stateForPath = getStateFromPathRef.current(route.path, configRef.current);\n        if (stateForPath) {\n          var focusedRoute = (0, native_1.findFocusedRoute)(stateForPath);\n          if (focusedRoute && focusedRoute.name === route.name && (0, fast_deep_equal_1.default)(_objectSpread({}, focusedRoute.params), _objectSpread({}, route.params))) {\n            path = route.path;\n          }\n        }\n      }\n      if (path == null) {\n        path = getPathFromStateRef.current(state, configRef.current);\n      }\n      return path;\n    };\n    if (ref.current) {\n      var state = ref.current.getRootState();\n      if (state) {\n        var route = (0, native_1.findFocusedRoute)(state);\n        var path = getPathForRoute(route, state);\n        if (previousStateRef.current === undefined) {\n          previousStateRef.current = state;\n        }\n        history.replace({\n          path: path,\n          state: state\n        });\n      }\n    }\n    var onStateChange = function () {\n      var _ref2 = _asyncToGenerator(function* () {\n        var navigation = ref.current;\n        if (!navigation || !enabled) {\n          return;\n        }\n        var previousState = previousStateRef.current;\n        var state = navigation.getRootState();\n        if (!state) {\n          return;\n        }\n        var pendingPath = pendingPopStatePathRef.current;\n        var route = (0, native_1.findFocusedRoute)(state);\n        var path = getPathForRoute(route, state);\n        previousStateRef.current = state;\n        pendingPopStatePathRef.current = undefined;\n        var _findMatchingState2 = _findMatchingState(previousState, state),\n          _findMatchingState3 = _slicedToArray(_findMatchingState2, 2),\n          previousFocusedState = _findMatchingState3[0],\n          focusedState = _findMatchingState3[1];\n        if (previousFocusedState && focusedState && path !== pendingPath) {\n          var historyDelta = (focusedState.history ? focusedState.history.length : focusedState.routes.length) - (previousFocusedState.history ? previousFocusedState.history.length : previousFocusedState.routes.length);\n          if (historyDelta > 0) {\n            history.push({\n              path: path,\n              state: state\n            });\n          } else if (historyDelta < 0) {\n            var nextIndex = history.backIndex({\n              path: path\n            });\n            var currentIndex = history.index;\n            try {\n              if (nextIndex !== -1 && nextIndex < currentIndex && history.get(nextIndex - currentIndex)) {\n                yield history.go(nextIndex - currentIndex);\n              } else {\n                yield history.go(historyDelta);\n              }\n              history.replace({\n                path: path,\n                state: state\n              });\n            } catch (_unused) {}\n          } else {\n            history.replace({\n              path: path,\n              state: state\n            });\n          }\n        } else {\n          history.replace({\n            path: path,\n            state: state\n          });\n        }\n      });\n      return function onStateChange() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    return (_ref$current = ref.current) == null ? void 0 : _ref$current.addListener('state', (0, exports.series)(onStateChange));\n  }, [enabled, history, ref]);\n  return {\n    getInitialState: getInitialState\n  };\n}\nexports.useLinking = useLinking;","map":{"version":3,"names":["native_1","require","fast_deep_equal_1","__importDefault","React","__importStar","createMemoryHistory_1","serverLocationContext_1","findMatchingState","a","b","undefined","key","aHistoryLength","history","length","routes","bHistoryLength","aRoute","index","bRoute","aChildState","state","bChildState","series","cb","queue","Promise","resolve","callback","then","exports","linkingHandlers","useLinking","ref","_ref","onUnhandledLinking","_ref$enabled","enabled","config","_ref$getStateFromPath","getStateFromPath","_ref$getPathFromState","getPathFromState","_ref$getActionFromSta","getActionFromState","independent","useNavigationIndependentTree","useEffect","process","env","NODE_ENV","console","error","join","trim","handler","Symbol","push","indexOf","splice","_React$useState","useState","createMemoryHistory","_React$useState2","_slicedToArray","enabledRef","useRef","configRef","getStateFromPathRef","getPathFromStateRef","getActionFromStateRef","current","validateRoutesNotExistInRootState","useCallback","navigation","rootState","getRootState","some","r","routeNames","includes","name","server","useContext","ServerContext","getInitialState","value","_server$location","location","window","path","pathname","search","thenable","onfulfilled","catch","previousIndexRef","previousStateRef","pendingPopStatePathRef","listen","_previousIndexRef$cur","_window","hash","previousIndex","record","get","resetRoot","action","dispatch","e","warn","message","_ref$current","getPathForRoute","route","stateForPath","focusedRoute","findFocusedRoute","default","_objectSpread","params","replace","onStateChange","_ref2","_asyncToGenerator","previousState","pendingPath","_findMatchingState2","_findMatchingState3","previousFocusedState","focusedState","historyDelta","nextIndex","backIndex","currentIndex","go","_unused","apply","arguments","addListener"],"sources":["C:\\Users\\R User\\Documents\\software_dev\\BranchBuddy\\node_modules\\expo-router\\src\\fork\\useLinking.ts"],"sourcesContent":["import {\n  LinkingOptions,\n  findFocusedRoute,\n  getActionFromState as getActionFromStateDefault,\n  getPathFromState as getPathFromStateDefault,\n  getStateFromPath as getStateFromPathDefault,\n  type NavigationContainerRef,\n  type NavigationState,\n  type ParamListBase,\n  useNavigationIndependentTree,\n} from '@react-navigation/native';\nimport isEqual from 'fast-deep-equal';\nimport * as React from 'react';\n\nimport { createMemoryHistory } from './createMemoryHistory';\nimport { ServerContext } from '../global-state/serverLocationContext';\n\ntype ResultState = ReturnType<typeof getStateFromPathDefault>;\n\n/**\n * Find the matching navigation state that changed between 2 navigation states\n * e.g.: a -> b -> c -> d and a -> b -> c -> e -> f, if history in b changed, b is the matching state\n */\nconst findMatchingState = <T extends NavigationState>(\n  a: T | undefined,\n  b: T | undefined\n): [T | undefined, T | undefined] => {\n  if (a === undefined || b === undefined || a.key !== b.key) {\n    return [undefined, undefined];\n  }\n\n  // Tab and drawer will have `history` property, but stack will have history in `routes`\n  const aHistoryLength = a.history ? a.history.length : a.routes.length;\n  const bHistoryLength = b.history ? b.history.length : b.routes.length;\n\n  const aRoute = a.routes[a.index];\n  const bRoute = b.routes[b.index];\n\n  const aChildState = aRoute.state as T | undefined;\n  const bChildState = bRoute.state as T | undefined;\n\n  // Stop here if this is the state object that changed:\n  // - history length is different\n  // - focused routes are different\n  // - one of them doesn't have child state\n  // - child state keys are different\n  if (\n    aHistoryLength !== bHistoryLength ||\n    aRoute.key !== bRoute.key ||\n    aChildState === undefined ||\n    bChildState === undefined ||\n    aChildState.key !== bChildState.key\n  ) {\n    return [a, b];\n  }\n\n  return findMatchingState(aChildState, bChildState);\n};\n\n/**\n * Run async function in series as it's called.\n */\nexport const series = (cb: () => Promise<void>) => {\n  let queue = Promise.resolve();\n  const callback = () => {\n    queue = queue.then(cb);\n  };\n  return callback;\n};\n\nconst linkingHandlers: symbol[] = [];\n\ntype Options = LinkingOptions<ParamListBase>;\n\nexport function useLinking(\n  ref: React.RefObject<NavigationContainerRef<ParamListBase>>,\n  {\n    enabled = true,\n    config,\n    getStateFromPath = getStateFromPathDefault,\n    getPathFromState = getPathFromStateDefault,\n    getActionFromState = getActionFromStateDefault,\n  }: Options,\n  onUnhandledLinking: (lastUnhandledLining: string | undefined) => void\n) {\n  const independent = useNavigationIndependentTree();\n\n  React.useEffect(() => {\n    if (process.env.NODE_ENV === 'production') {\n      return undefined;\n    }\n\n    if (independent) {\n      return undefined;\n    }\n\n    if (enabled !== false && linkingHandlers.length) {\n      console.error(\n        [\n          'Looks like you have configured linking in multiple places. This is likely an error since deep links should only be handled in one place to avoid conflicts. Make sure that:',\n          \"- You don't have multiple NavigationContainers in the app each with 'linking' enabled\",\n          '- Only a single instance of the root component is rendered',\n        ]\n          .join('\\n')\n          .trim()\n      );\n    }\n\n    const handler = Symbol();\n\n    if (enabled !== false) {\n      linkingHandlers.push(handler);\n    }\n\n    return () => {\n      const index = linkingHandlers.indexOf(handler);\n\n      if (index > -1) {\n        linkingHandlers.splice(index, 1);\n      }\n    };\n  }, [enabled, independent]);\n\n  const [history] = React.useState(createMemoryHistory);\n\n  // We store these options in ref to avoid re-creating getInitialState and re-subscribing listeners\n  // This lets user avoid wrapping the items in `React.useCallback` or `React.useMemo`\n  // Not re-creating `getInitialState` is important coz it makes it easier for the user to use in an effect\n  const enabledRef = React.useRef(enabled);\n  const configRef = React.useRef(config);\n  const getStateFromPathRef = React.useRef(getStateFromPath);\n  const getPathFromStateRef = React.useRef(getPathFromState);\n  const getActionFromStateRef = React.useRef(getActionFromState);\n\n  React.useEffect(() => {\n    enabledRef.current = enabled;\n    configRef.current = config;\n    getStateFromPathRef.current = getStateFromPath;\n    getPathFromStateRef.current = getPathFromState;\n    getActionFromStateRef.current = getActionFromState;\n  });\n\n  const validateRoutesNotExistInRootState = React.useCallback(\n    (state: ResultState) => {\n      const navigation = ref.current;\n      const rootState = navigation?.getRootState();\n      // Make sure that the routes in the state exist in the root navigator\n      // Otherwise there's an error in the linking configuration\n      return state?.routes.some((r) => !rootState?.routeNames.includes(r.name));\n    },\n    [ref]\n  );\n\n  const server = React.useContext(ServerContext);\n\n  const getInitialState = React.useCallback(() => {\n    let value: ResultState | undefined;\n\n    if (enabledRef.current) {\n      const location =\n        server?.location ?? (typeof window !== 'undefined' ? window.location : undefined);\n\n      const path = location ? location.pathname + location.search : undefined;\n\n      if (path) {\n        value = getStateFromPathRef.current(path, configRef.current);\n      }\n\n      // If the link were handled, it gets cleared in NavigationContainer\n      onUnhandledLinking(path);\n    }\n\n    const thenable = {\n      then(onfulfilled?: (state: ResultState | undefined) => void) {\n        return Promise.resolve(onfulfilled ? onfulfilled(value) : value);\n      },\n      catch() {\n        return thenable;\n      },\n    };\n\n    return thenable as PromiseLike<ResultState | undefined>;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const previousIndexRef = React.useRef<number | undefined>(undefined);\n  const previousStateRef = React.useRef<NavigationState | undefined>(undefined);\n  const pendingPopStatePathRef = React.useRef<string | undefined>(undefined);\n\n  React.useEffect(() => {\n    previousIndexRef.current = history.index;\n\n    return history.listen(() => {\n      const navigation = ref.current;\n\n      if (!navigation || !enabled) {\n        return;\n      }\n\n      const { location } = window;\n\n      const path = location.pathname + location.search + location.hash;\n      const index = history.index;\n\n      const previousIndex = previousIndexRef.current ?? 0;\n\n      previousIndexRef.current = index;\n      pendingPopStatePathRef.current = path;\n\n      // When browser back/forward is clicked, we first need to check if state object for this index exists\n      // If it does we'll reset to that state object\n      // Otherwise, we'll handle it like a regular deep link\n      const record = history.get(index);\n\n      if (record?.path === path && record?.state) {\n        navigation.resetRoot(record.state);\n        return;\n      }\n\n      const state = getStateFromPathRef.current(path, configRef.current);\n\n      // We should only dispatch an action when going forward\n      // Otherwise the action will likely add items to history, which would mess things up\n      if (state) {\n        // If the link were handled, it gets cleared in NavigationContainer\n        onUnhandledLinking(path);\n        // Make sure that the routes in the state exist in the root navigator\n        // Otherwise there's an error in the linking configuration\n        if (validateRoutesNotExistInRootState(state)) {\n          return;\n        }\n\n        if (\n          index > previousIndex ||\n          /* START FORK\n           *\n           * This is a workaround for React Navigation's handling of hashes (it doesn't handle them)\n           * When you click on <a href=\"#hash\">, the browser will first fire a popstate event\n           * and this callback will be called.\n           *\n           * From React Navigation's perspective, it's treating the new hash change like a back/forward\n           * button press, so it thinks it should reset the state. When we should\n           * be to be pushing the new state\n           *\n           * Our fix is to check if the index is the same as the previous index\n           * and if the incoming path is the same as the old path but with the hash added,\n           * then treat it as a push instead of a reset\n           *\n           * This also works for subsequent hash changes, as internally RN\n           * doesn't store the hash in the history state.\n           *\n           * @see https://developer.mozilla.org/en-US/docs/Web/API/Window/popstate_event#when_popstate_is_sent\n           */\n          (index === previousIndex && (!record || `${record?.path}${location.hash}` === path))\n          // END FORK\n        ) {\n          const action = getActionFromStateRef.current(state, configRef.current);\n\n          if (action !== undefined) {\n            try {\n              navigation.dispatch(action);\n            } catch (e) {\n              // Ignore any errors from deep linking.\n              // This could happen in case of malformed links, navigation object not being initialized etc.\n              console.warn(\n                `An error occurred when trying to handle the link '${path}': ${\n                  typeof e === 'object' && e != null && 'message' in e ? e.message : e\n                }`\n              );\n            }\n          } else {\n            navigation.resetRoot(state);\n          }\n        } else {\n          navigation.resetRoot(state);\n        }\n      } else {\n        // if current path didn't return any state, we should revert to initial state\n        navigation.resetRoot(state);\n      }\n    });\n  }, [enabled, history, onUnhandledLinking, ref, validateRoutesNotExistInRootState]);\n\n  React.useEffect(() => {\n    if (!enabled) {\n      return;\n    }\n\n    const getPathForRoute = (\n      route: ReturnType<typeof findFocusedRoute>,\n      state: NavigationState\n    ): string => {\n      let path;\n\n      // If the `route` object contains a `path`, use that path as long as `route.name` and `params` still match\n      // This makes sure that we preserve the original URL for wildcard routes\n      if (route?.path) {\n        const stateForPath = getStateFromPathRef.current(route.path, configRef.current);\n\n        if (stateForPath) {\n          const focusedRoute = findFocusedRoute(stateForPath);\n\n          if (\n            focusedRoute &&\n            focusedRoute.name === route.name &&\n            isEqual({ ...focusedRoute.params }, { ...route.params })\n          ) {\n            path = route.path;\n          }\n        }\n      }\n\n      if (path == null) {\n        path = getPathFromStateRef.current(state, configRef.current);\n      }\n\n      // START FORK - ExpoRouter manually handles hashes\n      // const previousRoute = previousStateRef.current\n      //   ? findFocusedRoute(previousStateRef.current)\n      //   : undefined;\n\n      // Preserve the hash if the route didn't change\n      // if (\n      //   previousRoute &&\n      //   route &&\n      //   'key' in previousRoute &&\n      //   'key' in route &&\n      //   previousRoute.key === route.key\n      // ) {\n      //   path = path + location.hash;\n      // }\n      // END FORK\n\n      return path;\n    };\n\n    if (ref.current) {\n      // We need to record the current metadata on the first render if they aren't set\n      // This will allow the initial state to be in the history entry\n      const state = ref.current.getRootState();\n\n      if (state) {\n        const route = findFocusedRoute(state);\n        const path = getPathForRoute(route, state);\n\n        if (previousStateRef.current === undefined) {\n          previousStateRef.current = state;\n        }\n\n        history.replace({ path, state });\n      }\n    }\n\n    const onStateChange = async () => {\n      const navigation = ref.current;\n\n      if (!navigation || !enabled) {\n        return;\n      }\n\n      const previousState = previousStateRef.current;\n      const state = navigation.getRootState();\n\n      // root state may not available, for example when root navigators switch inside the container\n      if (!state) {\n        return;\n      }\n\n      const pendingPath = pendingPopStatePathRef.current;\n      const route = findFocusedRoute(state);\n      const path = getPathForRoute(route, state);\n\n      previousStateRef.current = state;\n      pendingPopStatePathRef.current = undefined;\n\n      // To detect the kind of state change, we need to:\n      // - Find the common focused navigation state in previous and current state\n      // - If only the route keys changed, compare history/routes.length to check if we go back/forward/replace\n      // - If no common focused navigation state found, it's a replace\n      const [previousFocusedState, focusedState] = findMatchingState(previousState, state);\n\n      if (\n        previousFocusedState &&\n        focusedState &&\n        // We should only handle push/pop if path changed from what was in last `popstate`\n        // Otherwise it's likely a change triggered by `popstate`\n        path !== pendingPath\n      ) {\n        const historyDelta =\n          (focusedState.history ? focusedState.history.length : focusedState.routes.length) -\n          (previousFocusedState.history\n            ? previousFocusedState.history.length\n            : previousFocusedState.routes.length);\n\n        if (historyDelta > 0) {\n          // If history length is increased, we should pushState\n          // Note that path might not actually change here, for example, drawer open should pushState\n          history.push({ path, state });\n        } else if (historyDelta < 0) {\n          // If history length is decreased, i.e. entries were removed, we want to go back\n\n          const nextIndex = history.backIndex({ path });\n          const currentIndex = history.index;\n\n          try {\n            if (\n              nextIndex !== -1 &&\n              nextIndex < currentIndex &&\n              // We should only go back if the entry exists and it's less than current index\n              history.get(nextIndex - currentIndex)\n            ) {\n              // An existing entry for this path exists and it's less than current index, go back to that\n              await history.go(nextIndex - currentIndex);\n            } else {\n              // We couldn't find an existing entry to go back to, so we'll go back by the delta\n              // This won't be correct if multiple routes were pushed in one go before\n              // Usually this shouldn't happen and this is a fallback for that\n              await history.go(historyDelta);\n            }\n\n            // Store the updated state as well as fix the path if incorrect\n            history.replace({ path, state });\n          } catch {\n            // The navigation was interrupted\n          }\n        } else {\n          // If history length is unchanged, we want to replaceState\n          history.replace({ path, state });\n        }\n      } else {\n        // If no common navigation state was found, assume it's a replace\n        // This would happen if the user did a reset/conditionally changed navigators\n        history.replace({ path, state });\n      }\n    };\n\n    // We debounce onStateChange coz we don't want multiple state changes to be handled at one time\n    // This could happen since `history.go(n)` is asynchronous\n    // If `pushState` or `replaceState` were called before `history.go(n)` completes, it'll mess stuff up\n    return ref.current?.addListener('state', series(onStateChange));\n  }, [enabled, history, ref]);\n\n  return {\n    getInitialState,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}