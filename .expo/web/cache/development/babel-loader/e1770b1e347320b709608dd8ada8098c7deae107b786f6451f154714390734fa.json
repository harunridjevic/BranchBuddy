{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getLinkingConfig = exports.getNavigationConfig = void 0;\nvar native_1 = require(\"@react-navigation/native\");\nvar expo_modules_core_1 = require(\"expo-modules-core\");\nvar getReactNavigationConfig_1 = require(\"./getReactNavigationConfig\");\nvar linking_1 = require(\"./link/linking\");\nfunction getNavigationConfig(routes) {\n  var metaOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  return (0, getReactNavigationConfig_1.getReactNavigationConfig)(routes, metaOnly);\n}\nexports.getNavigationConfig = getNavigationConfig;\nfunction getLinkingConfig(store, routes, context) {\n  var _ref = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},\n    _ref$metaOnly = _ref.metaOnly,\n    metaOnly = _ref$metaOnly === void 0 ? true : _ref$metaOnly,\n    serverUrl = _ref.serverUrl;\n  var hasCachedInitialUrl = false;\n  var initialUrl;\n  var nativeLinkingKey = context.keys().find(function (key) {\n    return key.match(/^\\.\\/\\+native-intent\\.[tj]sx?$/);\n  });\n  var nativeLinking = nativeLinkingKey ? context(nativeLinkingKey) : undefined;\n  return {\n    prefixes: [],\n    config: getNavigationConfig(routes, metaOnly),\n    getInitialURL: function getInitialURL() {\n      if (!hasCachedInitialUrl) {\n        if (expo_modules_core_1.Platform.OS === 'web') {\n          initialUrl = serverUrl != null ? serverUrl : (0, linking_1.getInitialURL)();\n        } else {\n          initialUrl = serverUrl != null ? serverUrl : (0, linking_1.getInitialURL)();\n          if (typeof initialUrl === 'string') {\n            if (typeof (nativeLinking == null ? void 0 : nativeLinking.redirectSystemPath) === 'function') {\n              initialUrl = nativeLinking.redirectSystemPath({\n                path: initialUrl,\n                initial: true\n              });\n            }\n          } else if (initialUrl) {\n            initialUrl = initialUrl.then(function (url) {\n              if (url && typeof (nativeLinking == null ? void 0 : nativeLinking.redirectSystemPath) === 'function') {\n                return nativeLinking.redirectSystemPath({\n                  path: url,\n                  initial: true\n                });\n              }\n              return url;\n            });\n          }\n        }\n        hasCachedInitialUrl = true;\n      }\n      return initialUrl;\n    },\n    subscribe: (0, linking_1.addEventListener)(nativeLinking),\n    getStateFromPath: linking_1.getStateFromPath.bind(store),\n    getPathFromState: function getPathFromState(state, options) {\n      var _ref2;\n      return (_ref2 = (0, linking_1.getPathFromState)(state, _objectSpread(_objectSpread({\n        screens: {}\n      }, this.config), options))) != null ? _ref2 : '/';\n    },\n    getActionFromState: native_1.getActionFromState\n  };\n}\nexports.getLinkingConfig = getLinkingConfig;","map":{"version":3,"names":["native_1","require","expo_modules_core_1","getReactNavigationConfig_1","linking_1","getNavigationConfig","routes","metaOnly","arguments","length","undefined","getReactNavigationConfig","exports","getLinkingConfig","store","context","_ref","_ref$metaOnly","serverUrl","hasCachedInitialUrl","initialUrl","nativeLinkingKey","keys","find","key","match","nativeLinking","prefixes","config","getInitialURL","Platform","OS","redirectSystemPath","path","initial","then","url","subscribe","addEventListener","getStateFromPath","bind","getPathFromState","state","options","_ref2","_objectSpread","screens","getActionFromState"],"sources":["C:\\Users\\R User\\Documents\\software_dev\\BranchBuddy\\node_modules\\expo-router\\src\\getLinkingConfig.ts"],"sourcesContent":["import { getActionFromState, LinkingOptions } from '@react-navigation/native';\nimport { Platform } from 'expo-modules-core';\n\nimport { RouteNode } from './Route';\nimport { State } from './fork/getPathFromState';\nimport { getReactNavigationConfig } from './getReactNavigationConfig';\nimport { RouterStore } from './global-state/router-store';\nimport {\n  addEventListener,\n  getInitialURL,\n  getPathFromState,\n  getStateFromPath,\n} from './link/linking';\nimport { NativeIntent, RequireContext } from './types';\n\nexport function getNavigationConfig(routes: RouteNode, metaOnly: boolean = true) {\n  return getReactNavigationConfig(routes, metaOnly);\n}\n\nexport type ExpoLinkingOptions<T extends object = Record<string, unknown>> = LinkingOptions<T> & {\n  getPathFromState?: typeof getPathFromState;\n  getStateFromPath?: typeof getStateFromPath;\n};\n\nexport type LinkingConfigOptions = {\n  metaOnly?: boolean;\n  serverUrl?: string;\n  getInitialURL?: typeof getInitialURL;\n};\n\nexport function getLinkingConfig(\n  store: RouterStore,\n  routes: RouteNode,\n  context: RequireContext,\n  { metaOnly = true, serverUrl }: LinkingConfigOptions = {}\n): ExpoLinkingOptions {\n  // Returning `undefined` / `null from `getInitialURL` are valid values, so we need to track if it's been called.\n  let hasCachedInitialUrl = false;\n  let initialUrl: ReturnType<typeof getInitialURL> | undefined;\n\n  const nativeLinkingKey = context\n    .keys()\n    .find((key) => key.match(/^\\.\\/\\+native-intent\\.[tj]sx?$/));\n  const nativeLinking: NativeIntent | undefined = nativeLinkingKey\n    ? context(nativeLinkingKey)\n    : undefined;\n\n  return {\n    prefixes: [],\n    config: getNavigationConfig(routes, metaOnly),\n    // A custom getInitialURL is used on native to ensure the app always starts at\n    // the root path if it's launched from something other than a deep link.\n    // This helps keep the native functionality working like the web functionality.\n    // For example, if you had a root navigator where the first screen was `/settings` and the second was `/index`\n    // then `/index` would be used on web and `/settings` would be used on native.\n    getInitialURL() {\n      // Expo Router calls `getInitialURL` twice, which may confuse the user if they provide a custom `getInitialURL`.\n      // Therefor we memoize the result.\n      if (!hasCachedInitialUrl) {\n        if (Platform.OS === 'web') {\n          initialUrl = serverUrl ?? getInitialURL();\n        } else {\n          initialUrl = serverUrl ?? getInitialURL();\n\n          if (typeof initialUrl === 'string') {\n            if (typeof nativeLinking?.redirectSystemPath === 'function') {\n              initialUrl = nativeLinking.redirectSystemPath({ path: initialUrl, initial: true });\n            }\n          } else if (initialUrl) {\n            initialUrl = initialUrl.then((url) => {\n              if (url && typeof nativeLinking?.redirectSystemPath === 'function') {\n                return nativeLinking.redirectSystemPath({ path: url, initial: true });\n              }\n              return url;\n            });\n          }\n        }\n        hasCachedInitialUrl = true;\n      }\n      return initialUrl;\n    },\n    subscribe: addEventListener(nativeLinking),\n    getStateFromPath: getStateFromPath.bind(store),\n    getPathFromState(state: State, options: Parameters<typeof getPathFromState>[1]) {\n      return (\n        getPathFromState(state, {\n          screens: {},\n          ...this.config,\n          ...options,\n        }) ?? '/'\n      );\n    },\n    // Add all functions to ensure the types never need to fallback.\n    // This is a convenience for usage in the package.\n    getActionFromState,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}