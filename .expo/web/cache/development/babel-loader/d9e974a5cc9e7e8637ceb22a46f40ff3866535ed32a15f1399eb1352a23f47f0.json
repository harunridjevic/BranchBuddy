{"ast":null,"code":"import { IgnorePattern, LogData } from \"./Data/LogBoxData\";\nimport { ExtendedExceptionData } from \"./Data/parseLogBoxLog\";\nexport { LogData, ExtendedExceptionData, IgnorePattern };\nvar LogBox;\nif (__DEV__) {\n  var LogBoxData = require(\"./Data/LogBoxData\");\n  var _ref = require(\"./Data/parseLogBoxLog\"),\n    parseLogBoxLog = _ref.parseLogBoxLog,\n    parseInterpolation = _ref.parseInterpolation;\n  var originalConsoleError;\n  var consoleErrorImpl;\n  var isLogBoxInstalled = false;\n  LogBox = {\n    install: function install() {\n      if (isLogBoxInstalled) {\n        return;\n      }\n      isLogBoxInstalled = true;\n      var isFirstInstall = originalConsoleError == null;\n      if (isFirstInstall) {\n        originalConsoleError = console.error.bind(console);\n        console.error = function () {\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n          consoleErrorImpl == null ? void 0 : consoleErrorImpl.apply(void 0, args);\n        };\n      }\n      consoleErrorImpl = registerError;\n      if (process.env.NODE_ENV === 'test') {\n        LogBoxData.setDisabled(true);\n      }\n    },\n    uninstall: function uninstall() {\n      if (!isLogBoxInstalled) {\n        return;\n      }\n      isLogBoxInstalled = false;\n      consoleErrorImpl = originalConsoleError;\n      delete console.disableLogBox;\n    },\n    isInstalled: function isInstalled() {\n      return isLogBoxInstalled;\n    },\n    ignoreLogs: function ignoreLogs(patterns) {\n      LogBoxData.addIgnorePatterns(patterns);\n    },\n    ignoreAllLogs: function ignoreAllLogs(value) {\n      LogBoxData.setDisabled(value == null ? true : value);\n    },\n    clearAllLogs: function clearAllLogs() {\n      LogBoxData.clear();\n    },\n    addLog: function addLog(log) {\n      if (isLogBoxInstalled) {\n        LogBoxData.addLog(log);\n      }\n    },\n    addException: function addException(error) {\n      if (isLogBoxInstalled) {\n        LogBoxData.addException(error);\n      }\n    }\n  };\n  var isWarningModuleWarning = function isWarningModuleWarning() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    return typeof args[0] === 'string' && args[0].startsWith('Warning: ');\n  };\n  var registerError = function registerError() {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n    if (LogBoxData.isLogBoxErrorMessage(args[0])) {\n      originalConsoleError == null ? void 0 : originalConsoleError.apply(void 0, args);\n      return;\n    }\n    try {\n      if (!isWarningModuleWarning.apply(void 0, args)) {\n        originalConsoleError == null ? void 0 : originalConsoleError.apply(void 0, args);\n        return;\n      }\n      var _parseLogBoxLog = parseLogBoxLog(args),\n        category = _parseLogBoxLog.category,\n        message = _parseLogBoxLog.message,\n        componentStack = _parseLogBoxLog.componentStack;\n      if (!LogBoxData.isMessageIgnored(message.content)) {\n        var interpolated = parseInterpolation(args);\n        originalConsoleError == null ? void 0 : originalConsoleError(interpolated.message.content);\n        LogBoxData.addLog({\n          level: /did not match\\. Server:/.test(message.content) ? 'fatal' : 'error',\n          category: category,\n          message: message,\n          componentStack: componentStack\n        });\n      }\n    } catch (err) {\n      LogBoxData.reportUnexpectedLogBoxError(err);\n    }\n  };\n} else {\n  LogBox = {\n    install: function install() {},\n    uninstall: function uninstall() {},\n    isInstalled: function isInstalled() {\n      return false;\n    },\n    ignoreLogs: function ignoreLogs(patterns) {},\n    ignoreAllLogs: function ignoreAllLogs(value) {},\n    clearAllLogs: function clearAllLogs() {},\n    addLog: function addLog(log) {},\n    addException: function addException(ex) {}\n  };\n}\nexport default LogBox;","map":{"version":3,"names":["IgnorePattern","LogData","ExtendedExceptionData","LogBox","__DEV__","LogBoxData","require","_ref","parseLogBoxLog","parseInterpolation","originalConsoleError","consoleErrorImpl","isLogBoxInstalled","install","isFirstInstall","console","error","bind","_len","arguments","length","args","Array","_key","apply","registerError","process","env","NODE_ENV","setDisabled","uninstall","disableLogBox","isInstalled","ignoreLogs","patterns","addIgnorePatterns","ignoreAllLogs","value","clearAllLogs","clear","addLog","log","addException","isWarningModuleWarning","_len2","_key2","startsWith","_len3","_key3","isLogBoxErrorMessage","_parseLogBoxLog","category","message","componentStack","isMessageIgnored","content","interpolated","level","test","err","reportUnexpectedLogBoxError","ex"],"sources":["C:/Users/R User/Documents/software_dev/BranchBuddy/node_modules/@expo/metro-runtime/src/error-overlay/LogBox.web.ts"],"sourcesContent":["/**\n * Copyright (c) 650 Industries.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { IgnorePattern, LogData } from './Data/LogBoxData';\nimport { ExtendedExceptionData } from './Data/parseLogBoxLog';\n\nexport { LogData, ExtendedExceptionData, IgnorePattern };\n\nlet LogBox: ILogBox;\n\ninterface ILogBox {\n  install(): void;\n  uninstall(): void;\n  isInstalled(): boolean;\n  ignoreLogs(patterns: readonly IgnorePattern[]): void;\n  ignoreAllLogs(ignore?: boolean): void;\n  clearAllLogs(): void;\n  addLog(log: LogData): void;\n  addException(error: ExtendedExceptionData): void;\n}\n\n/**\n * LogBox displays logs in the app.\n */\nif (__DEV__) {\n  const LogBoxData = require('./Data/LogBoxData');\n  const { parseLogBoxLog, parseInterpolation } =\n    require('./Data/parseLogBoxLog') as typeof import('./Data/parseLogBoxLog');\n\n  let originalConsoleError: typeof console.error | undefined;\n  let consoleErrorImpl: typeof console.error | undefined;\n\n  let isLogBoxInstalled: boolean = false;\n\n  LogBox = {\n    install(): void {\n      if (isLogBoxInstalled) {\n        return;\n      }\n\n      isLogBoxInstalled = true;\n\n      // Trigger lazy initialization of module.\n      // require(\"../NativeModules/specs/NativeLogBox\");\n\n      // IMPORTANT: we only overwrite `console.error` and `console.warn` once.\n      // When we uninstall we keep the same reference and only change its\n      // internal implementation\n      const isFirstInstall = originalConsoleError == null;\n      if (isFirstInstall) {\n        originalConsoleError = console.error.bind(console);\n\n        console.error = (...args) => {\n          consoleErrorImpl?.(...args);\n        };\n      }\n\n      consoleErrorImpl = registerError;\n\n      if (process.env.NODE_ENV === 'test') {\n        LogBoxData.setDisabled(true);\n      }\n    },\n\n    uninstall(): void {\n      if (!isLogBoxInstalled) {\n        return;\n      }\n\n      isLogBoxInstalled = false;\n\n      // IMPORTANT: we don't re-assign to `console` in case the method has been\n      // decorated again after installing LogBox. E.g.:\n      // Before uninstalling: original > LogBox > OtherErrorHandler\n      // After uninstalling:  original > LogBox (noop) > OtherErrorHandler\n      consoleErrorImpl = originalConsoleError;\n      delete (console as any).disableLogBox;\n    },\n\n    isInstalled(): boolean {\n      return isLogBoxInstalled;\n    },\n\n    ignoreLogs(patterns: readonly IgnorePattern[]): void {\n      LogBoxData.addIgnorePatterns(patterns);\n    },\n\n    ignoreAllLogs(value?: boolean): void {\n      LogBoxData.setDisabled(value == null ? true : value);\n    },\n\n    clearAllLogs(): void {\n      LogBoxData.clear();\n    },\n\n    addLog(log: LogData): void {\n      if (isLogBoxInstalled) {\n        LogBoxData.addLog(log);\n      }\n    },\n\n    addException(error: ExtendedExceptionData): void {\n      if (isLogBoxInstalled) {\n        LogBoxData.addException(error);\n      }\n    },\n  };\n\n  const isWarningModuleWarning = (...args: any) => {\n    return typeof args[0] === 'string' && args[0].startsWith('Warning: ');\n  };\n\n  const registerError = (...args: Parameters<typeof console.error>): void => {\n    // Let errors within LogBox itself fall through.\n    if (LogBoxData.isLogBoxErrorMessage(args[0])) {\n      originalConsoleError?.(...args);\n      return;\n    }\n\n    try {\n      if (!isWarningModuleWarning(...args)) {\n        // Only show LogBox for the 'warning' module, otherwise pass through.\n        // By passing through, this will get picked up by the React console override,\n        // potentially adding the component stack. React then passes it back to the\n        // React Native ExceptionsManager, which reports it to LogBox as an error.\n        //\n        // The 'warning' module needs to be handled here because React internally calls\n        // `console.error('Warning: ')` with the component stack already included.\n        originalConsoleError?.(...args);\n        return;\n      }\n\n      const { category, message, componentStack } = parseLogBoxLog(args);\n\n      if (!LogBoxData.isMessageIgnored(message.content)) {\n        // Interpolate the message so they are formatted for adb and other CLIs.\n        // This is different than the message.content above because it includes component stacks.\n        const interpolated = parseInterpolation(args);\n        originalConsoleError?.(interpolated.message.content);\n\n        LogBoxData.addLog({\n          // Always show the static rendering issues as full screen since they\n          // are too confusing otherwise.\n          level: /did not match\\. Server:/.test(message.content) ? 'fatal' : 'error',\n          category,\n          message,\n          componentStack,\n        });\n      }\n    } catch (err) {\n      LogBoxData.reportUnexpectedLogBoxError(err);\n    }\n  };\n} else {\n  LogBox = {\n    install(): void {},\n    uninstall(): void {},\n    isInstalled(): boolean {\n      return false;\n    },\n    ignoreLogs(patterns: readonly IgnorePattern[]): void {},\n    ignoreAllLogs(value?: boolean): void {},\n    clearAllLogs(): void {},\n    addLog(log: LogData): void {},\n    addException(ex: ExtendedExceptionData): void {},\n  };\n}\n\nexport default LogBox;\n"],"mappings":"AAQA,SAASA,aAAa,EAAEC,OAAO;AAC/B,SAASC,qBAAqB;AAE9B,SAASD,OAAO,EAAEC,qBAAqB,EAAEF,aAAa;AAEtD,IAAIG,MAAe;AAgBnB,IAAIC,OAAO,EAAE;EACX,IAAMC,UAAU,GAAGC,OAAO,oBAAoB,CAAC;EAC/C,IAAAC,IAAA,GACED,OAAO,wBAAwB,CAAC;IAD1BE,cAAc,GAAAD,IAAA,CAAdC,cAAc;IAAEC,kBAAkB,GAAAF,IAAA,CAAlBE,kBAAkB;EAG1C,IAAIC,oBAAsD;EAC1D,IAAIC,gBAAkD;EAEtD,IAAIC,iBAA0B,GAAG,KAAK;EAEtCT,MAAM,GAAG;IACPU,OAAO,WAAPA,OAAOA,CAAA,EAAS;MACd,IAAID,iBAAiB,EAAE;QACrB;MACF;MAEAA,iBAAiB,GAAG,IAAI;MAQxB,IAAME,cAAc,GAAGJ,oBAAoB,IAAI,IAAI;MACnD,IAAII,cAAc,EAAE;QAClBJ,oBAAoB,GAAGK,OAAO,CAACC,KAAK,CAACC,IAAI,CAACF,OAAO,CAAC;QAElDA,OAAO,CAACC,KAAK,GAAG,YAAa;UAAA,SAAAE,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAATC,IAAI,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;YAAJF,IAAI,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;UAAA;UACtBZ,gBAAgB,oBAAhBA,gBAAgB,CAAAa,KAAA,SAAMH,IAAI,CAAC;QAC7B,CAAC;MACH;MAEAV,gBAAgB,GAAGc,aAAa;MAEhC,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,MAAM,EAAE;QACnCvB,UAAU,CAACwB,WAAW,CAAC,IAAI,CAAC;MAC9B;IACF,CAAC;IAEDC,SAAS,WAATA,SAASA,CAAA,EAAS;MAChB,IAAI,CAAClB,iBAAiB,EAAE;QACtB;MACF;MAEAA,iBAAiB,GAAG,KAAK;MAMzBD,gBAAgB,GAAGD,oBAAoB;MACvC,OAAQK,OAAO,CAASgB,aAAa;IACvC,CAAC;IAEDC,WAAW,WAAXA,WAAWA,CAAA,EAAY;MACrB,OAAOpB,iBAAiB;IAC1B,CAAC;IAEDqB,UAAU,WAAVA,UAAUA,CAACC,QAAkC,EAAQ;MACnD7B,UAAU,CAAC8B,iBAAiB,CAACD,QAAQ,CAAC;IACxC,CAAC;IAEDE,aAAa,WAAbA,aAAaA,CAACC,KAAe,EAAQ;MACnChC,UAAU,CAACwB,WAAW,CAACQ,KAAK,IAAI,IAAI,GAAG,IAAI,GAAGA,KAAK,CAAC;IACtD,CAAC;IAEDC,YAAY,WAAZA,YAAYA,CAAA,EAAS;MACnBjC,UAAU,CAACkC,KAAK,CAAC,CAAC;IACpB,CAAC;IAEDC,MAAM,WAANA,MAAMA,CAACC,GAAY,EAAQ;MACzB,IAAI7B,iBAAiB,EAAE;QACrBP,UAAU,CAACmC,MAAM,CAACC,GAAG,CAAC;MACxB;IACF,CAAC;IAEDC,YAAY,WAAZA,YAAYA,CAAC1B,KAA4B,EAAQ;MAC/C,IAAIJ,iBAAiB,EAAE;QACrBP,UAAU,CAACqC,YAAY,CAAC1B,KAAK,CAAC;MAChC;IACF;EACF,CAAC;EAED,IAAM2B,sBAAsB,GAAG,SAAzBA,sBAAsBA,CAAA,EAAqB;IAAA,SAAAC,KAAA,GAAAzB,SAAA,CAAAC,MAAA,EAAdC,IAAI,OAAAC,KAAA,CAAAsB,KAAA,GAAAC,KAAA,MAAAA,KAAA,GAAAD,KAAA,EAAAC,KAAA;MAAJxB,IAAI,CAAAwB,KAAA,IAAA1B,SAAA,CAAA0B,KAAA;IAAA;IACrC,OAAO,OAAOxB,IAAI,CAAC,CAAC,CAAC,KAAK,QAAQ,IAAIA,IAAI,CAAC,CAAC,CAAC,CAACyB,UAAU,CAAC,WAAW,CAAC;EACvE,CAAC;EAED,IAAMrB,aAAa,GAAG,SAAhBA,aAAaA,CAAA,EAAwD;IAAA,SAAAsB,KAAA,GAAA5B,SAAA,CAAAC,MAAA,EAAjDC,IAAI,OAAAC,KAAA,CAAAyB,KAAA,GAAAC,KAAA,MAAAA,KAAA,GAAAD,KAAA,EAAAC,KAAA;MAAJ3B,IAAI,CAAA2B,KAAA,IAAA7B,SAAA,CAAA6B,KAAA;IAAA;IAE5B,IAAI3C,UAAU,CAAC4C,oBAAoB,CAAC5B,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;MAC5CX,oBAAoB,oBAApBA,oBAAoB,CAAAc,KAAA,SAAMH,IAAI,CAAC;MAC/B;IACF;IAEA,IAAI;MACF,IAAI,CAACsB,sBAAsB,CAAAnB,KAAA,SAAIH,IAAI,CAAC,EAAE;QAQpCX,oBAAoB,oBAApBA,oBAAoB,CAAAc,KAAA,SAAMH,IAAI,CAAC;QAC/B;MACF;MAEA,IAAA6B,eAAA,GAA8C1C,cAAc,CAACa,IAAI,CAAC;QAA1D8B,QAAQ,GAAAD,eAAA,CAARC,QAAQ;QAAEC,OAAO,GAAAF,eAAA,CAAPE,OAAO;QAAEC,cAAc,GAAAH,eAAA,CAAdG,cAAc;MAEzC,IAAI,CAAChD,UAAU,CAACiD,gBAAgB,CAACF,OAAO,CAACG,OAAO,CAAC,EAAE;QAGjD,IAAMC,YAAY,GAAG/C,kBAAkB,CAACY,IAAI,CAAC;QAC7CX,oBAAoB,oBAApBA,oBAAoB,CAAG8C,YAAY,CAACJ,OAAO,CAACG,OAAO,CAAC;QAEpDlD,UAAU,CAACmC,MAAM,CAAC;UAGhBiB,KAAK,EAAE,yBAAyB,CAACC,IAAI,CAACN,OAAO,CAACG,OAAO,CAAC,GAAG,OAAO,GAAG,OAAO;UAC1EJ,QAAQ,EAARA,QAAQ;UACRC,OAAO,EAAPA,OAAO;UACPC,cAAc,EAAdA;QACF,CAAC,CAAC;MACJ;IACF,CAAC,CAAC,OAAOM,GAAG,EAAE;MACZtD,UAAU,CAACuD,2BAA2B,CAACD,GAAG,CAAC;IAC7C;EACF,CAAC;AACH,CAAC,MAAM;EACLxD,MAAM,GAAG;IACPU,OAAO,WAAPA,OAAOA,CAAA,EAAS,CAAC,CAAC;IAClBiB,SAAS,WAATA,SAASA,CAAA,EAAS,CAAC,CAAC;IACpBE,WAAW,WAAXA,WAAWA,CAAA,EAAY;MACrB,OAAO,KAAK;IACd,CAAC;IACDC,UAAU,WAAVA,UAAUA,CAACC,QAAkC,EAAQ,CAAC,CAAC;IACvDE,aAAa,WAAbA,aAAaA,CAACC,KAAe,EAAQ,CAAC,CAAC;IACvCC,YAAY,WAAZA,YAAYA,CAAA,EAAS,CAAC,CAAC;IACvBE,MAAM,WAANA,MAAMA,CAACC,GAAY,EAAQ,CAAC,CAAC;IAC7BC,YAAY,WAAZA,YAAYA,CAACmB,EAAyB,EAAQ,CAAC;EACjD,CAAC;AACH;AAEA,eAAe1D,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}