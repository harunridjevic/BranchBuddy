{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React, { useState } from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport View from \"react-native-web/dist/exports/View\";\nimport * as LogBoxStyle from \"./LogBoxStyle\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function LogBoxButton(props) {\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    pressed = _useState2[0],\n    setPressed = _useState2[1];\n  var backgroundColor = props.backgroundColor;\n  if (!backgroundColor) {\n    backgroundColor = {\n      default: LogBoxStyle.getBackgroundColor(0.95),\n      pressed: LogBoxStyle.getBackgroundColor(0.6)\n    };\n  }\n  var content = _jsx(View, {\n    style: [_objectSpread({\n      backgroundColor: pressed ? backgroundColor.pressed : backgroundColor.default\n    }, Platform.select({\n      web: {\n        cursor: 'pointer'\n      }\n    })), props.style],\n    children: props.children\n  });\n  return props.onPress == null ? content : _jsx(Pressable, {\n    hitSlop: props.hitSlop,\n    onPress: props.onPress,\n    onPressIn: function onPressIn() {\n      return setPressed(true);\n    },\n    onPressOut: function onPressOut() {\n      return setPressed(false);\n    },\n    children: content\n  });\n}","map":{"version":3,"names":["React","useState","Platform","Pressable","View","LogBoxStyle","jsx","_jsx","LogBoxButton","props","_useState","_useState2","_slicedToArray","pressed","setPressed","backgroundColor","default","getBackgroundColor","content","style","_objectSpread","select","web","cursor","children","onPress","hitSlop","onPressIn","onPressOut"],"sources":["C:/Users/R User/Documents/software_dev/BranchBuddy/node_modules/@expo/metro-runtime/src/error-overlay/UI/LogBoxButton.tsx"],"sourcesContent":["/**\n * Copyright (c) 650 Industries.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React, { useState } from 'react';\nimport { GestureResponderEvent, Insets, Platform, Pressable, View, ViewStyle } from 'react-native';\n\nimport * as LogBoxStyle from './LogBoxStyle';\n\ntype Props = {\n  backgroundColor: {\n    default: string;\n    pressed: string;\n  };\n  children?: any;\n  hitSlop?: Insets;\n  onPress?: ((event: GestureResponderEvent) => void) | null;\n  style?: ViewStyle;\n};\n\nexport function LogBoxButton(props: Props) {\n  const [pressed, setPressed] = useState(false);\n\n  let backgroundColor = props.backgroundColor;\n  if (!backgroundColor) {\n    backgroundColor = {\n      default: LogBoxStyle.getBackgroundColor(0.95),\n      pressed: LogBoxStyle.getBackgroundColor(0.6),\n    };\n  }\n\n  const content = (\n    <View\n      style={[\n        {\n          backgroundColor: pressed ? backgroundColor.pressed : backgroundColor.default,\n          ...Platform.select({\n            web: {\n              cursor: 'pointer',\n            },\n          }),\n        },\n        props.style,\n      ]}>\n      {props.children}\n    </View>\n  );\n\n  return props.onPress == null ? (\n    content\n  ) : (\n    <Pressable\n      hitSlop={props.hitSlop}\n      onPress={props.onPress}\n      onPressIn={() => setPressed(true)}\n      onPressOut={() => setPressed(false)}>\n      {content}\n    </Pressable>\n  );\n}\n"],"mappings":";;;;AAOA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,OAAAC,QAAA;AAAA,OAAAC,SAAA;AAAA,OAAAC,IAAA;AAGxC,OAAO,KAAKC,WAAW;AAAsB,SAAAC,GAAA,IAAAC,IAAA;AAa7C,OAAO,SAASC,YAAYA,CAACC,KAAY,EAAE;EACzC,IAAAC,SAAA,GAA8BT,QAAQ,CAAC,KAAK,CAAC;IAAAU,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAtCG,OAAO,GAAAF,UAAA;IAAEG,UAAU,GAAAH,UAAA;EAE1B,IAAII,eAAe,GAAGN,KAAK,CAACM,eAAe;EAC3C,IAAI,CAACA,eAAe,EAAE;IACpBA,eAAe,GAAG;MAChBC,OAAO,EAAEX,WAAW,CAACY,kBAAkB,CAAC,IAAI,CAAC;MAC7CJ,OAAO,EAAER,WAAW,CAACY,kBAAkB,CAAC,GAAG;IAC7C,CAAC;EACH;EAEA,IAAMC,OAAO,GACXX,IAAA,CAACH,IAAI;IACHe,KAAK,EAAE,CAAAC,aAAA;MAEHL,eAAe,EAAEF,OAAO,GAAGE,eAAe,CAACF,OAAO,GAAGE,eAAe,CAACC;IAAO,GACzEd,QAAQ,CAACmB,MAAM,CAAC;MACjBC,GAAG,EAAE;QACHC,MAAM,EAAE;MACV;IACF,CAAC,CAAC,GAEJd,KAAK,CAACU,KAAK,CACX;IAAAK,QAAA,EACDf,KAAK,CAACe;EAAQ,CACX,CACP;EAED,OAAOf,KAAK,CAACgB,OAAO,IAAI,IAAI,GAC1BP,OAAO,GAEPX,IAAA,CAACJ,SAAS;IACRuB,OAAO,EAAEjB,KAAK,CAACiB,OAAQ;IACvBD,OAAO,EAAEhB,KAAK,CAACgB,OAAQ;IACvBE,SAAS,EAAE,SAAXA,SAASA,CAAA;MAAA,OAAQb,UAAU,CAAC,IAAI,CAAC;IAAA,CAAC;IAClCc,UAAU,EAAE,SAAZA,UAAUA,CAAA;MAAA,OAAQd,UAAU,CAAC,KAAK,CAAC;IAAA,CAAC;IAAAU,QAAA,EACnCN;EAAO,CACC,CACZ;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}