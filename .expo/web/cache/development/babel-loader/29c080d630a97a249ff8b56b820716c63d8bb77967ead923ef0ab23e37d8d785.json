{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { buildUrlForBundle } from \"./buildUrlForBundle\";\nimport { fetchThenEvalAsync } from \"./fetchThenEval\";\nexport function loadBundleAsync(_x) {\n  return _loadBundleAsync.apply(this, arguments);\n}\nfunction _loadBundleAsync() {\n  _loadBundleAsync = _asyncToGenerator(function* (bundlePath) {\n    var requestUrl = buildUrlForBundle(bundlePath);\n    if (process.env.NODE_ENV === 'production') {\n      return fetchThenEvalAsync(requestUrl);\n    } else {\n      return fetchThenEvalAsync(requestUrl).then(function () {\n        var HMRClient = require(\"../HMRClient\").default;\n        HMRClient.registerBundle(requestUrl);\n      });\n    }\n  });\n  return _loadBundleAsync.apply(this, arguments);\n}","map":{"version":3,"names":["buildUrlForBundle","fetchThenEvalAsync","loadBundleAsync","_x","_loadBundleAsync","apply","arguments","_asyncToGenerator","bundlePath","requestUrl","process","env","NODE_ENV","then","HMRClient","require","default","registerBundle"],"sources":["C:/Users/R User/Documents/software_dev/BranchBuddy/node_modules/@expo/metro-runtime/src/async-require/loadBundle.ts"],"sourcesContent":["/**\n * Copyright Â© 2022 650 Industries.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { buildUrlForBundle } from './buildUrlForBundle';\nimport { fetchThenEvalAsync } from './fetchThenEval';\n\n/**\n * Load a bundle for a URL using fetch + eval on native and script tag injection on web.\n *\n * @param bundlePath Given a statement like `import('./Bacon')` `bundlePath` would be `Bacon.bundle?params=from-metro`.\n */\nexport async function loadBundleAsync(bundlePath: string): Promise<void> {\n  const requestUrl = buildUrlForBundle(bundlePath);\n\n  if (process.env.NODE_ENV === 'production') {\n    return fetchThenEvalAsync(requestUrl);\n  } else {\n    return fetchThenEvalAsync(requestUrl).then(() => {\n      const HMRClient = require('../HMRClient').default as typeof import('../HMRClient').default;\n      HMRClient.registerBundle(requestUrl);\n    });\n  }\n}\n"],"mappings":";AAMA,SAASA,iBAAiB;AAC1B,SAASC,kBAAkB;AAO3B,gBAAsBC,eAAeA,CAAAC,EAAA;EAAA,OAAAC,gBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAWpC,SAAAF,iBAAA;EAAAA,gBAAA,GAAAG,iBAAA,CAXM,WAA+BC,UAAkB,EAAiB;IACvE,IAAMC,UAAU,GAAGT,iBAAiB,CAACQ,UAAU,CAAC;IAEhD,IAAIE,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;MACzC,OAAOX,kBAAkB,CAACQ,UAAU,CAAC;IACvC,CAAC,MAAM;MACL,OAAOR,kBAAkB,CAACQ,UAAU,CAAC,CAACI,IAAI,CAAC,YAAM;QAC/C,IAAMC,SAAS,GAAGC,OAAO,eAAe,CAAC,CAACC,OAAgD;QAC1FF,SAAS,CAACG,cAAc,CAACR,UAAU,CAAC;MACtC,CAAC,CAAC;IACJ;EACF,CAAC;EAAA,OAAAL,gBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}