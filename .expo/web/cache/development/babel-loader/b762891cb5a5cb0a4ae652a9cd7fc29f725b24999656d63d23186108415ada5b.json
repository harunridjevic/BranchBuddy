{"ast":null,"code":"'use client';\n\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useInitializeExpoRouter = exports.useStoreRouteInfo = exports.useStoreRootState = exports.useExpoRouter = exports.store = exports.RouterStore = void 0;\nvar native_1 = require(\"@react-navigation/native\");\nvar expo_constants_1 = __importDefault(require(\"expo-constants\"));\nvar fast_deep_equal_1 = __importDefault(require(\"fast-deep-equal\"));\nvar react_1 = require(\"react\");\nvar react_native_1 = require(\"react-native-web/dist/index\");\nvar routing_1 = require(\"./routing\");\nvar sort_routes_1 = require(\"./sort-routes\");\nvar LocationProvider_1 = require(\"../LocationProvider\");\nvar getPathFromState_1 = require(\"../fork/getPathFromState\");\nvar getLinkingConfig_1 = require(\"../getLinkingConfig\");\nvar getRoutes_1 = require(\"../getRoutes\");\nvar useScreens_1 = require(\"../useScreens\");\nvar SplashScreen = __importStar(require(\"../views/Splash\"));\nvar RouterStore = function () {\n  function RouterStore() {\n    var _this = this;\n    _classCallCheck(this, RouterStore);\n    this.hasAttemptedToHideSplash = false;\n    this.rootStateSubscribers = new Set();\n    this.storeSubscribers = new Set();\n    this.linkTo = routing_1.linkTo.bind(this);\n    this.getSortedRoutes = sort_routes_1.getSortedRoutes.bind(this);\n    this.goBack = routing_1.goBack.bind(this);\n    this.canGoBack = routing_1.canGoBack.bind(this);\n    this.push = routing_1.push.bind(this);\n    this.dismiss = routing_1.dismiss.bind(this);\n    this.dismissTo = routing_1.dismissTo.bind(this);\n    this.replace = routing_1.replace.bind(this);\n    this.dismissAll = routing_1.dismissAll.bind(this);\n    this.canDismiss = routing_1.canDismiss.bind(this);\n    this.setParams = routing_1.setParams.bind(this);\n    this.navigate = routing_1.navigate.bind(this);\n    this.reload = routing_1.reload.bind(this);\n    this.subscribeToRootState = function (subscriber) {\n      _this.rootStateSubscribers.add(subscriber);\n      return function () {\n        return _this.rootStateSubscribers.delete(subscriber);\n      };\n    };\n    this.subscribeToStore = function (subscriber) {\n      _this.storeSubscribers.add(subscriber);\n      return function () {\n        return _this.storeSubscribers.delete(subscriber);\n      };\n    };\n    this.snapshot = function () {\n      return _this;\n    };\n    this.rootStateSnapshot = function () {\n      return _this.rootState;\n    };\n    this.routeInfoSnapshot = function () {\n      return _this.routeInfo;\n    };\n  }\n  return _createClass(RouterStore, [{\n    key: \"initialize\",\n    value: function initialize(context, navigationRef) {\n      var _this$navigationRefSu,\n        _expo_constants_1$def,\n        _expo_constants_1$def2,\n        _this2 = this;\n      var linkingConfigOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      this.initialState = undefined;\n      this.rootState = undefined;\n      this.nextState = undefined;\n      this.linking = undefined;\n      (_this$navigationRefSu = this.navigationRefSubscription) == null ? void 0 : _this$navigationRefSu.call(this);\n      this.rootStateSubscribers.clear();\n      this.storeSubscribers.clear();\n      this.routeNode = (0, getRoutes_1.getRoutes)(context, _objectSpread(_objectSpread({}, (_expo_constants_1$def = expo_constants_1.default.expoConfig) == null ? void 0 : (_expo_constants_1$def2 = _expo_constants_1$def.extra) == null ? void 0 : _expo_constants_1$def2.router), {}, {\n        ignoreEntryPoints: true,\n        platform: react_native_1.Platform.OS\n      }));\n      this.routeInfo = {\n        unstable_globalHref: '',\n        pathname: '',\n        isIndex: false,\n        params: {},\n        segments: []\n      };\n      if (this.routeNode) {\n        var _this$linking;\n        this.linking = (0, getLinkingConfig_1.getLinkingConfig)(this, this.routeNode, context, linkingConfigOptions);\n        this.rootComponent = (0, useScreens_1.getQualifiedRouteComponent)(this.routeNode);\n        var initialURL = (_this$linking = this.linking) == null ? void 0 : _this$linking.getInitialURL == null ? void 0 : _this$linking.getInitialURL();\n        if (typeof initialURL === 'string') {\n          var _this$linking$getStat, _this$linking2;\n          this.rootState = (_this$linking$getStat = (_this$linking2 = this.linking).getStateFromPath) == null ? void 0 : _this$linking$getStat.call(_this$linking2, initialURL, this.linking.config);\n          this.initialState = this.rootState;\n          if (this.rootState) {\n            this.routeInfo = this.getRouteInfo(this.rootState);\n          }\n        }\n      } else {\n        if (process.env.NODE_ENV === 'production') {\n          throw new Error('No routes found');\n        }\n        this.rootComponent = react_1.Fragment;\n      }\n      this.navigationRef = navigationRef;\n      this.navigationRefSubscription = navigationRef.addListener('state', function (data) {\n        var state = data.data.state;\n        if (!_this2.hasAttemptedToHideSplash) {\n          _this2.hasAttemptedToHideSplash = true;\n          _this2.splashScreenAnimationFrame = requestAnimationFrame(function () {\n            SplashScreen._internal_maybeHideAsync == null ? void 0 : SplashScreen._internal_maybeHideAsync();\n          });\n        }\n        var shouldUpdateSubscribers = _this2.nextState === state;\n        _this2.nextState = undefined;\n        if (state && state !== _this2.rootState) {\n          exports.store.updateState(state, undefined);\n          shouldUpdateSubscribers = true;\n        }\n        if (shouldUpdateSubscribers) {\n          for (var subscriber of _this2.rootStateSubscribers) {\n            subscriber();\n          }\n        }\n      });\n      for (var subscriber of this.storeSubscribers) {\n        subscriber();\n      }\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(state) {\n      var nextState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : state;\n      exports.store.rootState = state;\n      exports.store.nextState = nextState;\n      var nextRouteInfo = exports.store.getRouteInfo(state);\n      if (!(0, fast_deep_equal_1.default)(this.routeInfo, nextRouteInfo)) {\n        exports.store.routeInfo = nextRouteInfo;\n      }\n    }\n  }, {\n    key: \"getRouteInfo\",\n    value: function getRouteInfo(state) {\n      var _this3 = this;\n      return (0, LocationProvider_1.getRouteInfoFromState)(function (state, asPath) {\n        var _this3$linking;\n        return (0, getPathFromState_1.getPathDataFromState)(state, _objectSpread(_objectSpread({\n          screens: {}\n        }, (_this3$linking = _this3.linking) == null ? void 0 : _this3$linking.config), {}, {\n          preserveDynamicRoutes: asPath,\n          preserveGroups: asPath,\n          shouldEncodeURISegment: false\n        }));\n      }, state);\n    }\n  }, {\n    key: \"shouldShowTutorial\",\n    value: function shouldShowTutorial() {\n      return !this.routeNode && process.env.NODE_ENV === 'development';\n    }\n  }, {\n    key: \"cleanup\",\n    value: function cleanup() {\n      if (this.splashScreenAnimationFrame) {\n        cancelAnimationFrame(this.splashScreenAnimationFrame);\n      }\n    }\n  }]);\n}();\nexports.RouterStore = RouterStore;\nexports.store = new RouterStore();\nfunction useExpoRouter() {\n  return (0, react_1.useSyncExternalStore)(exports.store.subscribeToStore, exports.store.snapshot, exports.store.snapshot);\n}\nexports.useExpoRouter = useExpoRouter;\nfunction syncStoreRootState() {\n  if (exports.store.navigationRef.isReady()) {\n    var currentState = exports.store.navigationRef.getRootState();\n    if (exports.store.rootState !== currentState) {\n      exports.store.updateState(currentState);\n    }\n  }\n}\nfunction useStoreRootState() {\n  syncStoreRootState();\n  return (0, react_1.useSyncExternalStore)(exports.store.subscribeToRootState, exports.store.rootStateSnapshot, exports.store.rootStateSnapshot);\n}\nexports.useStoreRootState = useStoreRootState;\nfunction useStoreRouteInfo() {\n  syncStoreRootState();\n  return (0, react_1.useSyncExternalStore)(exports.store.subscribeToRootState, exports.store.routeInfoSnapshot, exports.store.routeInfoSnapshot);\n}\nexports.useStoreRouteInfo = useStoreRouteInfo;\nfunction useInitializeExpoRouter(context, options) {\n  var navigationRef = (0, native_1.useNavigationContainerRef)();\n  (0, react_1.useMemo)(function () {\n    return exports.store.initialize(context, navigationRef, options);\n  }, [context]);\n  useExpoRouter();\n  return exports.store;\n}\nexports.useInitializeExpoRouter = useInitializeExpoRouter;","map":{"version":3,"names":["native_1","require","expo_constants_1","__importDefault","fast_deep_equal_1","react_1","react_native_1","routing_1","sort_routes_1","LocationProvider_1","getPathFromState_1","getLinkingConfig_1","getRoutes_1","useScreens_1","SplashScreen","__importStar","RouterStore","_this","_classCallCheck","hasAttemptedToHideSplash","rootStateSubscribers","Set","storeSubscribers","linkTo","bind","getSortedRoutes","goBack","canGoBack","push","dismiss","dismissTo","replace","dismissAll","canDismiss","setParams","navigate","reload","subscribeToRootState","subscriber","add","delete","subscribeToStore","snapshot","rootStateSnapshot","rootState","routeInfoSnapshot","routeInfo","_createClass","key","value","initialize","context","navigationRef","_this$navigationRefSu","_expo_constants_1$def","_expo_constants_1$def2","_this2","linkingConfigOptions","arguments","length","undefined","initialState","nextState","linking","navigationRefSubscription","call","clear","routeNode","getRoutes","_objectSpread","default","expoConfig","extra","router","ignoreEntryPoints","platform","Platform","OS","unstable_globalHref","pathname","isIndex","params","segments","_this$linking","getLinkingConfig","rootComponent","getQualifiedRouteComponent","initialURL","getInitialURL","_this$linking$getStat","_this$linking2","getStateFromPath","config","getRouteInfo","process","env","NODE_ENV","Error","Fragment","addListener","data","state","splashScreenAnimationFrame","requestAnimationFrame","_internal_maybeHideAsync","shouldUpdateSubscribers","exports","store","updateState","nextRouteInfo","_this3","getRouteInfoFromState","asPath","_this3$linking","getPathDataFromState","screens","preserveDynamicRoutes","preserveGroups","shouldEncodeURISegment","shouldShowTutorial","cleanup","cancelAnimationFrame","useExpoRouter","useSyncExternalStore","syncStoreRootState","isReady","currentState","getRootState","useStoreRootState","useStoreRouteInfo","useInitializeExpoRouter","options","useNavigationContainerRef","useMemo"],"sources":["C:\\Users\\R User\\Documents\\software_dev\\BranchBuddy\\node_modules\\expo-router\\src\\global-state\\router-store.tsx"],"sourcesContent":["'use client';\n\nimport {\n  NavigationContainerRefWithCurrent,\n  useNavigationContainerRef,\n} from '@react-navigation/native';\nimport Constants from 'expo-constants';\nimport equal from 'fast-deep-equal';\nimport { useSyncExternalStore, useMemo, ComponentType, Fragment } from 'react';\nimport { Platform } from 'react-native';\n\nimport {\n  canGoBack,\n  canDismiss,\n  goBack,\n  linkTo,\n  navigate,\n  dismiss,\n  dismissAll,\n  push,\n  reload,\n  replace,\n  setParams,\n  dismissTo,\n} from './routing';\nimport { getSortedRoutes } from './sort-routes';\nimport { UrlObject, getRouteInfoFromState } from '../LocationProvider';\nimport { RouteNode } from '../Route';\nimport { getPathDataFromState, getPathFromState } from '../fork/getPathFromState';\n// import { ResultState } from '../fork/getStateFromPath';\nimport { ExpoLinkingOptions, LinkingConfigOptions, getLinkingConfig } from '../getLinkingConfig';\nimport { getRoutes } from '../getRoutes';\nimport { RequireContext } from '../types';\nimport { getQualifiedRouteComponent } from '../useScreens';\nimport * as SplashScreen from '../views/Splash';\n\ntype ResultState = any;\n\n/**\n * This is the global state for the router. It is used to keep track of the current route, and to provide a way to navigate to other routes.\n *\n * There should only be one instance of this class and be initialized via `useInitializeExpoRouter`\n */\nexport class RouterStore {\n  routeNode!: RouteNode | null;\n  rootComponent!: ComponentType;\n  linking?: ExpoLinkingOptions;\n  private hasAttemptedToHideSplash: boolean = false;\n\n  initialState?: ResultState;\n  rootState?: ResultState;\n  nextState?: ResultState;\n  routeInfo?: UrlObject;\n  splashScreenAnimationFrame?: number;\n\n  navigationRef!: NavigationContainerRefWithCurrent<ReactNavigation.RootParamList>;\n  navigationRefSubscription!: () => void;\n\n  rootStateSubscribers = new Set<() => void>();\n  storeSubscribers = new Set<() => void>();\n\n  linkTo = linkTo.bind(this);\n  getSortedRoutes = getSortedRoutes.bind(this);\n  goBack = goBack.bind(this);\n  canGoBack = canGoBack.bind(this);\n  push = push.bind(this);\n  dismiss = dismiss.bind(this);\n  dismissTo = dismissTo.bind(this);\n  replace = replace.bind(this);\n  dismissAll = dismissAll.bind(this);\n  canDismiss = canDismiss.bind(this);\n  setParams = setParams.bind(this);\n  navigate = navigate.bind(this);\n  reload = reload.bind(this);\n\n  initialize(\n    context: RequireContext,\n    navigationRef: NavigationContainerRefWithCurrent<ReactNavigation.RootParamList>,\n    linkingConfigOptions: LinkingConfigOptions = {}\n  ) {\n    // Clean up any previous state\n    this.initialState = undefined;\n    this.rootState = undefined;\n    this.nextState = undefined;\n    this.linking = undefined;\n    this.navigationRefSubscription?.();\n    this.rootStateSubscribers.clear();\n    this.storeSubscribers.clear();\n\n    this.routeNode = getRoutes(context, {\n      ...Constants.expoConfig?.extra?.router,\n      ignoreEntryPoints: true,\n      platform: Platform.OS,\n    });\n\n    // We always needs routeInfo, even if there are no routes. This can happen if:\n    //  - there are no routes (we are showing the onboarding screen)\n    //  - getInitialURL() is async\n    this.routeInfo = {\n      unstable_globalHref: '',\n      pathname: '',\n      isIndex: false,\n      params: {},\n      segments: [],\n    };\n\n    if (this.routeNode) {\n      // We have routes, so get the linking config and the root component\n      this.linking = getLinkingConfig(this, this.routeNode, context, linkingConfigOptions);\n      this.rootComponent = getQualifiedRouteComponent(this.routeNode);\n\n      // By default React Navigation is async and does not render anything in the first pass as it waits for `getInitialURL`\n      // This will cause static rendering to fail, which once performs a single pass.\n      // If the initialURL is a string, we can preload the state and routeInfo, skipping React Navigation's async behavior.\n      const initialURL = this.linking?.getInitialURL?.();\n      if (typeof initialURL === 'string') {\n        this.rootState = this.linking.getStateFromPath?.(initialURL, this.linking.config);\n        this.initialState = this.rootState;\n        if (this.rootState) {\n          this.routeInfo = this.getRouteInfo(this.rootState);\n        }\n      }\n    } else {\n      // Only error in production, in development we will show the onboarding screen\n      if (process.env.NODE_ENV === 'production') {\n        throw new Error('No routes found');\n      }\n\n      // In development, we will show the onboarding screen\n      this.rootComponent = Fragment;\n    }\n\n    /**\n     * Counter intuitively - this fires AFTER both React Navigation's state changes and the subsequent paint.\n     * This poses a couple of issues for Expo Router,\n     *   - Ensuring hooks (e.g. useSearchParams()) have data in the initial render\n     *   - Reacting to state changes after a navigation event\n     *\n     * This is why the initial render renders a Fragment and we wait until `onReady()` is called\n     * Additionally, some hooks compare the state from both the store and the navigationRef. If the store it stale,\n     * that hooks will manually update the store.\n     *\n     */\n    this.navigationRef = navigationRef;\n    this.navigationRefSubscription = navigationRef.addListener('state', (data) => {\n      const state = data.data.state as ResultState;\n\n      if (!this.hasAttemptedToHideSplash) {\n        this.hasAttemptedToHideSplash = true;\n        // NOTE(EvanBacon): `navigationRef.isReady` is sometimes not true when state is called initially.\n        this.splashScreenAnimationFrame = requestAnimationFrame(() => {\n          SplashScreen._internal_maybeHideAsync?.();\n        });\n      }\n\n      let shouldUpdateSubscribers = this.nextState === state;\n      this.nextState = undefined;\n\n      // This can sometimes be undefined when an error is thrown in the Root Layout Route.\n      // Additionally that state may already equal the rootState if it was updated within a hook\n      if (state && state !== this.rootState) {\n        store.updateState(state, undefined);\n        shouldUpdateSubscribers = true;\n      }\n\n      // If the state has changed, or was changed inside a hook we need to update the subscribers\n      if (shouldUpdateSubscribers) {\n        for (const subscriber of this.rootStateSubscribers) {\n          subscriber();\n        }\n      }\n    });\n\n    for (const subscriber of this.storeSubscribers) {\n      subscriber();\n    }\n  }\n\n  updateState(state: ResultState, nextState = state) {\n    store.rootState = state;\n    store.nextState = nextState;\n\n    const nextRouteInfo = store.getRouteInfo(state);\n\n    if (!equal(this.routeInfo, nextRouteInfo)) {\n      store.routeInfo = nextRouteInfo;\n    }\n  }\n\n  getRouteInfo(state: ResultState) {\n    return getRouteInfoFromState(\n      (state: Parameters<typeof getPathFromState>[0], asPath: boolean) => {\n        return getPathDataFromState(state, {\n          screens: {},\n          ...this.linking?.config,\n          preserveDynamicRoutes: asPath,\n          preserveGroups: asPath,\n          shouldEncodeURISegment: false,\n        });\n      },\n      state\n    );\n  }\n\n  // This is only used in development, to show the onboarding screen\n  // In production we should have errored during the initialization\n  shouldShowTutorial() {\n    return !this.routeNode && process.env.NODE_ENV === 'development';\n  }\n\n  /** Make sure these are arrow functions so `this` is correctly bound */\n  subscribeToRootState = (subscriber: () => void) => {\n    this.rootStateSubscribers.add(subscriber);\n    return () => this.rootStateSubscribers.delete(subscriber);\n  };\n  subscribeToStore = (subscriber: () => void) => {\n    this.storeSubscribers.add(subscriber);\n    return () => this.storeSubscribers.delete(subscriber);\n  };\n  snapshot = () => {\n    return this;\n  };\n  rootStateSnapshot = () => {\n    return this.rootState!;\n  };\n  routeInfoSnapshot = () => {\n    return this.routeInfo!;\n  };\n\n  cleanup() {\n    if (this.splashScreenAnimationFrame) {\n      cancelAnimationFrame(this.splashScreenAnimationFrame);\n    }\n  }\n}\n\nexport const store = new RouterStore();\n\nexport function useExpoRouter() {\n  return useSyncExternalStore(store.subscribeToStore, store.snapshot, store.snapshot);\n}\n\nfunction syncStoreRootState() {\n  if (store.navigationRef.isReady()) {\n    const currentState = store.navigationRef.getRootState() as unknown as ResultState;\n\n    if (store.rootState !== currentState) {\n      store.updateState(currentState);\n    }\n  }\n}\n\nexport function useStoreRootState() {\n  syncStoreRootState();\n  return useSyncExternalStore(\n    store.subscribeToRootState,\n    store.rootStateSnapshot,\n    store.rootStateSnapshot\n  );\n}\n\nexport function useStoreRouteInfo() {\n  syncStoreRootState();\n  return useSyncExternalStore(\n    store.subscribeToRootState,\n    store.routeInfoSnapshot,\n    store.routeInfoSnapshot\n  );\n}\n\nexport function useInitializeExpoRouter(context: RequireContext, options: LinkingConfigOptions) {\n  const navigationRef = useNavigationContainerRef();\n  useMemo(() => store.initialize(context, navigationRef, options), [context]);\n  useExpoRouter();\n  return store;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}