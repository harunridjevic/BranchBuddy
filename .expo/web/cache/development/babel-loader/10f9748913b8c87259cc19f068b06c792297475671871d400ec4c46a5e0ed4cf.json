{"ast":null,"code":"\"use strict\";\n\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nvar _excluded = [\"path\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getStateFromPath = void 0;\nvar native_1 = require(\"@react-navigation/native\");\nvar escape_string_regexp_1 = __importDefault(require(\"escape-string-regexp\"));\nvar findFocusedRoute_1 = require(\"./findFocusedRoute\");\nvar expo = __importStar(require(\"./getStateFromPath-forks\"));\nfunction getStateFromPath(path, options) {\n  var _this$routeInfo, _options$path;\n  var _getConfigResources = getConfigResources(options, this == null ? void 0 : (_this$routeInfo = this.routeInfo) == null ? void 0 : _this$routeInfo.segments),\n    initialRoutes = _getConfigResources.initialRoutes,\n    configs = _getConfigResources.configs,\n    configWithRegexes = _getConfigResources.configWithRegexes;\n  var screens = options == null ? void 0 : options.screens;\n  var expoPath = expo.getUrlWithReactNavigationConcessions(path);\n  var remaining = expoPath.nonstandardPathname.replace(/\\/+/g, '/').replace(/^\\//, '').replace(/\\?.*$/, '');\n  remaining = remaining.endsWith('/') ? remaining : `${remaining}/`;\n  var prefix = options == null ? void 0 : (_options$path = options.path) == null ? void 0 : _options$path.replace(/^\\//, '');\n  if (prefix) {\n    var normalizedPrefix = prefix.endsWith('/') ? prefix : `${prefix}/`;\n    if (!remaining.startsWith(normalizedPrefix)) {\n      return undefined;\n    }\n    remaining = remaining.replace(normalizedPrefix, '');\n  }\n  if (screens === undefined) {\n    var _routes = remaining.split('/').filter(Boolean).map(function (segment) {\n      var name = decodeURIComponent(segment);\n      return {\n        name: name\n      };\n    });\n    if (_routes.length) {\n      return createNestedStateObject(expoPath, _routes, initialRoutes, [], expoPath.url.hash);\n    }\n    return undefined;\n  }\n  if (remaining === '/') {\n    var match = expo.matchForEmptyPath(configWithRegexes);\n    if (match) {\n      return createNestedStateObject(expoPath, match.routeNames.map(function (name) {\n        return {\n          name: name\n        };\n      }), initialRoutes, configs, expoPath.url.hash);\n    }\n    return undefined;\n  }\n  var result;\n  var current;\n  var _matchAgainstConfigs = matchAgainstConfigs(remaining, configWithRegexes),\n    routes = _matchAgainstConfigs.routes,\n    remainingPath = _matchAgainstConfigs.remainingPath;\n  if (routes !== undefined) {\n    current = createNestedStateObject(expoPath, routes, initialRoutes, configs, expoPath.url.hash);\n    remaining = remainingPath;\n    result = current;\n  }\n  if (current == null || result == null) {\n    return undefined;\n  }\n  return result;\n}\nexports.getStateFromPath = getStateFromPath;\nvar cachedConfigResources = [undefined, prepareConfigResources()];\nfunction getConfigResources(options, previousSegments) {\n  cachedConfigResources = [options, prepareConfigResources(options, previousSegments)];\n  return cachedConfigResources[1];\n}\nfunction prepareConfigResources(options, previousSegments) {\n  if (options) {\n    (0, native_1.validatePathConfig)(options);\n  }\n  var initialRoutes = getInitialRoutes(options);\n  var configs = getNormalizedConfigs(initialRoutes, options == null ? void 0 : options.screens, previousSegments);\n  checkForDuplicatedConfigs(configs);\n  var configWithRegexes = getConfigsWithRegexes(configs);\n  return {\n    initialRoutes: initialRoutes,\n    configs: configs,\n    configWithRegexes: configWithRegexes\n  };\n}\nfunction getInitialRoutes(options) {\n  var initialRoutes = [];\n  if (options != null && options.initialRouteName) {\n    initialRoutes.push({\n      initialRouteName: options.initialRouteName,\n      parentScreens: []\n    });\n  }\n  return initialRoutes;\n}\nfunction getNormalizedConfigs(initialRoutes) {\n  var _ref;\n  var screens = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var previousSegments = arguments.length > 2 ? arguments[2] : undefined;\n  return (_ref = []).concat.apply(_ref, _toConsumableArray(Object.keys(screens).map(function (key) {\n    return _createNormalizedConfigs(key, screens, [], initialRoutes, []);\n  }))).map(expo.appendIsInitial(initialRoutes)).sort(expo.getRouteConfigSorter(previousSegments));\n}\nfunction checkForDuplicatedConfigs(configs) {\n  configs.reduce(function (acc, config) {\n    if (acc[config.pattern]) {\n      var a = acc[config.pattern].routeNames;\n      var b = config.routeNames;\n      var intersects = a.length > b.length ? b.every(function (it, i) {\n        return a[i] === it;\n      }) : a.every(function (it, i) {\n        return b[i] === it;\n      });\n      if (!intersects) {\n        throw new Error(`Found conflicting screens with the same pattern. The pattern '${config.pattern}' resolves to both '${a.join(' > ')}' and '${b.join(' > ')}'. Patterns must be unique and cannot resolve to more than one screen.`);\n      }\n    }\n    return Object.assign(acc, _defineProperty({}, config.pattern, config));\n  }, {});\n}\nfunction getConfigsWithRegexes(configs) {\n  return configs.map(function (c) {\n    return _objectSpread(_objectSpread({}, c), {}, {\n      regex: expo.configRegExp(c)\n    });\n  });\n}\nvar joinPaths = function joinPaths() {\n  var _ref2;\n  for (var _len = arguments.length, paths = new Array(_len), _key = 0; _key < _len; _key++) {\n    paths[_key] = arguments[_key];\n  }\n  return (_ref2 = []).concat.apply(_ref2, _toConsumableArray(paths.map(function (p) {\n    return p.split('/');\n  }))).filter(Boolean).join('/');\n};\nvar matchAgainstConfigs = function matchAgainstConfigs(remaining, configs) {\n  var routes;\n  var remainingPath = remaining;\n  var allParams = Object.create(null);\n  var _loop = function _loop(config) {\n      if (!config.regex) {\n        return 0;\n      }\n      var match = remainingPath.match(config.regex);\n      if (match) {\n        var _config$pattern;\n        var matchResult = (_config$pattern = config.pattern) == null ? void 0 : _config$pattern.split('/').reduce(function (acc, p, index) {\n          if (!expo.isDynamicPart(p)) {\n            return acc;\n          }\n          acc.pos += 1;\n          var decodedParamSegment = expo.safelyDecodeURIComponent(match[(acc.pos + 1) * 2].replace(/\\/$/, ''));\n          Object.assign(acc.matchedParams, _defineProperty({}, p, Object.assign(acc.matchedParams[p] || {}, _defineProperty({}, index, decodedParamSegment))));\n          return acc;\n        }, {\n          pos: -1,\n          matchedParams: {}\n        });\n        var matchedParams = matchResult.matchedParams || {};\n        routes = config.routeNames.map(function (name) {\n          var _routeConfig$pattern$;\n          var routeConfig = configs.find(function (c) {\n            return c.screen === name && config.pattern.startsWith(c.pattern);\n          });\n          var normalizedPath = routeConfig == null ? void 0 : routeConfig.path.split('/').filter(Boolean).join('/');\n          var numInitialSegments = routeConfig == null ? void 0 : (_routeConfig$pattern$ = routeConfig.pattern.replace(new RegExp(`${(0, escape_string_regexp_1.default)(normalizedPath)}$`), '')) == null ? void 0 : _routeConfig$pattern$.split('/').length;\n          var params = normalizedPath == null ? void 0 : normalizedPath.split('/').reduce(function (acc, p, index) {\n            var _matchedParams$p;\n            if (!expo.isDynamicPart(p)) {\n              return acc;\n            }\n            var offset = numInitialSegments ? numInitialSegments - 1 : 0;\n            var value = expo.getParamValue(p, (_matchedParams$p = matchedParams[p]) == null ? void 0 : _matchedParams$p[index + offset]);\n            if (value) {\n              var _routeConfig$parse;\n              var key = expo.replacePart(p);\n              acc[key] = routeConfig != null && (_routeConfig$parse = routeConfig.parse) != null && _routeConfig$parse[key] ? routeConfig.parse[key](value) : value;\n            }\n            return acc;\n          }, {});\n          if (params && Object.keys(params).length) {\n            Object.assign(allParams, params);\n            return {\n              name: name,\n              params: params\n            };\n          }\n          return {\n            name: name\n          };\n        });\n        remainingPath = remainingPath.replace(match[1], '');\n        return 1;\n      }\n    },\n    _ret;\n  for (var config of configs) {\n    _ret = _loop(config);\n    if (_ret === 0) continue;\n    if (_ret === 1) break;\n  }\n  expo.populateParams(routes, allParams);\n  return {\n    routes: routes,\n    remainingPath: remainingPath\n  };\n};\nvar _createNormalizedConfigs = function createNormalizedConfigs(screen, routeConfig) {\n  var routeNames = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var initials = arguments.length > 3 ? arguments[3] : undefined;\n  var parentScreens = arguments.length > 4 ? arguments[4] : undefined;\n  var parentPattern = arguments.length > 5 ? arguments[5] : undefined;\n  var configs = [];\n  routeNames.push(screen);\n  parentScreens.push(screen);\n  var config = routeConfig[screen];\n  if (typeof config === 'string') {\n    var pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n    configs.push(createConfigItem(screen, routeNames, pattern, config));\n  } else if (typeof config === 'object') {\n    var _pattern;\n    if (typeof config.path === 'string') {\n      if (config.exact && config.path === undefined) {\n        throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");\n      }\n      _pattern = config.exact !== true ? joinPaths(parentPattern || '', config.path || '') : config.path || '';\n      configs.push(createConfigItem(screen, routeNames, _pattern, config.path, config.parse, config));\n    }\n    if (config.screens) {\n      if (config.initialRouteName) {\n        initials.push({\n          initialRouteName: config.initialRouteName,\n          parentScreens: parentScreens\n        });\n      }\n      Object.keys(config.screens).forEach(function (nestedConfig) {\n        var _pattern2;\n        var result = _createNormalizedConfigs(nestedConfig, config.screens, routeNames, initials, _toConsumableArray(parentScreens), (_pattern2 = _pattern) != null ? _pattern2 : parentPattern);\n        configs.push.apply(configs, _toConsumableArray(result));\n      });\n    }\n  }\n  routeNames.pop();\n  return configs;\n};\nvar createConfigItem = function createConfigItem(screen, routeNames, pattern, path) {\n  var parse = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;\n  var config = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n  pattern = pattern.split('/').filter(Boolean).join('/');\n  var regex = pattern ? new RegExp(`^(${pattern.split('/').map(function (it) {\n    if (it.startsWith(':')) {\n      return `(([^/]+\\\\/)${it.endsWith('?') ? '?' : ''})`;\n    }\n    return `${it === '*' ? '.*' : (0, escape_string_regexp_1.default)(it)}\\\\/`;\n  }).join('')})`) : undefined;\n  return _objectSpread({\n    screen: screen,\n    regex: regex,\n    pattern: pattern,\n    path: path,\n    routeNames: _toConsumableArray(routeNames),\n    parse: parse\n  }, expo.createConfig(screen, pattern, routeNames, config));\n};\nvar findParseConfigForRoute = function findParseConfigForRoute(routeName, flatConfig) {\n  for (var config of flatConfig) {\n    if (routeName === config.routeNames[config.routeNames.length - 1]) {\n      return config.parse;\n    }\n  }\n  return undefined;\n};\nvar findInitialRoute = function findInitialRoute(routeName, parentScreens, initialRoutes) {\n  for (var config of initialRoutes) {\n    if (parentScreens.length === config.parentScreens.length) {\n      var sameParents = true;\n      for (var i = 0; i < parentScreens.length; i++) {\n        if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n          sameParents = false;\n          break;\n        }\n      }\n      if (sameParents) {\n        return routeName !== config.initialRouteName ? config.initialRouteName : undefined;\n      }\n    }\n  }\n  return undefined;\n};\nvar createStateObject = function createStateObject(initialRoute, route, isEmpty) {\n  if (isEmpty) {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{\n          name: initialRoute,\n          params: route.params\n        }, route]\n      };\n    } else {\n      return {\n        routes: [route]\n      };\n    }\n  } else {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{\n          name: initialRoute,\n          params: route.params\n        }, _objectSpread(_objectSpread({}, route), {}, {\n          state: {\n            routes: []\n          }\n        })]\n      };\n    } else {\n      return {\n        routes: [_objectSpread(_objectSpread({}, route), {}, {\n          state: {\n            routes: []\n          }\n        })]\n      };\n    }\n  }\n};\nvar createNestedStateObject = function createNestedStateObject(_ref3, routes, initialRoutes, flatConfig, hash) {\n  var path = _ref3.path,\n    expoURL = _objectWithoutProperties(_ref3, _excluded);\n  var route = routes.shift();\n  var parentScreens = [];\n  var initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n  parentScreens.push(route.name);\n  var state = createStateObject(initialRoute, route, routes.length === 0);\n  if (routes.length > 0) {\n    var nestedState = state;\n    while (route = routes.shift()) {\n      initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n      var nestedStateIndex = nestedState.index || nestedState.routes.length - 1;\n      nestedState.routes[nestedStateIndex].state = createStateObject(initialRoute, route, routes.length === 0);\n      if (routes.length > 0) {\n        nestedState = nestedState.routes[nestedStateIndex].state;\n      }\n      parentScreens.push(route.name);\n    }\n  }\n  route = (0, findFocusedRoute_1.findFocusedRoute)(state);\n  route.path = expoURL.pathWithoutGroups;\n  var params = expo.parseQueryParams(path, route, flatConfig ? findParseConfigForRoute(route.name, flatConfig) : undefined, hash);\n  if (params) {\n    route.params = _objectSpread(_objectSpread({}, route.params), params);\n  }\n  return state;\n};","map":{"version":3,"names":["native_1","require","escape_string_regexp_1","__importDefault","findFocusedRoute_1","expo","__importStar","getStateFromPath","path","options","_this$routeInfo","_options$path","_getConfigResources","getConfigResources","routeInfo","segments","initialRoutes","configs","configWithRegexes","screens","expoPath","getUrlWithReactNavigationConcessions","remaining","nonstandardPathname","replace","endsWith","prefix","normalizedPrefix","startsWith","undefined","routes","split","filter","Boolean","map","segment","name","decodeURIComponent","length","createNestedStateObject","url","hash","match","matchForEmptyPath","routeNames","result","current","_matchAgainstConfigs","matchAgainstConfigs","remainingPath","exports","cachedConfigResources","prepareConfigResources","previousSegments","validatePathConfig","getInitialRoutes","getNormalizedConfigs","checkForDuplicatedConfigs","getConfigsWithRegexes","initialRouteName","push","parentScreens","arguments","_ref","concat","apply","_toConsumableArray","Object","keys","key","createNormalizedConfigs","appendIsInitial","sort","getRouteConfigSorter","reduce","acc","config","pattern","a","b","intersects","every","it","i","Error","join","assign","_defineProperty","c","_objectSpread","regex","configRegExp","joinPaths","_ref2","_len","paths","Array","_key","p","allParams","create","_loop","_config$pattern","matchResult","index","isDynamicPart","pos","decodedParamSegment","safelyDecodeURIComponent","matchedParams","_routeConfig$pattern$","routeConfig","find","screen","normalizedPath","numInitialSegments","RegExp","default","params","_matchedParams$p","offset","value","getParamValue","_routeConfig$parse","replacePart","parse","_ret","populateParams","initials","parentPattern","createConfigItem","exact","forEach","nestedConfig","_pattern2","pop","createConfig","findParseConfigForRoute","routeName","flatConfig","findInitialRoute","sameParents","localeCompare","createStateObject","initialRoute","route","isEmpty","state","_ref3","expoURL","_objectWithoutProperties","_excluded","shift","nestedState","nestedStateIndex","findFocusedRoute","pathWithoutGroups","parseQueryParams"],"sources":["C:\\Users\\R User\\Documents\\software_dev\\BranchBuddy\\node_modules\\expo-router\\src\\fork\\getStateFromPath.ts"],"sourcesContent":["import { PathConfigMap, validatePathConfig } from '@react-navigation/native';\nimport type { InitialState, NavigationState, PartialState } from '@react-navigation/routers';\nimport escape from 'escape-string-regexp';\n\nimport { findFocusedRoute } from './findFocusedRoute';\nimport type { ExpoOptions, ExpoRouteConfig } from './getStateFromPath-forks';\nimport * as expo from './getStateFromPath-forks';\nimport { RouterStore } from '../global-state/router-store';\n\nexport type Options<ParamList extends object> = ExpoOptions & {\n  path?: string;\n  initialRouteName?: string;\n  screens: PathConfigMap<ParamList>;\n};\n\ntype ParseConfig = Record<string, (value: string) => any>;\n\nexport type RouteConfig = ExpoRouteConfig & {\n  screen: string;\n  regex?: RegExp;\n  path: string;\n  pattern: string;\n  routeNames: string[];\n  parse?: ParseConfig;\n};\n\nexport type InitialRouteConfig = {\n  initialRouteName: string;\n  parentScreens: string[];\n};\n\nexport type ResultState = PartialState<NavigationState> & {\n  state?: ResultState;\n};\n\nexport type ParsedRoute = {\n  name: string;\n  path?: string;\n  params?: Record<string, any> | undefined;\n};\n\ntype ConfigResources = {\n  initialRoutes: InitialRouteConfig[];\n  configs: RouteConfig[];\n  configWithRegexes: RouteConfig[];\n};\n\n/**\n * Utility to parse a path string to initial state object accepted by the container.\n * This is useful for deep linking when we need to handle the incoming URL.\n *\n * @example\n * ```js\n * getStateFromPath(\n *   '/chat/jane/42',\n *   {\n *     screens: {\n *       Chat: {\n *         path: 'chat/:author/:id',\n *         parse: { id: Number }\n *       }\n *     }\n *   }\n * )\n * ```\n * @param path Path string to parse and convert, e.g. /foo/bar?count=42.\n * @param options Extra options to fine-tune how to parse the path.\n */\nexport function getStateFromPath<ParamList extends object>(\n  // START FORK\n  this: RouterStore | undefined | void,\n  // END FORK\n  path: string,\n  options?: Options<ParamList>\n): ResultState | undefined {\n  const { initialRoutes, configs, configWithRegexes } = getConfigResources(\n    options,\n    this?.routeInfo?.segments\n  );\n\n  const screens = options?.screens;\n\n  // START FORK\n  const expoPath = expo.getUrlWithReactNavigationConcessions(path);\n  // END FORK\n\n  // START FORK\n  let remaining = expoPath.nonstandardPathname\n    // let remaining = path\n    // END FORK\n    .replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n    .replace(/^\\//, '') // Remove extra leading slash\n    .replace(/\\?.*$/, ''); // Remove query params which we will handle later\n\n  // Make sure there is a trailing slash\n  remaining = remaining.endsWith('/') ? remaining : `${remaining}/`;\n\n  const prefix = options?.path?.replace(/^\\//, ''); // Remove extra leading slash\n\n  if (prefix) {\n    // Make sure there is a trailing slash\n    const normalizedPrefix = prefix.endsWith('/') ? prefix : `${prefix}/`;\n\n    // If the path doesn't start with the prefix, it's not a match\n    if (!remaining.startsWith(normalizedPrefix)) {\n      return undefined;\n    }\n\n    // Remove the prefix from the path\n    remaining = remaining.replace(normalizedPrefix, '');\n  }\n\n  if (screens === undefined) {\n    // When no config is specified, use the path segments as route names\n    const routes = remaining\n      .split('/')\n      .filter(Boolean)\n      .map((segment) => {\n        const name = decodeURIComponent(segment);\n        return { name };\n      });\n\n    if (routes.length) {\n      return createNestedStateObject(expoPath, routes, initialRoutes, [], expoPath.url.hash);\n    }\n\n    return undefined;\n  }\n\n  if (remaining === '/') {\n    // We need to add special handling of empty path so navigation to empty path also works\n    // When handling empty path, we should only look at the root level config\n    // START FORK\n    const match = expo.matchForEmptyPath(configWithRegexes);\n    // const match = configs.find(\n    //   (config) =>\n    //     config.path === '' &&\n    //     config.routeNames.every(\n    //       // Make sure that none of the parent configs have a non-empty path defined\n    //       (name) => !configs.find((c) => c.screen === name)?.path\n    //     )\n    // );\n    // END FORK\n\n    if (match) {\n      return createNestedStateObject(\n        expoPath,\n        match.routeNames.map((name) => ({ name })),\n        initialRoutes,\n        configs,\n        expoPath.url.hash\n      );\n    }\n\n    return undefined;\n  }\n\n  let result: PartialState<NavigationState> | undefined;\n  let current: PartialState<NavigationState> | undefined;\n\n  // We match the whole path against the regex instead of segments\n  // This makes sure matches such as wildcard will catch any unmatched routes, even if nested\n  const { routes, remainingPath } = matchAgainstConfigs(remaining, configWithRegexes);\n\n  if (routes !== undefined) {\n    // This will always be empty if full path matched\n    current = createNestedStateObject(expoPath, routes, initialRoutes, configs, expoPath.url.hash);\n    remaining = remainingPath;\n    result = current;\n  }\n\n  if (current == null || result == null) {\n    return undefined;\n  }\n\n  return result;\n}\n\n/**\n * Reference to the last used config resources. This is used to avoid recomputing the config resources when the options are the same.\n */\nlet cachedConfigResources: [Options<object> | undefined, ConfigResources] = [\n  undefined,\n  prepareConfigResources(),\n];\n\nfunction getConfigResources<ParamList extends object>(\n  options: Options<ParamList> | undefined,\n  // START FORK\n  previousSegments?: string[]\n  // END FORK\n) {\n  // START FORK - We need to disable this caching as our configs can change based upon the current state\n  // if (cachedConfigResources[0] !== options) {\n  //   console.log(previousSegments);\n  cachedConfigResources = [options, prepareConfigResources(options, previousSegments)];\n  // }\n  // END FORK FORK\n\n  return cachedConfigResources[1];\n}\n\nfunction prepareConfigResources(options?: Options<object>, previousSegments?: string[]) {\n  if (options) {\n    validatePathConfig(options);\n  }\n\n  const initialRoutes = getInitialRoutes(options);\n\n  const configs = getNormalizedConfigs(initialRoutes, options?.screens, previousSegments);\n\n  checkForDuplicatedConfigs(configs);\n\n  const configWithRegexes = getConfigsWithRegexes(configs);\n\n  return {\n    initialRoutes,\n    configs,\n    configWithRegexes,\n  };\n}\n\nfunction getInitialRoutes(options?: Options<object>) {\n  const initialRoutes: InitialRouteConfig[] = [];\n\n  if (options?.initialRouteName) {\n    initialRoutes.push({\n      initialRouteName: options.initialRouteName,\n      parentScreens: [],\n    });\n  }\n\n  return initialRoutes;\n}\n\nfunction getNormalizedConfigs(\n  initialRoutes: InitialRouteConfig[],\n  screens: PathConfigMap<object> = {},\n  // START FORK\n  previousSegments?: string[]\n  // END FORK\n) {\n  // Create a normalized configs array which will be easier to use\n  return ([] as RouteConfig[])\n    .concat(\n      ...Object.keys(screens).map((key) =>\n        createNormalizedConfigs(key, screens as PathConfigMap<object>, [], initialRoutes, [])\n      )\n    )\n    .map(expo.appendIsInitial(initialRoutes))\n    .sort(expo.getRouteConfigSorter(previousSegments));\n  // .sort((a, b) => {\n  //   // Sort config so that:\n  //   // - the most exhaustive ones are always at the beginning\n  //   // - patterns with wildcard are always at the end\n\n  //   // If 2 patterns are same, move the one with less route names up\n  //   // This is an error state, so it's only useful for consistent error messages\n  //   if (a.pattern === b.pattern) {\n  //     return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n  //   }\n\n  //   // If one of the patterns starts with the other, it's more exhaustive\n  //   // So move it up\n  //   if (a.pattern.startsWith(b.pattern)) {\n  //     return -1;\n  //   }\n\n  //   if (b.pattern.startsWith(a.pattern)) {\n  //     return 1;\n  //   }\n\n  //   const aParts = a.pattern.split('/');\n  //   const bParts = b.pattern.split('/');\n\n  //   for (let i = 0; i < Math.max(aParts.length, bParts.length); i++) {\n  //     // if b is longer, b get higher priority\n  //     if (aParts[i] == null) {\n  //       return 1;\n  //     }\n  //     // if a is longer, a get higher priority\n  //     if (bParts[i] == null) {\n  //       return -1;\n  //     }\n  //     const aWildCard = aParts[i] === '*' || aParts[i].startsWith(':');\n  //     const bWildCard = bParts[i] === '*' || bParts[i].startsWith(':');\n  //     // if both are wildcard we compare next component\n  //     if (aWildCard && bWildCard) {\n  //       continue;\n  //     }\n  //     // if only a is wild card, b get higher priority\n  //     if (aWildCard) {\n  //       return 1;\n  //     }\n  //     // if only b is wild card, a get higher priority\n  //     if (bWildCard) {\n  //       return -1;\n  //     }\n  //   }\n  //   return bParts.length - aParts.length;\n  // });\n}\n\nfunction checkForDuplicatedConfigs(configs: RouteConfig[]) {\n  // Check for duplicate patterns in the config\n  configs.reduce<Record<string, RouteConfig>>((acc, config) => {\n    if (acc[config.pattern]) {\n      const a = acc[config.pattern].routeNames;\n      const b = config.routeNames;\n\n      // It's not a problem if the path string omitted from a inner most screen\n      // For example, it's ok if a path resolves to `A > B > C` or `A > B`\n      const intersects =\n        a.length > b.length ? b.every((it, i) => a[i] === it) : a.every((it, i) => b[i] === it);\n\n      if (!intersects) {\n        throw new Error(\n          `Found conflicting screens with the same pattern. The pattern '${\n            config.pattern\n          }' resolves to both '${a.join(' > ')}' and '${b.join(\n            ' > '\n          )}'. Patterns must be unique and cannot resolve to more than one screen.`\n        );\n      }\n    }\n\n    return Object.assign(acc, {\n      [config.pattern]: config,\n    });\n  }, {});\n}\n\nfunction getConfigsWithRegexes(configs: RouteConfig[]) {\n  return configs.map((c) => ({\n    ...c,\n    // Add `$` to the regex to make sure it matches till end of the path and not just beginning\n    // START FORK\n    // regex: c.regex ? new RegExp(c.regex.source + '$') : undefined,\n    regex: expo.configRegExp(c),\n    // END FORK\n  }));\n}\n\nconst joinPaths = (...paths: string[]): string =>\n  ([] as string[])\n    .concat(...paths.map((p) => p.split('/')))\n    .filter(Boolean)\n    .join('/');\n\nconst matchAgainstConfigs = (remaining: string, configs: RouteConfig[]) => {\n  let routes: ParsedRoute[] | undefined;\n  let remainingPath = remaining;\n\n  // START FORK\n  const allParams = Object.create(null);\n  // END FORK\n\n  // Go through all configs, and see if the next path segment matches our regex\n  for (const config of configs) {\n    if (!config.regex) {\n      continue;\n    }\n\n    const match = remainingPath.match(config.regex);\n\n    // If our regex matches, we need to extract params from the path\n    if (match) {\n      const matchResult = config.pattern?.split('/').reduce<{\n        pos: number; // Position of the current path param segment in the path (e.g in pattern `a/:b/:c`, `:a` is 0 and `:b` is 1)\n        matchedParams: Record<string, Record<string, string>>; // The extracted params\n      }>(\n        (acc, p, index) => {\n          if (!expo.isDynamicPart(p)) {\n            return acc;\n          }\n\n          acc.pos += 1;\n\n          // START FORK\n          const decodedParamSegment = expo.safelyDecodeURIComponent(\n            // const decodedParamSegment = decodeURIComponent(\n            // The param segments appear every second item starting from 2 in the regex match result\n            match![(acc.pos + 1) * 2]\n              // Remove trailing slash\n              .replace(/\\/$/, '')\n          );\n          // END FORK\n\n          Object.assign(acc.matchedParams, {\n            [p]: Object.assign(acc.matchedParams[p] || {}, {\n              [index]: decodedParamSegment,\n            }),\n          });\n\n          return acc;\n        },\n        { pos: -1, matchedParams: {} }\n      );\n\n      const matchedParams = matchResult.matchedParams || {};\n\n      routes = config.routeNames.map((name) => {\n        const routeConfig = configs.find((c) => {\n          // Check matching name AND pattern in case same screen is used at different levels in config\n          return c.screen === name && config.pattern.startsWith(c.pattern);\n        });\n\n        // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n        const normalizedPath = routeConfig?.path.split('/').filter(Boolean).join('/');\n\n        // Get the number of segments in the initial pattern\n        const numInitialSegments = routeConfig?.pattern\n          // Extract the prefix from the pattern by removing the ending path pattern (e.g pattern=`a/b/c/d` and normalizedPath=`c/d` becomes `a/b`)\n          .replace(new RegExp(`${escape(normalizedPath!)}$`), '')\n          ?.split('/').length;\n\n        const params = normalizedPath\n          ?.split('/')\n          .reduce<Record<string, unknown>>((acc, p, index) => {\n            if (!expo.isDynamicPart(p)) {\n              return acc;\n            }\n\n            // Get the real index of the path parameter in the matched path\n            // by offsetting by the number of segments in the initial pattern\n            const offset = numInitialSegments ? numInitialSegments - 1 : 0;\n            // START FORK\n            // const value = matchedParams[p]?.[index + offset];\n            const value = expo.getParamValue(p, matchedParams[p]?.[index + offset]);\n            // END FORK\n\n            if (value) {\n              // START FORK\n              // const key = p.replace(/^:/, '').replace(/\\?$/, '');\n              const key = expo.replacePart(p);\n              // END FORK\n              acc[key] = routeConfig?.parse?.[key] ? routeConfig.parse[key](value as any) : value;\n            }\n\n            return acc;\n          }, {});\n\n        if (params && Object.keys(params).length) {\n          Object.assign(allParams, params);\n          return { name, params };\n        }\n\n        return { name };\n      });\n\n      remainingPath = remainingPath.replace(match[1], '');\n\n      break;\n    }\n  }\n\n  // START FORK\n  expo.populateParams(routes, allParams);\n  // END FORK\n\n  return { routes, remainingPath };\n};\n\nconst createNormalizedConfigs = (\n  screen: string,\n  routeConfig: PathConfigMap<object>,\n  routeNames: string[] = [],\n  initials: InitialRouteConfig[],\n  parentScreens: string[],\n  parentPattern?: string\n): RouteConfig[] => {\n  const configs: RouteConfig[] = [];\n\n  routeNames.push(screen);\n\n  parentScreens.push(screen);\n\n  const config = routeConfig[screen];\n\n  if (typeof config === 'string') {\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n\n    configs.push(createConfigItem(screen, routeNames, pattern, config));\n  } else if (typeof config === 'object') {\n    let pattern: string | undefined;\n\n    // if an object is specified as the value (e.g. Foo: { ... }),\n    // it can have `path` property and\n    // it could have `screens` prop which has nested configs\n    if (typeof config.path === 'string') {\n      if (config.exact && config.path === undefined) {\n        throw new Error(\n          \"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\"\n        );\n      }\n\n      pattern =\n        config.exact !== true\n          ? joinPaths(parentPattern || '', config.path || '')\n          : config.path || '';\n\n      configs.push(\n        createConfigItem(screen, routeNames, pattern!, config.path, config.parse, config)\n      );\n    }\n\n    if (config.screens) {\n      // property `initialRouteName` without `screens` has no purpose\n      if (config.initialRouteName) {\n        initials.push({\n          initialRouteName: config.initialRouteName,\n          parentScreens,\n        });\n      }\n\n      Object.keys(config.screens).forEach((nestedConfig) => {\n        const result = createNormalizedConfigs(\n          nestedConfig,\n          config.screens as PathConfigMap<object>,\n          routeNames,\n          initials,\n          [...parentScreens],\n          pattern ?? parentPattern\n        );\n\n        configs.push(...result);\n      });\n    }\n  }\n\n  routeNames.pop();\n\n  return configs;\n};\n\nconst createConfigItem = (\n  screen: string,\n  routeNames: string[],\n  pattern: string,\n  path: string,\n  parse: ParseConfig | undefined = undefined,\n  config: Record<string, any> = {}\n): RouteConfig => {\n  // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n  pattern = pattern.split('/').filter(Boolean).join('/');\n\n  const regex = pattern\n    ? new RegExp(\n        `^(${pattern\n          .split('/')\n          .map((it) => {\n            if (it.startsWith(':')) {\n              return `(([^/]+\\\\/)${it.endsWith('?') ? '?' : ''})`;\n            }\n\n            return `${it === '*' ? '.*' : escape(it)}\\\\/`;\n          })\n          .join('')})`\n      )\n    : undefined;\n\n  return {\n    screen,\n    regex,\n    pattern,\n    path,\n    // The routeNames array is mutated, so copy it to keep the current state\n    routeNames: [...routeNames],\n    parse,\n    // START FORK\n    ...expo.createConfig(screen, pattern, routeNames, config),\n    // END FORK\n  };\n};\n\nconst findParseConfigForRoute = (\n  routeName: string,\n  flatConfig: RouteConfig[]\n): ParseConfig | undefined => {\n  for (const config of flatConfig) {\n    if (routeName === config.routeNames[config.routeNames.length - 1]) {\n      return config.parse;\n    }\n  }\n\n  return undefined;\n};\n\n// Try to find an initial route connected with the one passed\nconst findInitialRoute = (\n  routeName: string,\n  parentScreens: string[],\n  initialRoutes: InitialRouteConfig[]\n): string | undefined => {\n  for (const config of initialRoutes) {\n    if (parentScreens.length === config.parentScreens.length) {\n      let sameParents = true;\n      for (let i = 0; i < parentScreens.length; i++) {\n        if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n          sameParents = false;\n          break;\n        }\n      }\n      if (sameParents) {\n        return routeName !== config.initialRouteName ? config.initialRouteName : undefined;\n      }\n    }\n  }\n  return undefined;\n};\n\n// returns state object with values depending on whether\n// it is the end of state and if there is initialRoute for this level\nconst createStateObject = (\n  initialRoute: string | undefined,\n  route: ParsedRoute,\n  isEmpty: boolean\n): InitialState => {\n  if (isEmpty) {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{ name: initialRoute, params: route.params }, route],\n      };\n    } else {\n      return {\n        routes: [route],\n      };\n    }\n  } else {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [\n          { name: initialRoute, params: route.params },\n          { ...route, state: { routes: [] } },\n        ],\n      };\n    } else {\n      return {\n        routes: [{ ...route, state: { routes: [] } }],\n      };\n    }\n  }\n};\n\nconst createNestedStateObject = (\n  { path, ...expoURL }: ReturnType<typeof expo.getUrlWithReactNavigationConcessions>,\n  routes: ParsedRoute[],\n  initialRoutes: InitialRouteConfig[],\n  flatConfig?: RouteConfig[],\n  hash?: string\n) => {\n  let route = routes.shift() as ParsedRoute;\n  const parentScreens: string[] = [];\n\n  let initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n\n  parentScreens.push(route.name);\n\n  const state: InitialState = createStateObject(initialRoute, route, routes.length === 0);\n\n  if (routes.length > 0) {\n    let nestedState = state;\n\n    while ((route = routes.shift() as ParsedRoute)) {\n      initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n\n      const nestedStateIndex = nestedState.index || nestedState.routes.length - 1;\n\n      nestedState.routes[nestedStateIndex].state = createStateObject(\n        initialRoute,\n        route,\n        routes.length === 0\n      );\n\n      if (routes.length > 0) {\n        nestedState = nestedState.routes[nestedStateIndex].state as InitialState;\n      }\n\n      parentScreens.push(route.name);\n    }\n  }\n\n  route = findFocusedRoute(state) as ParsedRoute;\n  // START FORK\n  route.path = expoURL.pathWithoutGroups;\n  // route.path = path;\n  // END FORK\n\n  // START FORK\n  // const params = parseQueryParams(\n  const params = expo.parseQueryParams(\n    path,\n    route,\n    flatConfig ? findParseConfigForRoute(route.name, flatConfig) : undefined,\n    hash\n  );\n  // END FORK\n\n  // START FORK\n  // expo.handleUrlParams(route, params, hash);\n  if (params) {\n    route.params = { ...route.params, ...params };\n  }\n  // END FORK\n\n  return state;\n};\n\n// START FORK\n// const parseQueryParams = (path: string, parseConfig?: Record<string, (value: string) => any>) => {\n//   const query = path.split('?')[1];\n//   const params = queryString.parse(query);\n\n//   if (parseConfig) {\n//     Object.keys(params).forEach((name) => {\n//       if (Object.hasOwnProperty.call(parseConfig, name) && typeof params[name] === 'string') {\n//         params[name] = parseConfig[name](params[name] as string);\n//       }\n//     });\n//   }\n\n//   return Object.keys(params).length ? params : undefined;\n// };\n// END FORK\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}