{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.series = void 0;\nexports.useLinking = useLinking;\nvar _core = require(\"@react-navigation/core\");\nvar _fastDeepEqual = _interopRequireDefault(require(\"fast-deep-equal\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _createMemoryHistory = require(\"./createMemoryHistory.js\");\nvar _ServerContext = require(\"./ServerContext.js\");\nfunction _getRequireWildcardCache(e) {\n  if (\"function\" != typeof WeakMap) return null;\n  var r = new WeakMap(),\n    t = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {\n    return e ? t : r;\n  })(e);\n}\nfunction _interopRequireWildcard(e, r) {\n  if (!r && e && e.__esModule) return e;\n  if (null === e || \"object\" != typeof e && \"function\" != typeof e) return {\n    default: e\n  };\n  var t = _getRequireWildcardCache(r);\n  if (t && t.has(e)) return t.get(e);\n  var n = {\n      __proto__: null\n    },\n    a = Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var u in e) if (\"default\" !== u && {}.hasOwnProperty.call(e, u)) {\n    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;\n    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];\n  }\n  return n.default = e, t && t.set(e, n), n;\n}\nfunction _interopRequireDefault(e) {\n  return e && e.__esModule ? e : {\n    default: e\n  };\n}\nvar _findMatchingState = function findMatchingState(a, b) {\n  if (a === undefined || b === undefined || a.key !== b.key) {\n    return [undefined, undefined];\n  }\n  var aHistoryLength = a.history ? a.history.length : a.routes.length;\n  var bHistoryLength = b.history ? b.history.length : b.routes.length;\n  var aRoute = a.routes[a.index];\n  var bRoute = b.routes[b.index];\n  var aChildState = aRoute.state;\n  var bChildState = bRoute.state;\n  if (aHistoryLength !== bHistoryLength || aRoute.key !== bRoute.key || aChildState === undefined || bChildState === undefined || aChildState.key !== bChildState.key) {\n    return [a, b];\n  }\n  return _findMatchingState(aChildState, bChildState);\n};\nvar series = function series(cb) {\n  var queue = Promise.resolve();\n  var callback = function callback() {\n    queue = queue.then(cb);\n  };\n  return callback;\n};\nexports.series = series;\nvar linkingHandlers = [];\nfunction useLinking(ref, _ref, onUnhandledLinking) {\n  var _ref$enabled = _ref.enabled,\n    enabled = _ref$enabled === void 0 ? true : _ref$enabled,\n    config = _ref.config,\n    _ref$getStateFromPath = _ref.getStateFromPath,\n    getStateFromPath = _ref$getStateFromPath === void 0 ? _core.getStateFromPath : _ref$getStateFromPath,\n    _ref$getPathFromState = _ref.getPathFromState,\n    getPathFromState = _ref$getPathFromState === void 0 ? _core.getPathFromState : _ref$getPathFromState,\n    _ref$getActionFromSta = _ref.getActionFromState,\n    getActionFromState = _ref$getActionFromSta === void 0 ? _core.getActionFromState : _ref$getActionFromSta;\n  var independent = (0, _core.useNavigationIndependentTree)();\n  React.useEffect(function () {\n    if (process.env.NODE_ENV === 'production') {\n      return undefined;\n    }\n    if (independent) {\n      return undefined;\n    }\n    if (enabled !== false && linkingHandlers.length) {\n      console.error(['Looks like you have configured linking in multiple places. This is likely an error since deep links should only be handled in one place to avoid conflicts. Make sure that:', \"- You don't have multiple NavigationContainers in the app each with 'linking' enabled\", '- Only a single instance of the root component is rendered'].join('\\n').trim());\n    }\n    var handler = Symbol();\n    if (enabled !== false) {\n      linkingHandlers.push(handler);\n    }\n    return function () {\n      var index = linkingHandlers.indexOf(handler);\n      if (index > -1) {\n        linkingHandlers.splice(index, 1);\n      }\n    };\n  }, [enabled, independent]);\n  var _React$useState = React.useState(_createMemoryHistory.createMemoryHistory),\n    _React$useState2 = _slicedToArray(_React$useState, 1),\n    history = _React$useState2[0];\n  var enabledRef = React.useRef(enabled);\n  var configRef = React.useRef(config);\n  var getStateFromPathRef = React.useRef(getStateFromPath);\n  var getPathFromStateRef = React.useRef(getPathFromState);\n  var getActionFromStateRef = React.useRef(getActionFromState);\n  React.useEffect(function () {\n    enabledRef.current = enabled;\n    configRef.current = config;\n    getStateFromPathRef.current = getStateFromPath;\n    getPathFromStateRef.current = getPathFromState;\n    getActionFromStateRef.current = getActionFromState;\n  });\n  var validateRoutesNotExistInRootState = React.useCallback(function (state) {\n    var navigation = ref.current;\n    var rootState = navigation == null ? void 0 : navigation.getRootState();\n    return state == null ? void 0 : state.routes.some(function (r) {\n      return !(rootState != null && rootState.routeNames.includes(r.name));\n    });\n  }, [ref]);\n  var server = React.useContext(_ServerContext.ServerContext);\n  var getInitialState = React.useCallback(function () {\n    var value;\n    if (enabledRef.current) {\n      var _server$location;\n      var _location = (_server$location = server == null ? void 0 : server.location) != null ? _server$location : typeof window !== 'undefined' ? window.location : undefined;\n      var path = _location ? _location.pathname + _location.search : undefined;\n      if (path) {\n        value = getStateFromPathRef.current(path, configRef.current);\n      }\n      onUnhandledLinking(path);\n    }\n    var thenable = {\n      then: function then(onfulfilled) {\n        return Promise.resolve(onfulfilled ? onfulfilled(value) : value);\n      },\n      catch: function _catch() {\n        return thenable;\n      }\n    };\n    return thenable;\n  }, []);\n  var previousIndexRef = React.useRef(undefined);\n  var previousStateRef = React.useRef(undefined);\n  var pendingPopStatePathRef = React.useRef(undefined);\n  React.useEffect(function () {\n    previousIndexRef.current = history.index;\n    return history.listen(function () {\n      var _previousIndexRef$cur;\n      var navigation = ref.current;\n      if (!navigation || !enabled) {\n        return;\n      }\n      var _window = window,\n        location = _window.location;\n      var path = location.pathname + location.search;\n      var index = history.index;\n      var previousIndex = (_previousIndexRef$cur = previousIndexRef.current) != null ? _previousIndexRef$cur : 0;\n      previousIndexRef.current = index;\n      pendingPopStatePathRef.current = path;\n      var record = history.get(index);\n      if ((record == null ? void 0 : record.path) === path && record != null && record.state) {\n        navigation.resetRoot(record.state);\n        return;\n      }\n      var state = getStateFromPathRef.current(path, configRef.current);\n      if (state) {\n        onUnhandledLinking(path);\n        if (validateRoutesNotExistInRootState(state)) {\n          return;\n        }\n        if (index > previousIndex) {\n          var action = getActionFromStateRef.current(state, configRef.current);\n          if (action !== undefined) {\n            try {\n              navigation.dispatch(action);\n            } catch (e) {\n              console.warn(`An error occurred when trying to handle the link '${path}': ${typeof e === 'object' && e != null && 'message' in e ? e.message : e}`);\n            }\n          } else {\n            navigation.resetRoot(state);\n          }\n        } else {\n          navigation.resetRoot(state);\n        }\n      } else {\n        navigation.resetRoot(state);\n      }\n    });\n  }, [enabled, history, onUnhandledLinking, ref, validateRoutesNotExistInRootState]);\n  React.useEffect(function () {\n    var _ref$current;\n    if (!enabled) {\n      return;\n    }\n    var getPathForRoute = function getPathForRoute(route, state) {\n      var path;\n      if (route != null && route.path) {\n        var stateForPath = getStateFromPathRef.current(route.path, configRef.current);\n        if (stateForPath) {\n          var focusedRoute = (0, _core.findFocusedRoute)(stateForPath);\n          if (focusedRoute && focusedRoute.name === route.name && (0, _fastDeepEqual.default)(focusedRoute.params, route.params)) {\n            path = route.path;\n          }\n        }\n      }\n      if (path == null) {\n        path = getPathFromStateRef.current(state, configRef.current);\n      }\n      var previousRoute = previousStateRef.current ? (0, _core.findFocusedRoute)(previousStateRef.current) : undefined;\n      if (previousRoute && route && 'key' in previousRoute && 'key' in route && previousRoute.key === route.key) {\n        path = path + location.hash;\n      }\n      return path;\n    };\n    if (ref.current) {\n      var state = ref.current.getRootState();\n      if (state) {\n        var route = (0, _core.findFocusedRoute)(state);\n        var path = getPathForRoute(route, state);\n        if (previousStateRef.current === undefined) {\n          previousStateRef.current = state;\n        }\n        history.replace({\n          path: path,\n          state: state\n        });\n      }\n    }\n    var onStateChange = function () {\n      var _ref2 = _asyncToGenerator(function* () {\n        var navigation = ref.current;\n        if (!navigation || !enabled) {\n          return;\n        }\n        var previousState = previousStateRef.current;\n        var state = navigation.getRootState();\n        if (!state) {\n          return;\n        }\n        var pendingPath = pendingPopStatePathRef.current;\n        var route = (0, _core.findFocusedRoute)(state);\n        var path = getPathForRoute(route, state);\n        previousStateRef.current = state;\n        pendingPopStatePathRef.current = undefined;\n        var _findMatchingState2 = _findMatchingState(previousState, state),\n          _findMatchingState3 = _slicedToArray(_findMatchingState2, 2),\n          previousFocusedState = _findMatchingState3[0],\n          focusedState = _findMatchingState3[1];\n        if (previousFocusedState && focusedState && path !== pendingPath) {\n          var historyDelta = (focusedState.history ? focusedState.history.length : focusedState.routes.length) - (previousFocusedState.history ? previousFocusedState.history.length : previousFocusedState.routes.length);\n          if (historyDelta > 0) {\n            history.push({\n              path: path,\n              state: state\n            });\n          } else if (historyDelta < 0) {\n            var nextIndex = history.backIndex({\n              path: path\n            });\n            var currentIndex = history.index;\n            try {\n              if (nextIndex !== -1 && nextIndex < currentIndex && history.get(nextIndex - currentIndex)) {\n                yield history.go(nextIndex - currentIndex);\n              } else {\n                yield history.go(historyDelta);\n              }\n              history.replace({\n                path: path,\n                state: state\n              });\n            } catch (e) {}\n          } else {\n            history.replace({\n              path: path,\n              state: state\n            });\n          }\n        } else {\n          history.replace({\n            path: path,\n            state: state\n          });\n        }\n      });\n      return function onStateChange() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    return (_ref$current = ref.current) == null ? void 0 : _ref$current.addListener('state', series(onStateChange));\n  }, [enabled, history, ref]);\n  return {\n    getInitialState: getInitialState\n  };\n}","map":{"version":3,"names":["_core","require","_fastDeepEqual","_interopRequireDefault","React","_interopRequireWildcard","_createMemoryHistory","_ServerContext","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","findMatchingState","b","undefined","key","aHistoryLength","history","length","routes","bHistoryLength","aRoute","index","bRoute","aChildState","state","bChildState","series","cb","queue","Promise","resolve","callback","then","exports","linkingHandlers","useLinking","ref","_ref","onUnhandledLinking","_ref$enabled","enabled","config","_ref$getStateFromPath","getStateFromPath","_ref$getPathFromState","getPathFromState","_ref$getActionFromSta","getActionFromState","independent","useNavigationIndependentTree","useEffect","process","env","NODE_ENV","console","error","join","trim","handler","Symbol","push","indexOf","splice","_React$useState","useState","createMemoryHistory","_React$useState2","_slicedToArray","enabledRef","useRef","configRef","getStateFromPathRef","getPathFromStateRef","getActionFromStateRef","current","validateRoutesNotExistInRootState","useCallback","navigation","rootState","getRootState","some","routeNames","includes","name","server","useContext","ServerContext","getInitialState","value","_server$location","location","window","path","pathname","search","thenable","onfulfilled","catch","previousIndexRef","previousStateRef","pendingPopStatePathRef","listen","_previousIndexRef$cur","_window","previousIndex","record","resetRoot","action","dispatch","warn","message","_ref$current","getPathForRoute","route","stateForPath","focusedRoute","findFocusedRoute","params","previousRoute","hash","replace","onStateChange","_ref2","_asyncToGenerator","previousState","pendingPath","_findMatchingState2","_findMatchingState3","previousFocusedState","focusedState","historyDelta","nextIndex","backIndex","currentIndex","go","apply","arguments","addListener"],"sources":["C:\\Users\\R User\\Documents\\software_dev\\BranchBuddy\\node_modules\\@react-navigation\\native\\src\\useLinking.tsx"],"sourcesContent":["import {\n  findFocusedRoute,\n  getActionFromState as getActionFromStateDefault,\n  getPathFromState as getPathFromStateDefault,\n  getStateFromPath as getStateFromPathDefault,\n  type NavigationContainerRef,\n  type NavigationState,\n  type ParamListBase,\n  useNavigationIndependentTree,\n} from '@react-navigation/core';\nimport isEqual from 'fast-deep-equal';\nimport * as React from 'react';\n\nimport { createMemoryHistory } from './createMemoryHistory';\nimport { ServerContext } from './ServerContext';\nimport type { LinkingOptions } from './types';\n\ntype ResultState = ReturnType<typeof getStateFromPathDefault>;\n\n/**\n * Find the matching navigation state that changed between 2 navigation states\n * e.g.: a -> b -> c -> d and a -> b -> c -> e -> f, if history in b changed, b is the matching state\n */\nconst findMatchingState = <T extends NavigationState>(\n  a: T | undefined,\n  b: T | undefined\n): [T | undefined, T | undefined] => {\n  if (a === undefined || b === undefined || a.key !== b.key) {\n    return [undefined, undefined];\n  }\n\n  // Tab and drawer will have `history` property, but stack will have history in `routes`\n  const aHistoryLength = a.history ? a.history.length : a.routes.length;\n  const bHistoryLength = b.history ? b.history.length : b.routes.length;\n\n  const aRoute = a.routes[a.index];\n  const bRoute = b.routes[b.index];\n\n  const aChildState = aRoute.state as T | undefined;\n  const bChildState = bRoute.state as T | undefined;\n\n  // Stop here if this is the state object that changed:\n  // - history length is different\n  // - focused routes are different\n  // - one of them doesn't have child state\n  // - child state keys are different\n  if (\n    aHistoryLength !== bHistoryLength ||\n    aRoute.key !== bRoute.key ||\n    aChildState === undefined ||\n    bChildState === undefined ||\n    aChildState.key !== bChildState.key\n  ) {\n    return [a, b];\n  }\n\n  return findMatchingState(aChildState, bChildState);\n};\n\n/**\n * Run async function in series as it's called.\n */\nexport const series = (cb: () => Promise<void>) => {\n  let queue = Promise.resolve();\n  const callback = () => {\n    // eslint-disable-next-line promise/no-callback-in-promise\n    queue = queue.then(cb);\n  };\n  return callback;\n};\n\nconst linkingHandlers: symbol[] = [];\n\ntype Options = LinkingOptions<ParamListBase>;\n\nexport function useLinking(\n  ref: React.RefObject<NavigationContainerRef<ParamListBase>>,\n  {\n    enabled = true,\n    config,\n    getStateFromPath = getStateFromPathDefault,\n    getPathFromState = getPathFromStateDefault,\n    getActionFromState = getActionFromStateDefault,\n  }: Options,\n  onUnhandledLinking: (lastUnhandledLining: string | undefined) => void\n) {\n  const independent = useNavigationIndependentTree();\n\n  React.useEffect(() => {\n    if (process.env.NODE_ENV === 'production') {\n      return undefined;\n    }\n\n    if (independent) {\n      return undefined;\n    }\n\n    if (enabled !== false && linkingHandlers.length) {\n      console.error(\n        [\n          'Looks like you have configured linking in multiple places. This is likely an error since deep links should only be handled in one place to avoid conflicts. Make sure that:',\n          \"- You don't have multiple NavigationContainers in the app each with 'linking' enabled\",\n          '- Only a single instance of the root component is rendered',\n        ]\n          .join('\\n')\n          .trim()\n      );\n    }\n\n    const handler = Symbol();\n\n    if (enabled !== false) {\n      linkingHandlers.push(handler);\n    }\n\n    return () => {\n      const index = linkingHandlers.indexOf(handler);\n\n      if (index > -1) {\n        linkingHandlers.splice(index, 1);\n      }\n    };\n  }, [enabled, independent]);\n\n  const [history] = React.useState(createMemoryHistory);\n\n  // We store these options in ref to avoid re-creating getInitialState and re-subscribing listeners\n  // This lets user avoid wrapping the items in `React.useCallback` or `React.useMemo`\n  // Not re-creating `getInitialState` is important coz it makes it easier for the user to use in an effect\n  const enabledRef = React.useRef(enabled);\n  const configRef = React.useRef(config);\n  const getStateFromPathRef = React.useRef(getStateFromPath);\n  const getPathFromStateRef = React.useRef(getPathFromState);\n  const getActionFromStateRef = React.useRef(getActionFromState);\n\n  React.useEffect(() => {\n    enabledRef.current = enabled;\n    configRef.current = config;\n    getStateFromPathRef.current = getStateFromPath;\n    getPathFromStateRef.current = getPathFromState;\n    getActionFromStateRef.current = getActionFromState;\n  });\n\n  const validateRoutesNotExistInRootState = React.useCallback(\n    (state: ResultState) => {\n      const navigation = ref.current;\n      const rootState = navigation?.getRootState();\n      // Make sure that the routes in the state exist in the root navigator\n      // Otherwise there's an error in the linking configuration\n      return state?.routes.some((r) => !rootState?.routeNames.includes(r.name));\n    },\n    [ref]\n  );\n\n  const server = React.useContext(ServerContext);\n\n  const getInitialState = React.useCallback(() => {\n    let value: ResultState | undefined;\n\n    if (enabledRef.current) {\n      const location =\n        server?.location ??\n        (typeof window !== 'undefined' ? window.location : undefined);\n\n      const path = location ? location.pathname + location.search : undefined;\n\n      if (path) {\n        value = getStateFromPathRef.current(path, configRef.current);\n      }\n\n      // If the link were handled, it gets cleared in NavigationContainer\n      onUnhandledLinking(path);\n    }\n\n    const thenable = {\n      then(onfulfilled?: (state: ResultState | undefined) => void) {\n        return Promise.resolve(onfulfilled ? onfulfilled(value) : value);\n      },\n      catch() {\n        return thenable;\n      },\n    };\n\n    return thenable as PromiseLike<ResultState | undefined>;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const previousIndexRef = React.useRef<number | undefined>(undefined);\n  const previousStateRef = React.useRef<NavigationState | undefined>(undefined);\n  const pendingPopStatePathRef = React.useRef<string | undefined>(undefined);\n\n  React.useEffect(() => {\n    previousIndexRef.current = history.index;\n\n    return history.listen(() => {\n      const navigation = ref.current;\n\n      if (!navigation || !enabled) {\n        return;\n      }\n\n      const { location } = window;\n\n      const path = location.pathname + location.search;\n      const index = history.index;\n\n      const previousIndex = previousIndexRef.current ?? 0;\n\n      previousIndexRef.current = index;\n      pendingPopStatePathRef.current = path;\n\n      // When browser back/forward is clicked, we first need to check if state object for this index exists\n      // If it does we'll reset to that state object\n      // Otherwise, we'll handle it like a regular deep link\n      const record = history.get(index);\n\n      if (record?.path === path && record?.state) {\n        navigation.resetRoot(record.state);\n        return;\n      }\n\n      const state = getStateFromPathRef.current(path, configRef.current);\n\n      // We should only dispatch an action when going forward\n      // Otherwise the action will likely add items to history, which would mess things up\n      if (state) {\n        // If the link were handled, it gets cleared in NavigationContainer\n        onUnhandledLinking(path);\n        // Make sure that the routes in the state exist in the root navigator\n        // Otherwise there's an error in the linking configuration\n        if (validateRoutesNotExistInRootState(state)) {\n          return;\n        }\n\n        if (index > previousIndex) {\n          const action = getActionFromStateRef.current(\n            state,\n            configRef.current\n          );\n\n          if (action !== undefined) {\n            try {\n              navigation.dispatch(action);\n            } catch (e) {\n              // Ignore any errors from deep linking.\n              // This could happen in case of malformed links, navigation object not being initialized etc.\n              console.warn(\n                `An error occurred when trying to handle the link '${path}': ${\n                  typeof e === 'object' && e != null && 'message' in e\n                    ? e.message\n                    : e\n                }`\n              );\n            }\n          } else {\n            navigation.resetRoot(state);\n          }\n        } else {\n          navigation.resetRoot(state);\n        }\n      } else {\n        // if current path didn't return any state, we should revert to initial state\n        navigation.resetRoot(state);\n      }\n    });\n  }, [\n    enabled,\n    history,\n    onUnhandledLinking,\n    ref,\n    validateRoutesNotExistInRootState,\n  ]);\n\n  React.useEffect(() => {\n    if (!enabled) {\n      return;\n    }\n\n    const getPathForRoute = (\n      route: ReturnType<typeof findFocusedRoute>,\n      state: NavigationState\n    ): string => {\n      let path;\n\n      // If the `route` object contains a `path`, use that path as long as `route.name` and `params` still match\n      // This makes sure that we preserve the original URL for wildcard routes\n      if (route?.path) {\n        const stateForPath = getStateFromPathRef.current(\n          route.path,\n          configRef.current\n        );\n\n        if (stateForPath) {\n          const focusedRoute = findFocusedRoute(stateForPath);\n\n          if (\n            focusedRoute &&\n            focusedRoute.name === route.name &&\n            isEqual(focusedRoute.params, route.params)\n          ) {\n            path = route.path;\n          }\n        }\n      }\n\n      if (path == null) {\n        path = getPathFromStateRef.current(state, configRef.current);\n      }\n\n      const previousRoute = previousStateRef.current\n        ? findFocusedRoute(previousStateRef.current)\n        : undefined;\n\n      // Preserve the hash if the route didn't change\n      if (\n        previousRoute &&\n        route &&\n        'key' in previousRoute &&\n        'key' in route &&\n        previousRoute.key === route.key\n      ) {\n        path = path + location.hash;\n      }\n\n      return path;\n    };\n\n    if (ref.current) {\n      // We need to record the current metadata on the first render if they aren't set\n      // This will allow the initial state to be in the history entry\n      const state = ref.current.getRootState();\n\n      if (state) {\n        const route = findFocusedRoute(state);\n        const path = getPathForRoute(route, state);\n\n        if (previousStateRef.current === undefined) {\n          previousStateRef.current = state;\n        }\n\n        history.replace({ path, state });\n      }\n    }\n\n    const onStateChange = async () => {\n      const navigation = ref.current;\n\n      if (!navigation || !enabled) {\n        return;\n      }\n\n      const previousState = previousStateRef.current;\n      const state = navigation.getRootState();\n\n      // root state may not available, for example when root navigators switch inside the container\n      if (!state) {\n        return;\n      }\n\n      const pendingPath = pendingPopStatePathRef.current;\n      const route = findFocusedRoute(state);\n      const path = getPathForRoute(route, state);\n\n      previousStateRef.current = state;\n      pendingPopStatePathRef.current = undefined;\n\n      // To detect the kind of state change, we need to:\n      // - Find the common focused navigation state in previous and current state\n      // - If only the route keys changed, compare history/routes.length to check if we go back/forward/replace\n      // - If no common focused navigation state found, it's a replace\n      const [previousFocusedState, focusedState] = findMatchingState(\n        previousState,\n        state\n      );\n\n      if (\n        previousFocusedState &&\n        focusedState &&\n        // We should only handle push/pop if path changed from what was in last `popstate`\n        // Otherwise it's likely a change triggered by `popstate`\n        path !== pendingPath\n      ) {\n        const historyDelta =\n          (focusedState.history\n            ? focusedState.history.length\n            : focusedState.routes.length) -\n          (previousFocusedState.history\n            ? previousFocusedState.history.length\n            : previousFocusedState.routes.length);\n\n        if (historyDelta > 0) {\n          // If history length is increased, we should pushState\n          // Note that path might not actually change here, for example, drawer open should pushState\n          history.push({ path, state });\n        } else if (historyDelta < 0) {\n          // If history length is decreased, i.e. entries were removed, we want to go back\n\n          const nextIndex = history.backIndex({ path });\n          const currentIndex = history.index;\n\n          try {\n            if (\n              nextIndex !== -1 &&\n              nextIndex < currentIndex &&\n              // We should only go back if the entry exists and it's less than current index\n              history.get(nextIndex - currentIndex)\n            ) {\n              // An existing entry for this path exists and it's less than current index, go back to that\n              await history.go(nextIndex - currentIndex);\n            } else {\n              // We couldn't find an existing entry to go back to, so we'll go back by the delta\n              // This won't be correct if multiple routes were pushed in one go before\n              // Usually this shouldn't happen and this is a fallback for that\n              await history.go(historyDelta);\n            }\n\n            // Store the updated state as well as fix the path if incorrect\n            history.replace({ path, state });\n          } catch (e) {\n            // The navigation was interrupted\n          }\n        } else {\n          // If history length is unchanged, we want to replaceState\n          history.replace({ path, state });\n        }\n      } else {\n        // If no common navigation state was found, assume it's a replace\n        // This would happen if the user did a reset/conditionally changed navigators\n        history.replace({ path, state });\n      }\n    };\n\n    // We debounce onStateChange coz we don't want multiple state changes to be handled at one time\n    // This could happen since `history.go(n)` is asynchronous\n    // If `pushState` or `replaceState` were called before `history.go(n)` completes, it'll mess stuff up\n    return ref.current?.addListener('state', series(onStateChange));\n  }, [enabled, history, ref]);\n\n  return {\n    getInitialState,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}